
Siam On a Quest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000834  000008c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000648  00800062  00800062  000008ca  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d8  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000609  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001d6  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000767  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000297  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000036e  00000000  00000000  0000255f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000044  00000000  00000000  000028cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  00002911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	16 e0       	ldi	r17, 0x06	; 6
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3a       	cpi	r26, 0xAA	; 170
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  8a:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enableRed>:
int game_delay , jump_delay;
int currentGreenBar;

void enableRed() {
	
	PORTC &= 0b11111101;
  92:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= 0b00000001;	
  94:	a8 9a       	sbi	0x15, 0	; 21
}
  96:	08 95       	ret

00000098 <disableRed>:

void disableRed()
{
	PORTC |= 0x02;
  98:	a9 9a       	sbi	0x15, 1	; 21
	PORTC |= 0x01;	
  9a:	a8 9a       	sbi	0x15, 0	; 21
}
  9c:	08 95       	ret

0000009e <enableGreen>:
void enableGreen() {
	
	PORTC &= 0b11111110;
  9e:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= 0b00000010;
  a0:	a9 9a       	sbi	0x15, 1	; 21
}
  a2:	08 95       	ret

000000a4 <disableGreen>:
void disableGreen()
{
	PORTC |= 0x03;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bb       	out	0x15, r24	; 21
}
  aa:	08 95       	ret

000000ac <printScreen>:


void printScreen() {
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	
	for(int r = 0; r < 16; r++){
  bc:	ee 24       	eor	r14, r14
  be:	ff 24       	eor	r15, r15
		PORTA = r;
		for(int c = 0; c < 16; c++){
  c0:	cc 24       	eor	r12, r12
  c2:	dd 24       	eor	r13, r13


void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
  c4:	eb ba       	out	0x1b, r14	; 27
{
	PORTC |= 0x03;
}


void printScreen() {
  c6:	87 01       	movw	r16, r14
  c8:	00 0f       	add	r16, r16
  ca:	11 1f       	adc	r17, r17
  cc:	02 95       	swap	r16
  ce:	12 95       	swap	r17
  d0:	10 7f       	andi	r17, 0xF0	; 240
  d2:	10 27       	eor	r17, r16
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	10 27       	eor	r17, r16
  d8:	02 59       	subi	r16, 0x92	; 146
  da:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
  dc:	e6 01       	movw	r28, r12
			if(pattern[r][c] == 1) {
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <printScreen+0x52>
				disableRed();
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <disableRed>
				PORTD = (c<<4);
  f0:	9e 01       	movw	r18, r28
  f2:	22 95       	swap	r18
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	22 bb       	out	0x12, r18	; 18
				enableGreen();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <enableGreen>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <printScreen+0x68>
				
			}
			else if( pattern[r][c] == 2 ){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	31 f4       	brne	.+12     	; 0x110 <printScreen+0x64>
				disableGreen();
 104:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
				PORTD = (c);
 108:	c2 bb       	out	0x12, r28	; 18
				enableRed();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <enableRed>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <printScreen+0x68>
			}
			else disableGreen();
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>

void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c0 31       	cpi	r28, 0x10	; 16
 118:	d1 05       	cpc	r29, r1
 11a:	09 f7       	brne	.-62     	; 0xde <printScreen+0x32>
				enableRed();
			}
			else disableGreen();
			
		}
		disableGreen();
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
}


void printScreen() {
	
	for(int r = 0; r < 16; r++){
 120:	08 94       	sec
 122:	e1 1c       	adc	r14, r1
 124:	f1 1c       	adc	r15, r1
 126:	90 e1       	ldi	r25, 0x10	; 16
 128:	e9 16       	cp	r14, r25
 12a:	f1 04       	cpc	r15, r1
 12c:	59 f6       	brne	.-106    	; 0xc4 <printScreen+0x18>
			
		}
		disableGreen();
	}
	//disableGreen();
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret

00000140 <printErrorBar>:

void printErrorBar() {
	
	for(int i = 4 ; i < 10 ; i++ ) {
		pattern[3][i] = 2;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 d7 00 	sts	0x00D7, r25
 148:	80 93 d6 00 	sts	0x00D6, r24
 14c:	90 93 d9 00 	sts	0x00D9, r25
 150:	80 93 d8 00 	sts	0x00D8, r24
 154:	90 93 db 00 	sts	0x00DB, r25
 158:	80 93 da 00 	sts	0x00DA, r24
 15c:	90 93 dd 00 	sts	0x00DD, r25
 160:	80 93 dc 00 	sts	0x00DC, r24
 164:	90 93 df 00 	sts	0x00DF, r25
 168:	80 93 de 00 	sts	0x00DE, r24
 16c:	90 93 e1 00 	sts	0x00E1, r25
 170:	80 93 e0 00 	sts	0x00E0, r24
	}
}
 174:	08 95       	ret

00000176 <printGreen>:

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
 17e:	2b bb       	out	0x1b, r18	; 27
		for(int j =0 ; j < 16 ; j++ ) {	
 180:	ca 01       	movw	r24, r20
			PORTD = ( j <<4);
 182:	68 2f       	mov	r22, r24
 184:	62 95       	swap	r22
 186:	60 7f       	andi	r22, 0xF0	; 240
 188:	62 bb       	out	0x12, r22	; 18
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	91 05       	cpc	r25, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <printGreen+0xc>
		pattern[3][i] = 2;
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	20 31       	cpi	r18, 0x10	; 16
 198:	31 05       	cpc	r19, r1
 19a:	89 f7       	brne	.-30     	; 0x17e <printGreen+0x8>
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
			PORTD = ( j <<4);
		}
	}
}
 19c:	08 95       	ret

0000019e <printRed>:

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
 1a6:	1b ba       	out	0x1b, r1	; 27
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a8:	ca 01       	movw	r24, r20
			
			PORTD = ( j );
 1aa:	82 bb       	out	0x12, r24	; 18
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	80 31       	cpi	r24, 0x10	; 16
 1b0:	91 05       	cpc	r25, r1
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <printRed+0xc>
		}
	}
}

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	20 31       	cpi	r18, 0x10	; 16
 1ba:	31 05       	cpc	r19, r1
 1bc:	a1 f7       	brne	.-24     	; 0x1a6 <printRed+0x8>
		for(int j =0 ; j < 16 ; j++ ) {
			
			PORTD = ( j );
		}
	}
}
 1be:	08 95       	ret

000001c0 <setGreenBars>:
struct Player {	
	int baseRo , baseCol , jmpLeft , alive;
} siam;


void setGreenBars() {
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 1d4:	e8 e6       	ldi	r30, 0x68	; 104
 1d6:	f2 e0       	ldi	r31, 0x02	; 2
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
		if(i %3 == 0 ) bars[i].ro = 14;
 1dc:	c3 e0       	ldi	r28, 0x03	; 3
 1de:	d0 e0       	ldi	r29, 0x00	; 0
		else if(i %3 == 1 ) bars[i].ro = 10;
		else if(i %3 == 2 ) bars[i].ro = 6;
 1e0:	0f 2e       	mov	r0, r31
 1e2:	f6 e0       	ldi	r31, 0x06	; 6
 1e4:	af 2e       	mov	r10, r31
 1e6:	bb 24       	eor	r11, r11
 1e8:	f0 2d       	mov	r31, r0

void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
		else if(i %3 == 1 ) bars[i].ro = 10;
 1ea:	0f 2e       	mov	r0, r31
 1ec:	fa e0       	ldi	r31, 0x0A	; 10
 1ee:	cf 2e       	mov	r12, r31
 1f0:	dd 24       	eor	r13, r13
 1f2:	f0 2d       	mov	r31, r0


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 1f4:	0f 2e       	mov	r0, r31
 1f6:	fe e0       	ldi	r31, 0x0E	; 14
 1f8:	ef 2e       	mov	r14, r31
 1fa:	ff 24       	eor	r15, r15
 1fc:	f0 2d       	mov	r31, r0
		
		if( i > 0  ) bars[i].col = bars[i-1].col + bars[i-1].len ;
		
		if(i %3 == 0 ) bars[i].len = 5;
		else if(i %3 == 1 ) bars[i].len = 3;
		else if(i %3 == 2 ) bars[i].len = 5;
 1fe:	05 e0       	ldi	r16, 0x05	; 5
 200:	10 e0       	ldi	r17, 0x00	; 0


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 202:	c9 01       	movw	r24, r18
 204:	be 01       	movw	r22, r28
 206:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	19 f4       	brne	.+6      	; 0x214 <setGreenBars+0x54>
 20e:	f1 86       	std	Z+9, r15	; 0x09
 210:	e0 86       	std	Z+8, r14	; 0x08
 212:	0b c0       	rjmp	.+22     	; 0x22a <setGreenBars+0x6a>
		else if(i %3 == 1 ) bars[i].ro = 10;
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	91 05       	cpc	r25, r1
 218:	19 f4       	brne	.+6      	; 0x220 <setGreenBars+0x60>
 21a:	d1 86       	std	Z+9, r13	; 0x09
 21c:	c0 86       	std	Z+8, r12	; 0x08
 21e:	05 c0       	rjmp	.+10     	; 0x22a <setGreenBars+0x6a>
		else if(i %3 == 2 ) bars[i].ro = 6;
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	91 05       	cpc	r25, r1
 224:	11 f4       	brne	.+4      	; 0x22a <setGreenBars+0x6a>
 226:	b1 86       	std	Z+9, r11	; 0x09
 228:	a0 86       	std	Z+8, r10	; 0x08
		
		if( i > 0  ) bars[i].col = bars[i-1].col + bars[i-1].len ;
 22a:	12 16       	cp	r1, r18
 22c:	13 06       	cpc	r1, r19
 22e:	44 f4       	brge	.+16     	; 0x240 <setGreenBars+0x80>
 230:	60 81       	ld	r22, Z
 232:	71 81       	ldd	r23, Z+1	; 0x01
 234:	44 81       	ldd	r20, Z+4	; 0x04
 236:	55 81       	ldd	r21, Z+5	; 0x05
 238:	46 0f       	add	r20, r22
 23a:	57 1f       	adc	r21, r23
 23c:	53 87       	std	Z+11, r21	; 0x0b
 23e:	42 87       	std	Z+10, r20	; 0x0a
		
		if(i %3 == 0 ) bars[i].len = 5;
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	19 f4       	brne	.+6      	; 0x24a <setGreenBars+0x8a>
 244:	17 83       	std	Z+7, r17	; 0x07
 246:	06 83       	std	Z+6, r16	; 0x06
 248:	0b c0       	rjmp	.+22     	; 0x260 <setGreenBars+0xa0>
		else if(i %3 == 1 ) bars[i].len = 3;
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	91 05       	cpc	r25, r1
 24e:	19 f4       	brne	.+6      	; 0x256 <setGreenBars+0x96>
 250:	d7 83       	std	Z+7, r29	; 0x07
 252:	c6 83       	std	Z+6, r28	; 0x06
 254:	05 c0       	rjmp	.+10     	; 0x260 <setGreenBars+0xa0>
		else if(i %3 == 2 ) bars[i].len = 5;
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <setGreenBars+0xa0>
 25c:	17 83       	std	Z+7, r17	; 0x07
 25e:	06 83       	std	Z+6, r16	; 0x06
} siam;


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 260:	2f 5f       	subi	r18, 0xFF	; 255
 262:	3f 4f       	sbci	r19, 0xFF	; 255
 264:	36 96       	adiw	r30, 0x06	; 6
 266:	24 3b       	cpi	r18, 0xB4	; 180
 268:	31 05       	cpc	r19, r1
 26a:	59 f6       	brne	.-106    	; 0x202 <setGreenBars+0x42>
		if(i %3 == 0 ) bars[i].len = 5;
		else if(i %3 == 1 ) bars[i].len = 3;
		else if(i %3 == 2 ) bars[i].len = 5;
		
	}
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	ff 90       	pop	r15
 276:	ef 90       	pop	r14
 278:	df 90       	pop	r13
 27a:	cf 90       	pop	r12
 27c:	bf 90       	pop	r11
 27e:	af 90       	pop	r10
 280:	08 95       	ret

00000282 <setSiam>:

void setSiam() {
	
	siam.alive = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 6d 00 	sts	0x006D, r25
 28a:	80 93 6c 00 	sts	0x006C, r24
	siam.baseRo = bars[0].ro - 1;
 28e:	e6 e6       	ldi	r30, 0x66	; 102
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 91 70 02 	lds	r24, 0x0270
 296:	90 91 71 02 	lds	r25, 0x0271
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
	siam.baseCol = bars[0].col + 1;
 2a0:	80 91 72 02 	lds	r24, 0x0272
 2a4:	90 91 73 02 	lds	r25, 0x0273
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	93 83       	std	Z+3, r25	; 0x03
 2ac:	82 83       	std	Z+2, r24	; 0x02
	siam.jmpLeft = 0;
 2ae:	15 82       	std	Z+5, r1	; 0x05
 2b0:	14 82       	std	Z+4, r1	; 0x04
}
 2b2:	08 95       	ret

000002b4 <insideFrame>:

int insideFrame(int barID) {
	
	int frm = bars[barID].col;
 2b4:	9c 01       	movw	r18, r24
 2b6:	22 0f       	add	r18, r18
 2b8:	33 1f       	adc	r19, r19
 2ba:	28 0f       	add	r18, r24
 2bc:	39 1f       	adc	r19, r25
 2be:	f9 01       	movw	r30, r18
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	e2 59       	subi	r30, 0x92	; 146
 2c6:	fd 4f       	sbci	r31, 0xFD	; 253
 2c8:	84 81       	ldd	r24, Z+4	; 0x04
 2ca:	95 81       	ldd	r25, Z+5	; 0x05
	int to = frm + bars[barID].len;
 2cc:	60 81       	ld	r22, Z
 2ce:	71 81       	ldd	r23, Z+1	; 0x01
 2d0:	68 0f       	add	r22, r24
 2d2:	79 1f       	adc	r23, r25

	int leftFrame = nowCol;
 2d4:	20 91 62 00 	lds	r18, 0x0062
 2d8:	30 91 63 00 	lds	r19, 0x0063
	int rightFrame = nowCol + 15;
 2dc:	a9 01       	movw	r20, r18
 2de:	41 5f       	subi	r20, 0xF1	; 241
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255

	if(frm >= leftFrame && to <= rightFrame) return 1;
 2e2:	82 17       	cp	r24, r18
 2e4:	93 07       	cpc	r25, r19
 2e6:	34 f0       	brlt	.+12     	; 0x2f4 <insideFrame+0x40>
 2e8:	46 17       	cp	r20, r22
 2ea:	57 07       	cpc	r21, r23
 2ec:	8c f4       	brge	.+34     	; 0x310 <insideFrame+0x5c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 2ee:	28 17       	cp	r18, r24
 2f0:	39 07       	cpc	r19, r25
 2f2:	1c f0       	brlt	.+6      	; 0x2fa <insideFrame+0x46>
 2f4:	62 17       	cp	r22, r18
 2f6:	73 07       	cpc	r23, r19
 2f8:	74 f4       	brge	.+28     	; 0x316 <insideFrame+0x62>
	if(frm <= rightFrame && to >= rightFrame) return 1;
 2fa:	48 17       	cp	r20, r24
 2fc:	59 07       	cpc	r21, r25
 2fe:	74 f0       	brlt	.+28     	; 0x31c <insideFrame+0x68>
	siam.baseRo = bars[0].ro - 1;
	siam.baseCol = bars[0].col + 1;
	siam.jmpLeft = 0;
}

int insideFrame(int barID) {
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	64 17       	cp	r22, r20
 306:	75 07       	cpc	r23, r21
 308:	5c f4       	brge	.+22     	; 0x320 <insideFrame+0x6c>
 30a:	20 e0       	ldi	r18, 0x00	; 0
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	08 c0       	rjmp	.+16     	; 0x320 <insideFrame+0x6c>
	int to = frm + bars[barID].len;

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(frm >= leftFrame && to <= rightFrame) return 1;
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	05 c0       	rjmp	.+10     	; 0x320 <insideFrame+0x6c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <insideFrame+0x6c>
	if(frm <= rightFrame && to >= rightFrame) return 1;

	return 0;
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
}
 320:	82 2f       	mov	r24, r18
 322:	93 2f       	mov	r25, r19
 324:	08 95       	ret

00000326 <setOnPatternArray>:


void setOnPatternArray(int barID) {
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
	
	int barRo = bars[barID].ro;
 32a:	fc 01       	movw	r30, r24
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	e8 0f       	add	r30, r24
 332:	f9 1f       	adc	r31, r25
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	e2 59       	subi	r30, 0x92	; 146
 33a:	fd 4f       	sbci	r31, 0xFD	; 253
 33c:	a2 81       	ldd	r26, Z+2	; 0x02
 33e:	b3 81       	ldd	r27, Z+3	; 0x03
	int barBeginCol = bars[barID].col;
 340:	24 81       	ldd	r18, Z+4	; 0x04
 342:	35 81       	ldd	r19, Z+5	; 0x05
	int barEndCol = barBeginCol + bars[barID].len - 1;
	
	int printFrm = nowCol;
 344:	40 91 62 00 	lds	r20, 0x0062
 348:	50 91 63 00 	lds	r21, 0x0063
 34c:	ba 01       	movw	r22, r20
 34e:	42 17       	cp	r20, r18
 350:	53 07       	cpc	r21, r19
 352:	0c f4       	brge	.+2      	; 0x356 <setOnPatternArray+0x30>
 354:	b9 01       	movw	r22, r18
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 356:	fa 01       	movw	r30, r20
 358:	3f 96       	adiw	r30, 0x0f	; 15

void setOnPatternArray(int barID) {
	
	int barRo = bars[barID].ro;
	int barBeginCol = bars[barID].col;
	int barEndCol = barBeginCol + bars[barID].len - 1;
 35a:	ec 01       	movw	r28, r24
 35c:	cc 0f       	add	r28, r28
 35e:	dd 1f       	adc	r29, r29
 360:	8c 0f       	add	r24, r28
 362:	9d 1f       	adc	r25, r29
 364:	ec 01       	movw	r28, r24
 366:	cc 0f       	add	r28, r28
 368:	dd 1f       	adc	r29, r29
 36a:	c2 59       	subi	r28, 0x92	; 146
 36c:	dd 4f       	sbci	r29, 0xFD	; 253
 36e:	88 81       	ld	r24, Y
 370:	99 81       	ldd	r25, Y+1	; 0x01
 372:	28 0f       	add	r18, r24
 374:	39 1f       	adc	r19, r25
 376:	21 50       	subi	r18, 0x01	; 1
 378:	30 40       	sbci	r19, 0x00	; 0
	
	int printFrm = nowCol;
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 37a:	e2 17       	cp	r30, r18
 37c:	f3 07       	cpc	r31, r19
 37e:	0c f4       	brge	.+2      	; 0x382 <setOnPatternArray+0x5c>
 380:	9f 01       	movw	r18, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 382:	26 17       	cp	r18, r22
 384:	37 07       	cpc	r19, r23
 386:	cc f0       	brlt	.+50     	; 0x3ba <setOnPatternArray+0x94>

	return 0;
}


void setOnPatternArray(int barID) {
 388:	fd 01       	movw	r30, r26
 38a:	e2 95       	swap	r30
 38c:	f2 95       	swap	r31
 38e:	f0 7f       	andi	r31, 0xF0	; 240
 390:	fe 27       	eor	r31, r30
 392:	e0 7f       	andi	r30, 0xF0	; 240
 394:	fe 27       	eor	r31, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
 396:	cb 01       	movw	r24, r22
 398:	84 1b       	sub	r24, r20
 39a:	95 0b       	sbc	r25, r21

	return 0;
}


void setOnPatternArray(int barID) {
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	e2 59       	subi	r30, 0x92	; 146
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 3a8:	cb 01       	movw	r24, r22
		pattern[barRo][i - nowCol] = 1;
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	41 93       	st	Z+, r20
 3b0:	51 93       	st	Z+, r21
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	28 17       	cp	r18, r24
 3b6:	39 07       	cpc	r19, r25
 3b8:	d4 f7       	brge	.-12     	; 0x3ae <setOnPatternArray+0x88>
		pattern[barRo][i - nowCol] = 1;
	}
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <UpdateGreenBars>:

void UpdateGreenBars() {
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
	
	memset(pattern , 0 , sizeof pattern);
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	92 e0       	ldi	r25, 0x02	; 2
 3cc:	ee e6       	ldi	r30, 0x6E	; 110
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	df 01       	movw	r26, r30
 3d2:	9c 01       	movw	r18, r24
 3d4:	1d 92       	st	X+, r1
 3d6:	21 50       	subi	r18, 0x01	; 1
 3d8:	30 40       	sbci	r19, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <UpdateGreenBars+0x14>
	int tmp = currentGreenBar;
 3dc:	c0 91 a8 06 	lds	r28, 0x06A8
 3e0:	d0 91 a9 06 	lds	r29, 0x06A9
	currentGreenBar  = INF;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	9f e7       	ldi	r25, 0x7F	; 127
 3e8:	90 93 a9 06 	sts	0x06A9, r25
 3ec:	80 93 a8 06 	sts	0x06A8, r24
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 3f0:	ce 01       	movw	r24, r28
 3f2:	05 96       	adiw	r24, 0x05	; 5
 3f4:	c8 17       	cp	r28, r24
 3f6:	d9 07       	cpc	r29, r25
 3f8:	c4 f4       	brge	.+48     	; 0x42a <UpdateGreenBars+0x6a>
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
	}
}

void UpdateGreenBars() {
 3fa:	8c 01       	movw	r16, r24
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
	
		if(insideFrame(i) )	 {
 3fc:	ce 01       	movw	r24, r28
 3fe:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <insideFrame>
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	71 f0       	breq	.+28     	; 0x422 <UpdateGreenBars+0x62>
			
			if(i < currentGreenBar)  currentGreenBar = i;
 406:	80 91 a8 06 	lds	r24, 0x06A8
 40a:	90 91 a9 06 	lds	r25, 0x06A9
 40e:	c8 17       	cp	r28, r24
 410:	d9 07       	cpc	r29, r25
 412:	24 f4       	brge	.+8      	; 0x41c <UpdateGreenBars+0x5c>
 414:	d0 93 a9 06 	sts	0x06A9, r29
 418:	c0 93 a8 06 	sts	0x06A8, r28
			setOnPatternArray(i);
 41c:	ce 01       	movw	r24, r28
 41e:	0e 94 93 01 	call	0x326	; 0x326 <setOnPatternArray>
void UpdateGreenBars() {
	
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 422:	21 96       	adiw	r28, 0x01	; 1
 424:	c0 17       	cp	r28, r16
 426:	d1 07       	cpc	r29, r17
 428:	49 f7       	brne	.-46     	; 0x3fc <UpdateGreenBars+0x3c>
			if(i < currentGreenBar)  currentGreenBar = i;
			setOnPatternArray(i);
		}
	}
	
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <right_move_condition_found>:


int right_move_condition_found() {
	
	if(siam.alive == 0 ) return 0;
 434:	80 91 6c 00 	lds	r24, 0x006C
 438:	90 91 6d 00 	lds	r25, 0x006D
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	09 f4       	brne	.+2      	; 0x442 <right_move_condition_found+0xe>
 440:	5a c0       	rjmp	.+180    	; 0x4f6 <right_move_condition_found+0xc2>
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] == 1 ) ret = 0;
 442:	20 91 66 00 	lds	r18, 0x0066
 446:	30 91 67 00 	lds	r19, 0x0067
 44a:	80 91 68 00 	lds	r24, 0x0068
 44e:	90 91 69 00 	lds	r25, 0x0069
 452:	01 96       	adiw	r24, 0x01	; 1
 454:	f9 01       	movw	r30, r18
 456:	e2 95       	swap	r30
 458:	f2 95       	swap	r31
 45a:	f0 7f       	andi	r31, 0xF0	; 240
 45c:	fe 27       	eor	r31, r30
 45e:	e0 7f       	andi	r30, 0xF0	; 240
 460:	fe 27       	eor	r31, r30
 462:	e8 0f       	add	r30, r24
 464:	f9 1f       	adc	r31, r25
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e2 59       	subi	r30, 0x92	; 146
 46c:	ff 4f       	sbci	r31, 0xFF	; 255
	}
	
}


int right_move_condition_found() {
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	60 81       	ld	r22, Z
 474:	71 81       	ldd	r23, Z+1	; 0x01
 476:	61 30       	cpi	r22, 0x01	; 1
 478:	71 05       	cpc	r23, r1
 47a:	11 f4       	brne	.+4      	; 0x480 <right_move_condition_found+0x4c>
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	50 e0       	ldi	r21, 0x00	; 0
	
	if(siam.alive == 0 ) return 0;
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] == 1 ) ret = 0;
 480:	f9 01       	movw	r30, r18
 482:	31 97       	sbiw	r30, 0x01	; 1
 484:	e2 95       	swap	r30
 486:	f2 95       	swap	r31
 488:	f0 7f       	andi	r31, 0xF0	; 240
 48a:	fe 27       	eor	r31, r30
 48c:	e0 7f       	andi	r30, 0xF0	; 240
 48e:	fe 27       	eor	r31, r30
 490:	e8 0f       	add	r30, r24
 492:	f9 1f       	adc	r31, r25
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	e2 59       	subi	r30, 0x92	; 146
 49a:	ff 4f       	sbci	r31, 0xFF	; 255
 49c:	60 81       	ld	r22, Z
 49e:	71 81       	ldd	r23, Z+1	; 0x01
 4a0:	61 30       	cpi	r22, 0x01	; 1
 4a2:	71 05       	cpc	r23, r1
 4a4:	11 f4       	brne	.+4      	; 0x4aa <right_move_condition_found+0x76>
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	22 50       	subi	r18, 0x02	; 2
 4ac:	30 40       	sbci	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	e2 95       	swap	r30
 4b2:	f2 95       	swap	r31
 4b4:	f0 7f       	andi	r31, 0xF0	; 240
 4b6:	fe 27       	eor	r31, r30
 4b8:	e0 7f       	andi	r30, 0xF0	; 240
 4ba:	fe 27       	eor	r31, r30
 4bc:	8e 0f       	add	r24, r30
 4be:	9f 1f       	adc	r25, r31
 4c0:	fc 01       	movw	r30, r24
 4c2:	ee 0f       	add	r30, r30
 4c4:	ff 1f       	adc	r31, r31
 4c6:	e2 59       	subi	r30, 0x92	; 146
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	80 81       	ld	r24, Z
 4cc:	91 81       	ldd	r25, Z+1	; 0x01
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	91 05       	cpc	r25, r1
 4d2:	a1 f0       	breq	.+40     	; 0x4fc <right_move_condition_found+0xc8>
	}
	
	if( ret == 0 )  return 0;
 4d4:	41 15       	cp	r20, r1
 4d6:	51 05       	cpc	r21, r1
 4d8:	a1 f0       	breq	.+40     	; 0x502 <right_move_condition_found+0xce>
	
	return  (bit_is_set(PINB, 0) && game_delay == 1 );
 4da:	b0 9b       	sbis	0x16, 0	; 22
 4dc:	15 c0       	rjmp	.+42     	; 0x508 <right_move_condition_found+0xd4>
	}
	
}


int right_move_condition_found() {
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	80 91 64 00 	lds	r24, 0x0064
 4e6:	90 91 65 00 	lds	r25, 0x0065
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	91 05       	cpc	r25, r1
 4ee:	71 f0       	breq	.+28     	; 0x50c <right_move_condition_found+0xd8>
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	0b c0       	rjmp	.+22     	; 0x50c <right_move_condition_found+0xd8>
	
	if(siam.alive == 0 ) return 0;
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	08 c0       	rjmp	.+16     	; 0x50c <right_move_condition_found+0xd8>
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] == 1 ) ret = 0;
	}
	
	if( ret == 0 )  return 0;
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	05 c0       	rjmp	.+10     	; 0x50c <right_move_condition_found+0xd8>
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <right_move_condition_found+0xd8>
	
	return  (bit_is_set(PINB, 0) && game_delay == 1 );
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
}
 50c:	82 2f       	mov	r24, r18
 50e:	93 2f       	mov	r25, r19
 510:	08 95       	ret

00000512 <jumpCheckSiam>:


void jumpCheckSiam() {
 512:	0f 93       	push	r16
 514:	1f 93       	push	r17
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
	
	
	if(jump_delay != 1) return;
 51a:	80 91 a6 06 	lds	r24, 0x06A6
 51e:	90 91 a7 06 	lds	r25, 0x06A7
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	91 05       	cpc	r25, r1
 526:	09 f0       	breq	.+2      	; 0x52a <jumpCheckSiam+0x18>
 528:	72 c0       	rjmp	.+228    	; 0x60e <jumpCheckSiam+0xfc>
	
	if(siam.jmpLeft > 0) {
 52a:	a0 91 6a 00 	lds	r26, 0x006A
 52e:	b0 91 6b 00 	lds	r27, 0x006B
 532:	1a 16       	cp	r1, r26
 534:	1b 06       	cpc	r1, r27
 536:	b4 f5       	brge	.+108    	; 0x5a4 <jumpCheckSiam+0x92>
		siam.baseRo--;
 538:	20 91 66 00 	lds	r18, 0x0066
 53c:	30 91 67 00 	lds	r19, 0x0067
		siam.jmpLeft--;
 540:	11 97       	sbiw	r26, 0x01	; 1
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 542:	e0 91 68 00 	lds	r30, 0x0068
 546:	f0 91 69 00 	lds	r31, 0x0069
 54a:	21 50       	subi	r18, 0x01	; 1
 54c:	30 40       	sbci	r19, 0x00	; 0
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 552:	6e e6       	ldi	r22, 0x6E	; 110
 554:	70 e0       	ldi	r23, 0x00	; 0
				siam.jmpLeft = 0;
 556:	00 e0       	ldi	r16, 0x00	; 0
 558:	10 e0       	ldi	r17, 0x00	; 0
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 55a:	a9 01       	movw	r20, r18
 55c:	48 1b       	sub	r20, r24
 55e:	59 0b       	sbc	r21, r25
 560:	42 95       	swap	r20
 562:	52 95       	swap	r21
 564:	50 7f       	andi	r21, 0xF0	; 240
 566:	54 27       	eor	r21, r20
 568:	40 7f       	andi	r20, 0xF0	; 240
 56a:	54 27       	eor	r21, r20
 56c:	4e 0f       	add	r20, r30
 56e:	5f 1f       	adc	r21, r31
 570:	44 0f       	add	r20, r20
 572:	55 1f       	adc	r21, r21
 574:	46 0f       	add	r20, r22
 576:	57 1f       	adc	r21, r23
 578:	ea 01       	movw	r28, r20
 57a:	48 81       	ld	r20, Y
 57c:	59 81       	ldd	r21, Y+1	; 0x01
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	51 05       	cpc	r21, r1
 582:	19 f4       	brne	.+6      	; 0x58a <jumpCheckSiam+0x78>
				siam.jmpLeft = 0;
				siam.baseRo++;
 584:	2f 5f       	subi	r18, 0xFF	; 255
 586:	3f 4f       	sbci	r19, 0xFF	; 255
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
				siam.jmpLeft = 0;
 588:	d8 01       	movw	r26, r16
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	91 05       	cpc	r25, r1
 590:	21 f7       	brne	.-56     	; 0x55a <jumpCheckSiam+0x48>
 592:	30 93 67 00 	sts	0x0067, r19
 596:	20 93 66 00 	sts	0x0066, r18
 59a:	b0 93 6b 00 	sts	0x006B, r27
 59e:	a0 93 6a 00 	sts	0x006A, r26
 5a2:	1f c0       	rjmp	.+62     	; 0x5e2 <jumpCheckSiam+0xd0>
				siam.baseRo++;
			}				
		}		
	}
	else {
		if(pattern[siam.baseRo+1][siam.baseCol] == 0) siam.baseRo++;
 5a4:	80 91 66 00 	lds	r24, 0x0066
 5a8:	90 91 67 00 	lds	r25, 0x0067
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	fc 01       	movw	r30, r24
 5b0:	e2 95       	swap	r30
 5b2:	f2 95       	swap	r31
 5b4:	f0 7f       	andi	r31, 0xF0	; 240
 5b6:	fe 27       	eor	r31, r30
 5b8:	e0 7f       	andi	r30, 0xF0	; 240
 5ba:	fe 27       	eor	r31, r30
 5bc:	20 91 68 00 	lds	r18, 0x0068
 5c0:	30 91 69 00 	lds	r19, 0x0069
 5c4:	e2 0f       	add	r30, r18
 5c6:	f3 1f       	adc	r31, r19
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	e2 59       	subi	r30, 0x92	; 146
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	20 81       	ld	r18, Z
 5d2:	31 81       	ldd	r19, Z+1	; 0x01
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <jumpCheckSiam+0xd0>
 5da:	90 93 67 00 	sts	0x0067, r25
 5de:	80 93 66 00 	sts	0x0066, r24
	}	
	if(siam.baseRo > 15) siam.baseRo = 15; //	DELETE THIS
 5e2:	80 91 66 00 	lds	r24, 0x0066
 5e6:	90 91 67 00 	lds	r25, 0x0067
 5ea:	80 31       	cpi	r24, 0x10	; 16
 5ec:	91 05       	cpc	r25, r1
 5ee:	3c f0       	brlt	.+14     	; 0x5fe <jumpCheckSiam+0xec>
 5f0:	8f e0       	ldi	r24, 0x0F	; 15
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	90 93 67 00 	sts	0x0067, r25
 5f8:	80 93 66 00 	sts	0x0066, r24
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <jumpCheckSiam+0xfc>
	if(siam.baseRo - SIAM_HEIGHT + 1 < 0 ) siam.baseRo = SIAM_HEIGHT -1;
 5fe:	02 97       	sbiw	r24, 0x02	; 2
 600:	32 f4       	brpl	.+12     	; 0x60e <jumpCheckSiam+0xfc>
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	90 93 67 00 	sts	0x0067, r25
 60a:	80 93 66 00 	sts	0x0066, r24
	
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <UpdateSiam>:
void UpdateSiam() {
	
	if(siam.alive == 0) return;
 618:	80 91 6c 00 	lds	r24, 0x006C
 61c:	90 91 6d 00 	lds	r25, 0x006D
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	f1 f1       	breq	.+124    	; 0x6a0 <UpdateSiam+0x88>
	
	jumpCheckSiam();
 624:	0e 94 89 02 	call	0x512	; 0x512 <jumpCheckSiam>
	for(int i =0 ; i < SIAM_HEIGHT; i ++ ) {
		
		pattern[siam.baseRo-i][siam.baseCol] = 2;
 628:	60 91 66 00 	lds	r22, 0x0066
 62c:	70 91 67 00 	lds	r23, 0x0067
 630:	40 91 68 00 	lds	r20, 0x0068
 634:	50 91 69 00 	lds	r21, 0x0069
 638:	fb 01       	movw	r30, r22
 63a:	e2 95       	swap	r30
 63c:	f2 95       	swap	r31
 63e:	f0 7f       	andi	r31, 0xF0	; 240
 640:	fe 27       	eor	r31, r30
 642:	e0 7f       	andi	r30, 0xF0	; 240
 644:	fe 27       	eor	r31, r30
 646:	e4 0f       	add	r30, r20
 648:	f5 1f       	adc	r31, r21
 64a:	2e e6       	ldi	r18, 0x6E	; 110
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	ee 0f       	add	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	91 83       	std	Z+1, r25	; 0x01
 65c:	80 83       	st	Z, r24
 65e:	fb 01       	movw	r30, r22
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	e2 95       	swap	r30
 664:	f2 95       	swap	r31
 666:	f0 7f       	andi	r31, 0xF0	; 240
 668:	fe 27       	eor	r31, r30
 66a:	e0 7f       	andi	r30, 0xF0	; 240
 66c:	fe 27       	eor	r31, r30
 66e:	e4 0f       	add	r30, r20
 670:	f5 1f       	adc	r31, r21
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	e2 0f       	add	r30, r18
 678:	f3 1f       	adc	r31, r19
 67a:	91 83       	std	Z+1, r25	; 0x01
 67c:	80 83       	st	Z, r24
 67e:	62 50       	subi	r22, 0x02	; 2
 680:	70 40       	sbci	r23, 0x00	; 0
 682:	62 95       	swap	r22
 684:	72 95       	swap	r23
 686:	70 7f       	andi	r23, 0xF0	; 240
 688:	76 27       	eor	r23, r22
 68a:	60 7f       	andi	r22, 0xF0	; 240
 68c:	76 27       	eor	r23, r22
 68e:	46 0f       	add	r20, r22
 690:	57 1f       	adc	r21, r23
 692:	44 0f       	add	r20, r20
 694:	55 1f       	adc	r21, r21
 696:	24 0f       	add	r18, r20
 698:	35 1f       	adc	r19, r21
 69a:	f9 01       	movw	r30, r18
 69c:	91 83       	std	Z+1, r25	; 0x01
 69e:	80 83       	st	Z, r24
 6a0:	08 95       	ret

000006a2 <portInit>:

void portInit() {
	
		
	//PORTA = row(A0 to A3)
	DDRA = 0xFF;
 6a2:	8f ef       	ldi	r24, 0xFF	; 255
 6a4:	8a bb       	out	0x1a, r24	; 26
	
	//PORTD = column ; red -> D0 to D7 ; green -> D8 to D15
	DDRD = 0xFF;
 6a6:	81 bb       	out	0x11, r24	; 17
	
	//PORTC -> last 2 bit controls color C0 -> greeen C1 -> red
	DDRC = 0xFF;
 6a8:	84 bb       	out	0x14, r24	; 20
	
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11111100;	
 6aa:	8c ef       	ldi	r24, 0xFC	; 252
 6ac:	87 bb       	out	0x17, r24	; 23
}
 6ae:	08 95       	ret

000006b0 <jump_condition_found>:


int jump_condition_found() {
	
	if(siam.alive && pattern[siam.baseRo + 1][siam.baseCol] == 1 && bit_is_set(PINB, 1) && jump_delay == 1 ) return 1;
 6b0:	80 91 6c 00 	lds	r24, 0x006C
 6b4:	90 91 6d 00 	lds	r25, 0x006D
 6b8:	00 97       	sbiw	r24, 0x00	; 0
 6ba:	19 f1       	breq	.+70     	; 0x702 <jump_condition_found+0x52>
 6bc:	e0 91 66 00 	lds	r30, 0x0066
 6c0:	f0 91 67 00 	lds	r31, 0x0067
 6c4:	31 96       	adiw	r30, 0x01	; 1
 6c6:	e2 95       	swap	r30
 6c8:	f2 95       	swap	r31
 6ca:	f0 7f       	andi	r31, 0xF0	; 240
 6cc:	fe 27       	eor	r31, r30
 6ce:	e0 7f       	andi	r30, 0xF0	; 240
 6d0:	fe 27       	eor	r31, r30
 6d2:	80 91 68 00 	lds	r24, 0x0068
 6d6:	90 91 69 00 	lds	r25, 0x0069
 6da:	e8 0f       	add	r30, r24
 6dc:	f9 1f       	adc	r31, r25
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	e2 59       	subi	r30, 0x92	; 146
 6e4:	ff 4f       	sbci	r31, 0xFF	; 255
 6e6:	80 81       	ld	r24, Z
 6e8:	91 81       	ldd	r25, Z+1	; 0x01
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	91 05       	cpc	r25, r1
 6ee:	49 f4       	brne	.+18     	; 0x702 <jump_condition_found+0x52>
 6f0:	b1 9b       	sbis	0x16, 1	; 22
 6f2:	07 c0       	rjmp	.+14     	; 0x702 <jump_condition_found+0x52>
 6f4:	80 91 a6 06 	lds	r24, 0x06A6
 6f8:	90 91 a7 06 	lds	r25, 0x06A7
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	91 05       	cpc	r25, r1
 700:	a9 f0       	breq	.+42     	; 0x72c <jump_condition_found+0x7c>
	if(bit_is_set(PINB, 1) && jump_delay == 1 &&  siam.baseRo == 15) return 1; //DELETE THIS
 702:	b1 9b       	sbis	0x16, 1	; 22
 704:	16 c0       	rjmp	.+44     	; 0x732 <jump_condition_found+0x82>
 706:	80 91 a6 06 	lds	r24, 0x06A6
 70a:	90 91 a7 06 	lds	r25, 0x06A7
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	91 05       	cpc	r25, r1
 712:	91 f4       	brne	.+36     	; 0x738 <jump_condition_found+0x88>
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11111100;	
}


int jump_condition_found() {
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	80 91 66 00 	lds	r24, 0x0066
 71c:	90 91 67 00 	lds	r25, 0x0067
 720:	8f 30       	cpi	r24, 0x0F	; 15
 722:	91 05       	cpc	r25, r1
 724:	59 f0       	breq	.+22     	; 0x73c <jump_condition_found+0x8c>
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	08 c0       	rjmp	.+16     	; 0x73c <jump_condition_found+0x8c>
	
	if(siam.alive && pattern[siam.baseRo + 1][siam.baseCol] == 1 && bit_is_set(PINB, 1) && jump_delay == 1 ) return 1;
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	05 c0       	rjmp	.+10     	; 0x73c <jump_condition_found+0x8c>
	if(bit_is_set(PINB, 1) && jump_delay == 1 &&  siam.baseRo == 15) return 1; //DELETE THIS
	return 0;
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <jump_condition_found+0x8c>
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	30 e0       	ldi	r19, 0x00	; 0
}
 73c:	82 2f       	mov	r24, r18
 73e:	93 2f       	mov	r25, r19
 740:	08 95       	ret

00000742 <jumpUp>:

void jumpUp() {
	siam.jmpLeft = JUMP_HEIGHT;
 742:	85 e0       	ldi	r24, 0x05	; 5
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 6b 00 	sts	0x006B, r25
 74a:	80 93 6a 00 	sts	0x006A, r24
}
 74e:	08 95       	ret

00000750 <moveRight>:


void moveRight() { 
	nowCol++;
 750:	80 91 62 00 	lds	r24, 0x0062
 754:	90 91 63 00 	lds	r25, 0x0063
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	90 93 63 00 	sts	0x0063, r25
 75e:	80 93 62 00 	sts	0x0062, r24
}
 762:	08 95       	ret

00000764 <main>:


int main()
{
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
	
	portInit();	
 76c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <portInit>
	
	setGreenBars();
 770:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <setGreenBars>
	setSiam();
 774:	0e 94 41 01 	call	0x282	; 0x282 <setSiam>
	
	while(1) {
		game_delay++;
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 778:	ca e0       	ldi	r28, 0x0A	; 10
 77a:	d0 e0       	ldi	r29, 0x00	; 0
		jump_delay %= JUMP_DELAY_VAL;
 77c:	05 e0       	ldi	r16, 0x05	; 5
 77e:	10 e0       	ldi	r17, 0x00	; 0
	setGreenBars();
	setSiam();
	
	while(1) {
		game_delay++;
		jump_delay++;
 780:	20 91 a6 06 	lds	r18, 0x06A6
 784:	30 91 a7 06 	lds	r19, 0x06A7
 788:	2f 5f       	subi	r18, 0xFF	; 255
 78a:	3f 4f       	sbci	r19, 0xFF	; 255
	
	setGreenBars();
	setSiam();
	
	while(1) {
		game_delay++;
 78c:	80 91 64 00 	lds	r24, 0x0064
 790:	90 91 65 00 	lds	r25, 0x0065
 794:	01 96       	adiw	r24, 0x01	; 1
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 796:	be 01       	movw	r22, r28
 798:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
 79c:	90 93 65 00 	sts	0x0065, r25
 7a0:	80 93 64 00 	sts	0x0064, r24
		jump_delay %= JUMP_DELAY_VAL;
 7a4:	c9 01       	movw	r24, r18
 7a6:	b8 01       	movw	r22, r16
 7a8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
 7ac:	90 93 a7 06 	sts	0x06A7, r25
 7b0:	80 93 a6 06 	sts	0x06A6, r24
		
		UpdateGreenBars();
 7b4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <UpdateGreenBars>
		UpdateSiam();//ALWAYS UPDATE SIAM AFTER GREEN BARS
 7b8:	0e 94 0c 03 	call	0x618	; 0x618 <UpdateSiam>
		
		printScreen();
 7bc:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(right_move_condition_found()) {
 7c0:	0e 94 1a 02 	call	0x434	; 0x434 <right_move_condition_found>
 7c4:	00 97       	sbiw	r24, 0x00	; 0
 7c6:	11 f0       	breq	.+4      	; 0x7cc <main+0x68>
			moveRight();
 7c8:	0e 94 a8 03 	call	0x750	; 0x750 <moveRight>
		}
		printScreen();
 7cc:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		if(jump_condition_found()) {
 7d0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <jump_condition_found>
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	11 f0       	breq	.+4      	; 0x7dc <main+0x78>
			jumpUp();
 7d8:	0e 94 a1 03 	call	0x742	; 0x742 <jumpUp>
		}
		
		printScreen();
 7dc:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
	}
 7e0:	cf cf       	rjmp	.-98     	; 0x780 <main+0x1c>

000007e2 <__divmodhi4>:
 7e2:	97 fb       	bst	r25, 7
 7e4:	09 2e       	mov	r0, r25
 7e6:	07 26       	eor	r0, r23
 7e8:	0a d0       	rcall	.+20     	; 0x7fe <__divmodhi4_neg1>
 7ea:	77 fd       	sbrc	r23, 7
 7ec:	04 d0       	rcall	.+8      	; 0x7f6 <__divmodhi4_neg2>
 7ee:	0c d0       	rcall	.+24     	; 0x808 <__udivmodhi4>
 7f0:	06 d0       	rcall	.+12     	; 0x7fe <__divmodhi4_neg1>
 7f2:	00 20       	and	r0, r0
 7f4:	1a f4       	brpl	.+6      	; 0x7fc <__divmodhi4_exit>

000007f6 <__divmodhi4_neg2>:
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255

000007fc <__divmodhi4_exit>:
 7fc:	08 95       	ret

000007fe <__divmodhi4_neg1>:
 7fe:	f6 f7       	brtc	.-4      	; 0x7fc <__divmodhi4_exit>
 800:	90 95       	com	r25
 802:	81 95       	neg	r24
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	08 95       	ret

00000808 <__udivmodhi4>:
 808:	aa 1b       	sub	r26, r26
 80a:	bb 1b       	sub	r27, r27
 80c:	51 e1       	ldi	r21, 0x11	; 17
 80e:	07 c0       	rjmp	.+14     	; 0x81e <__udivmodhi4_ep>

00000810 <__udivmodhi4_loop>:
 810:	aa 1f       	adc	r26, r26
 812:	bb 1f       	adc	r27, r27
 814:	a6 17       	cp	r26, r22
 816:	b7 07       	cpc	r27, r23
 818:	10 f0       	brcs	.+4      	; 0x81e <__udivmodhi4_ep>
 81a:	a6 1b       	sub	r26, r22
 81c:	b7 0b       	sbc	r27, r23

0000081e <__udivmodhi4_ep>:
 81e:	88 1f       	adc	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	5a 95       	dec	r21
 824:	a9 f7       	brne	.-22     	; 0x810 <__udivmodhi4_loop>
 826:	80 95       	com	r24
 828:	90 95       	com	r25
 82a:	bc 01       	movw	r22, r24
 82c:	cd 01       	movw	r24, r26
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
