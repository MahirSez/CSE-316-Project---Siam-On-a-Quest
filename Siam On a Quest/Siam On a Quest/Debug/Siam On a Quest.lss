
Siam On a Quest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004c6  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000063e  00800062  00800062  0000055c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000156  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004a9  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000188  00000000  00000000  000012d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000056d  00000000  00000000  0000145f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000211  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002b2  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000039  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	16 e0       	ldi	r17, 0x06	; 6
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 24 02 	call	0x448	; 0x448 <main>
  8a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enableRed>:
int delay;
int currentGreenBar;

void enableRed() {
	
	PORTC &= 0b11111101;
  92:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= 0b00000001;	
  94:	a8 9a       	sbi	0x15, 0	; 21
}
  96:	08 95       	ret

00000098 <disableRed>:

void disableRed()
{
	PORTC |= 0x02;
  98:	a9 9a       	sbi	0x15, 1	; 21
	PORTC |= 0x01;	
  9a:	a8 9a       	sbi	0x15, 0	; 21
}
  9c:	08 95       	ret

0000009e <enableGreen>:
void enableGreen() {
	
	PORTC &= 0b11111110;
  9e:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= 0b00000010;
  a0:	a9 9a       	sbi	0x15, 1	; 21
}
  a2:	08 95       	ret

000000a4 <disableGreen>:
void disableGreen()
{
	PORTC |= 0x03;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bb       	out	0x15, r24	; 21
}
  aa:	08 95       	ret

000000ac <printScreen>:


void printScreen() {
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	
	for(int r = 0; r < 16; r++){
  bc:	ee 24       	eor	r14, r14
  be:	ff 24       	eor	r15, r15
		PORTA = r;
		for(int c = 0; c < 16; c++){
  c0:	cc 24       	eor	r12, r12
  c2:	dd 24       	eor	r13, r13


void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
  c4:	eb ba       	out	0x1b, r14	; 27
{
	PORTC |= 0x03;
}


void printScreen() {
  c6:	87 01       	movw	r16, r14
  c8:	00 0f       	add	r16, r16
  ca:	11 1f       	adc	r17, r17
  cc:	02 95       	swap	r16
  ce:	12 95       	swap	r17
  d0:	10 7f       	andi	r17, 0xF0	; 240
  d2:	10 27       	eor	r17, r16
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	10 27       	eor	r17, r16
  d8:	0c 59       	subi	r16, 0x9C	; 156
  da:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
  dc:	e6 01       	movw	r28, r12
			if(pattern[r][c] == 1) {
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <printScreen+0x52>
				disableRed();
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <disableRed>
				PORTD = (c<<4);
  f0:	9e 01       	movw	r18, r28
  f2:	22 95       	swap	r18
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	22 bb       	out	0x12, r18	; 18
				enableGreen();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <enableGreen>
  fc:	08 c0       	rjmp	.+16     	; 0x10e <printScreen+0x62>
				
			}
			
			else if( pattern[r][c] == 2 ){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	29 f4       	brne	.+10     	; 0x10e <printScreen+0x62>
				disableGreen();
 104:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
				PORTD = (c);
 108:	c2 bb       	out	0x12, r28	; 18
				enableRed();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <enableRed>

void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
 10e:	21 96       	adiw	r28, 0x01	; 1
 110:	c0 31       	cpi	r28, 0x10	; 16
 112:	d1 05       	cpc	r29, r1
 114:	21 f7       	brne	.-56     	; 0xde <printScreen+0x32>
				PORTD = (c);
				enableRed();
			}
			
		}
		disableGreen();
 116:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
}


void printScreen() {
	
	for(int r = 0; r < 16; r++){
 11a:	08 94       	sec
 11c:	e1 1c       	adc	r14, r1
 11e:	f1 1c       	adc	r15, r1
 120:	90 e1       	ldi	r25, 0x10	; 16
 122:	e9 16       	cp	r14, r25
 124:	f1 04       	cpc	r15, r1
 126:	71 f6       	brne	.-100    	; 0xc4 <printScreen+0x18>
			}
			
		}
		disableGreen();
	}
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	ff 90       	pop	r15
 132:	ef 90       	pop	r14
 134:	df 90       	pop	r13
 136:	cf 90       	pop	r12
 138:	08 95       	ret

0000013a <printErrorBar>:

void printErrorBar() {
	
	for(int i = 4 ; i < 10 ; i++ ) {
		pattern[3][i] = 2;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 cd 00 	sts	0x00CD, r25
 142:	80 93 cc 00 	sts	0x00CC, r24
 146:	90 93 cf 00 	sts	0x00CF, r25
 14a:	80 93 ce 00 	sts	0x00CE, r24
 14e:	90 93 d1 00 	sts	0x00D1, r25
 152:	80 93 d0 00 	sts	0x00D0, r24
 156:	90 93 d3 00 	sts	0x00D3, r25
 15a:	80 93 d2 00 	sts	0x00D2, r24
 15e:	90 93 d5 00 	sts	0x00D5, r25
 162:	80 93 d4 00 	sts	0x00D4, r24
 166:	90 93 d7 00 	sts	0x00D7, r25
 16a:	80 93 d6 00 	sts	0x00D6, r24
	}
}
 16e:	08 95       	ret

00000170 <printGreen>:

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
 178:	2b bb       	out	0x1b, r18	; 27
		for(int j =0 ; j < 16 ; j++ ) {	
 17a:	ca 01       	movw	r24, r20
			PORTD = ( j <<4);
 17c:	68 2f       	mov	r22, r24
 17e:	62 95       	swap	r22
 180:	60 7f       	andi	r22, 0xF0	; 240
 182:	62 bb       	out	0x12, r22	; 18
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	80 31       	cpi	r24, 0x10	; 16
 188:	91 05       	cpc	r25, r1
 18a:	c1 f7       	brne	.-16     	; 0x17c <printGreen+0xc>
		pattern[3][i] = 2;
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	20 31       	cpi	r18, 0x10	; 16
 192:	31 05       	cpc	r19, r1
 194:	89 f7       	brne	.-30     	; 0x178 <printGreen+0x8>
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
			PORTD = ( j <<4);
		}
	}
}
 196:	08 95       	ret

00000198 <printRed>:

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	50 e0       	ldi	r21, 0x00	; 0

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
 1a0:	1b ba       	out	0x1b, r1	; 27
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a2:	ca 01       	movw	r24, r20
			
			PORTD = ( j );
 1a4:	82 bb       	out	0x12, r24	; 18
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	80 31       	cpi	r24, 0x10	; 16
 1aa:	91 05       	cpc	r25, r1
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <printRed+0xc>
		}
	}
}

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 1b2:	20 31       	cpi	r18, 0x10	; 16
 1b4:	31 05       	cpc	r19, r1
 1b6:	a1 f7       	brne	.-24     	; 0x1a0 <printRed+0x8>
		for(int j =0 ; j < 16 ; j++ ) {
			
			PORTD = ( j );
		}
	}
}
 1b8:	08 95       	ret

000001ba <setGreenBars>:
struct greenBars {
	int len , ro , col;
} bars[180];


void setGreenBars() {
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 1ce:	ee e5       	ldi	r30, 0x5E	; 94
 1d0:	f2 e0       	ldi	r31, 0x02	; 2
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
		if(i %3 == 0 ) bars[i].ro = 14;
 1d6:	c3 e0       	ldi	r28, 0x03	; 3
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
		else if(i %3 == 1 ) bars[i].ro = 9;
		else if(i %3 == 2 ) bars[i].ro = 6;
 1da:	0f 2e       	mov	r0, r31
 1dc:	f6 e0       	ldi	r31, 0x06	; 6
 1de:	af 2e       	mov	r10, r31
 1e0:	bb 24       	eor	r11, r11
 1e2:	f0 2d       	mov	r31, r0

void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
		else if(i %3 == 1 ) bars[i].ro = 9;
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f9 e0       	ldi	r31, 0x09	; 9
 1e8:	cf 2e       	mov	r12, r31
 1ea:	dd 24       	eor	r13, r13
 1ec:	f0 2d       	mov	r31, r0


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 1ee:	0f 2e       	mov	r0, r31
 1f0:	fe e0       	ldi	r31, 0x0E	; 14
 1f2:	ef 2e       	mov	r14, r31
 1f4:	ff 24       	eor	r15, r15
 1f6:	f0 2d       	mov	r31, r0
		
		if( i > 0  ) bars[i].col = bars[i-1].col + bars[i-1].len ;
		
		if(i %3 == 0 ) bars[i].len = 5;
		else if(i %3 == 1 ) bars[i].len = 3;
		else if(i %3 == 2 ) bars[i].len = 5;
 1f8:	05 e0       	ldi	r16, 0x05	; 5
 1fa:	10 e0       	ldi	r17, 0x00	; 0


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 1fc:	c9 01       	movw	r24, r18
 1fe:	be 01       	movw	r22, r28
 200:	0e 94 3a 02 	call	0x474	; 0x474 <__divmodhi4>
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	19 f4       	brne	.+6      	; 0x20e <setGreenBars+0x54>
 208:	f1 86       	std	Z+9, r15	; 0x09
 20a:	e0 86       	std	Z+8, r14	; 0x08
 20c:	0b c0       	rjmp	.+22     	; 0x224 <setGreenBars+0x6a>
		else if(i %3 == 1 ) bars[i].ro = 9;
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	91 05       	cpc	r25, r1
 212:	19 f4       	brne	.+6      	; 0x21a <setGreenBars+0x60>
 214:	d1 86       	std	Z+9, r13	; 0x09
 216:	c0 86       	std	Z+8, r12	; 0x08
 218:	05 c0       	rjmp	.+10     	; 0x224 <setGreenBars+0x6a>
		else if(i %3 == 2 ) bars[i].ro = 6;
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <setGreenBars+0x6a>
 220:	b1 86       	std	Z+9, r11	; 0x09
 222:	a0 86       	std	Z+8, r10	; 0x08
		
		if( i > 0  ) bars[i].col = bars[i-1].col + bars[i-1].len ;
 224:	12 16       	cp	r1, r18
 226:	13 06       	cpc	r1, r19
 228:	44 f4       	brge	.+16     	; 0x23a <setGreenBars+0x80>
 22a:	60 81       	ld	r22, Z
 22c:	71 81       	ldd	r23, Z+1	; 0x01
 22e:	44 81       	ldd	r20, Z+4	; 0x04
 230:	55 81       	ldd	r21, Z+5	; 0x05
 232:	46 0f       	add	r20, r22
 234:	57 1f       	adc	r21, r23
 236:	53 87       	std	Z+11, r21	; 0x0b
 238:	42 87       	std	Z+10, r20	; 0x0a
		
		if(i %3 == 0 ) bars[i].len = 5;
 23a:	00 97       	sbiw	r24, 0x00	; 0
 23c:	19 f4       	brne	.+6      	; 0x244 <setGreenBars+0x8a>
 23e:	17 83       	std	Z+7, r17	; 0x07
 240:	06 83       	std	Z+6, r16	; 0x06
 242:	0b c0       	rjmp	.+22     	; 0x25a <setGreenBars+0xa0>
		else if(i %3 == 1 ) bars[i].len = 3;
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 05       	cpc	r25, r1
 248:	19 f4       	brne	.+6      	; 0x250 <setGreenBars+0x96>
 24a:	d7 83       	std	Z+7, r29	; 0x07
 24c:	c6 83       	std	Z+6, r28	; 0x06
 24e:	05 c0       	rjmp	.+10     	; 0x25a <setGreenBars+0xa0>
		else if(i %3 == 2 ) bars[i].len = 5;
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <setGreenBars+0xa0>
 256:	17 83       	std	Z+7, r17	; 0x07
 258:	06 83       	std	Z+6, r16	; 0x06
} bars[180];


void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 25a:	2f 5f       	subi	r18, 0xFF	; 255
 25c:	3f 4f       	sbci	r19, 0xFF	; 255
 25e:	36 96       	adiw	r30, 0x06	; 6
 260:	24 3b       	cpi	r18, 0xB4	; 180
 262:	31 05       	cpc	r19, r1
 264:	59 f6       	brne	.-106    	; 0x1fc <setGreenBars+0x42>
		if(i %3 == 0 ) bars[i].len = 5;
		else if(i %3 == 1 ) bars[i].len = 3;
		else if(i %3 == 2 ) bars[i].len = 5;
		
	}
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	af 90       	pop	r10
 27a:	08 95       	ret

0000027c <insideFrame>:


int insideFrame(int barID) {
	
	int frm = bars[barID].col;
 27c:	9c 01       	movw	r18, r24
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	28 0f       	add	r18, r24
 284:	39 1f       	adc	r19, r25
 286:	f9 01       	movw	r30, r18
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ec 59       	subi	r30, 0x9C	; 156
 28e:	fd 4f       	sbci	r31, 0xFD	; 253
 290:	84 81       	ldd	r24, Z+4	; 0x04
 292:	95 81       	ldd	r25, Z+5	; 0x05
	int to = frm + bars[barID].len;
 294:	60 81       	ld	r22, Z
 296:	71 81       	ldd	r23, Z+1	; 0x01
 298:	68 0f       	add	r22, r24
 29a:	79 1f       	adc	r23, r25

	int leftFrame = nowCol;
 29c:	20 91 62 00 	lds	r18, 0x0062
 2a0:	30 91 63 00 	lds	r19, 0x0063
	int rightFrame = nowCol + 15;
 2a4:	a9 01       	movw	r20, r18
 2a6:	41 5f       	subi	r20, 0xF1	; 241
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255

	if(frm >= leftFrame && to <= rightFrame) return 1;
 2aa:	82 17       	cp	r24, r18
 2ac:	93 07       	cpc	r25, r19
 2ae:	34 f0       	brlt	.+12     	; 0x2bc <insideFrame+0x40>
 2b0:	46 17       	cp	r20, r22
 2b2:	57 07       	cpc	r21, r23
 2b4:	8c f4       	brge	.+34     	; 0x2d8 <insideFrame+0x5c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 2b6:	28 17       	cp	r18, r24
 2b8:	39 07       	cpc	r19, r25
 2ba:	1c f0       	brlt	.+6      	; 0x2c2 <insideFrame+0x46>
 2bc:	62 17       	cp	r22, r18
 2be:	73 07       	cpc	r23, r19
 2c0:	74 f4       	brge	.+28     	; 0x2de <insideFrame+0x62>
	if(frm <= rightFrame && to >= rightFrame) return 1;
 2c2:	48 17       	cp	r20, r24
 2c4:	59 07       	cpc	r21, r25
 2c6:	74 f0       	brlt	.+28     	; 0x2e4 <insideFrame+0x68>
		
	}
}


int insideFrame(int barID) {
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	64 17       	cp	r22, r20
 2ce:	75 07       	cpc	r23, r21
 2d0:	5c f4       	brge	.+22     	; 0x2e8 <insideFrame+0x6c>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <insideFrame+0x6c>
	int to = frm + bars[barID].len;

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(frm >= leftFrame && to <= rightFrame) return 1;
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <insideFrame+0x6c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <insideFrame+0x6c>
	if(frm <= rightFrame && to >= rightFrame) return 1;

	return 0;
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
}
 2e8:	82 2f       	mov	r24, r18
 2ea:	93 2f       	mov	r25, r19
 2ec:	08 95       	ret

000002ee <setOnPatternArray>:


void setOnPatternArray(int barID) {
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
	
	int barRo = bars[barID].ro;
 2f2:	fc 01       	movw	r30, r24
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	e8 0f       	add	r30, r24
 2fa:	f9 1f       	adc	r31, r25
 2fc:	ee 0f       	add	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	ec 59       	subi	r30, 0x9C	; 156
 302:	fd 4f       	sbci	r31, 0xFD	; 253
 304:	a2 81       	ldd	r26, Z+2	; 0x02
 306:	b3 81       	ldd	r27, Z+3	; 0x03
	int barBeginCol = bars[barID].col;
 308:	24 81       	ldd	r18, Z+4	; 0x04
 30a:	35 81       	ldd	r19, Z+5	; 0x05
	int barEndCol = barBeginCol + bars[barID].len - 1;
	
	int printFrm = nowCol;
 30c:	40 91 62 00 	lds	r20, 0x0062
 310:	50 91 63 00 	lds	r21, 0x0063
 314:	ba 01       	movw	r22, r20
 316:	42 17       	cp	r20, r18
 318:	53 07       	cpc	r21, r19
 31a:	0c f4       	brge	.+2      	; 0x31e <setOnPatternArray+0x30>
 31c:	b9 01       	movw	r22, r18
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 31e:	fa 01       	movw	r30, r20
 320:	3f 96       	adiw	r30, 0x0f	; 15

void setOnPatternArray(int barID) {
	
	int barRo = bars[barID].ro;
	int barBeginCol = bars[barID].col;
	int barEndCol = barBeginCol + bars[barID].len - 1;
 322:	ec 01       	movw	r28, r24
 324:	cc 0f       	add	r28, r28
 326:	dd 1f       	adc	r29, r29
 328:	8c 0f       	add	r24, r28
 32a:	9d 1f       	adc	r25, r29
 32c:	ec 01       	movw	r28, r24
 32e:	cc 0f       	add	r28, r28
 330:	dd 1f       	adc	r29, r29
 332:	cc 59       	subi	r28, 0x9C	; 156
 334:	dd 4f       	sbci	r29, 0xFD	; 253
 336:	88 81       	ld	r24, Y
 338:	99 81       	ldd	r25, Y+1	; 0x01
 33a:	28 0f       	add	r18, r24
 33c:	39 1f       	adc	r19, r25
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	30 40       	sbci	r19, 0x00	; 0
	
	int printFrm = nowCol;
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 342:	e2 17       	cp	r30, r18
 344:	f3 07       	cpc	r31, r19
 346:	0c f4       	brge	.+2      	; 0x34a <setOnPatternArray+0x5c>
 348:	9f 01       	movw	r18, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 34a:	26 17       	cp	r18, r22
 34c:	37 07       	cpc	r19, r23
 34e:	cc f0       	brlt	.+50     	; 0x382 <setOnPatternArray+0x94>

	return 0;
}


void setOnPatternArray(int barID) {
 350:	fd 01       	movw	r30, r26
 352:	e2 95       	swap	r30
 354:	f2 95       	swap	r31
 356:	f0 7f       	andi	r31, 0xF0	; 240
 358:	fe 27       	eor	r31, r30
 35a:	e0 7f       	andi	r30, 0xF0	; 240
 35c:	fe 27       	eor	r31, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
 35e:	cb 01       	movw	r24, r22
 360:	84 1b       	sub	r24, r20
 362:	95 0b       	sbc	r25, r21

	return 0;
}


void setOnPatternArray(int barID) {
 364:	e8 0f       	add	r30, r24
 366:	f9 1f       	adc	r31, r25
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ec 59       	subi	r30, 0x9C	; 156
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 370:	cb 01       	movw	r24, r22
		pattern[barRo][i - nowCol] = 1;
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	41 93       	st	Z+, r20
 378:	51 93       	st	Z+, r21
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	28 17       	cp	r18, r24
 37e:	39 07       	cpc	r19, r25
 380:	d4 f7       	brge	.-12     	; 0x376 <setOnPatternArray+0x88>
		pattern[barRo][i - nowCol] = 1;
	}
	
	
	
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <UpdateGreenBars>:

void UpdateGreenBars() {
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
	
	memset(pattern , 0 , sizeof pattern);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	e4 e6       	ldi	r30, 0x64	; 100
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	df 01       	movw	r26, r30
 39a:	9c 01       	movw	r18, r24
 39c:	1d 92       	st	X+, r1
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	30 40       	sbci	r19, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <UpdateGreenBars+0x14>
	int tmp = currentGreenBar;
 3a4:	c0 91 9e 06 	lds	r28, 0x069E
 3a8:	d0 91 9f 06 	lds	r29, 0x069F
	currentGreenBar  = INF;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f e7       	ldi	r25, 0x7F	; 127
 3b0:	90 93 9f 06 	sts	0x069F, r25
 3b4:	80 93 9e 06 	sts	0x069E, r24
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 3b8:	ce 01       	movw	r24, r28
 3ba:	05 96       	adiw	r24, 0x05	; 5
 3bc:	c8 17       	cp	r28, r24
 3be:	d9 07       	cpc	r29, r25
 3c0:	c4 f4       	brge	.+48     	; 0x3f2 <UpdateGreenBars+0x6a>
	
	
	
}

void UpdateGreenBars() {
 3c2:	8c 01       	movw	r16, r24
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
	
		if(insideFrame(i) )	 {
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 3e 01 	call	0x27c	; 0x27c <insideFrame>
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	71 f0       	breq	.+28     	; 0x3ea <UpdateGreenBars+0x62>
			
			if(i < currentGreenBar)  currentGreenBar = i;
 3ce:	80 91 9e 06 	lds	r24, 0x069E
 3d2:	90 91 9f 06 	lds	r25, 0x069F
 3d6:	c8 17       	cp	r28, r24
 3d8:	d9 07       	cpc	r29, r25
 3da:	24 f4       	brge	.+8      	; 0x3e4 <UpdateGreenBars+0x5c>
 3dc:	d0 93 9f 06 	sts	0x069F, r29
 3e0:	c0 93 9e 06 	sts	0x069E, r28
			setOnPatternArray(i);
 3e4:	ce 01       	movw	r24, r28
 3e6:	0e 94 77 01 	call	0x2ee	; 0x2ee <setOnPatternArray>
void UpdateGreenBars() {
	
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 3ea:	21 96       	adiw	r28, 0x01	; 1
 3ec:	c0 17       	cp	r28, r16
 3ee:	d1 07       	cpc	r29, r17
 3f0:	49 f7       	brne	.-46     	; 0x3c4 <UpdateGreenBars+0x3c>
			if(i < currentGreenBar)  currentGreenBar = i;
			setOnPatternArray(i);
		}
	}
	
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <portInit>:

void portInit() {
	
		
	//PORTA = row(A0 to A3)
	DDRA = 0xFF;
 3fc:	8f ef       	ldi	r24, 0xFF	; 255
 3fe:	8a bb       	out	0x1a, r24	; 26
	
	//PORTD = column ; red -> D0 to D7 ; green -> D8 to D15
	DDRD = 0xFF;
 400:	81 bb       	out	0x11, r24	; 17
	
	//PORTC -> last 2 bit controls color C0 -> greeen C1 -> red
	DDRC = 0xFF;
 402:	84 bb       	out	0x14, r24	; 20
	
	
	
	
	DDRB = 0b11111110;	
 404:	8e ef       	ldi	r24, 0xFE	; 254
 406:	87 bb       	out	0x17, r24	; 23
}
 408:	08 95       	ret

0000040a <move_condition_found>:

int move_condition_found() {
	delay++;
 40a:	80 91 9c 06 	lds	r24, 0x069C
 40e:	90 91 9d 06 	lds	r25, 0x069D
 412:	01 96       	adiw	r24, 0x01	; 1
	delay %= 5;	
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	0e 94 3a 02 	call	0x474	; 0x474 <__divmodhi4>
 41c:	28 2f       	mov	r18, r24
 41e:	39 2f       	mov	r19, r25
 420:	80 93 9c 06 	sts	0x069C, r24
 424:	90 93 9d 06 	sts	0x069D, r25
	return  (bit_is_set(PINB, 0) && delay == 1 );
 428:	b0 9b       	sbis	0x16, 0	; 22
 42a:	09 c0       	rjmp	.+18     	; 0x43e <move_condition_found+0x34>
	
	
	DDRB = 0b11111110;	
}

int move_condition_found() {
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	21 30       	cpi	r18, 0x01	; 1
 432:	31 05       	cpc	r19, r1
 434:	11 f0       	breq	.+4      	; 0x43a <move_condition_found+0x30>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
	delay++;
	delay %= 5;	
	return  (bit_is_set(PINB, 0) && delay == 1 );
 43a:	9c 01       	movw	r18, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <move_condition_found+0x38>
 43e:	20 e0       	ldi	r18, 0x00	; 0
 440:	30 e0       	ldi	r19, 0x00	; 0
}
 442:	82 2f       	mov	r24, r18
 444:	93 2f       	mov	r25, r19
 446:	08 95       	ret

00000448 <main>:

int main()
{
	
	portInit();	
 448:	0e 94 fe 01 	call	0x3fc	; 0x3fc <portInit>
	
	setGreenBars();
 44c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <setGreenBars>
	
	
			
	while(1) {
		
		UpdateGreenBars();
 450:	0e 94 c4 01 	call	0x388	; 0x388 <UpdateGreenBars>
		printScreen();
 454:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(move_condition_found()) {
 458:	0e 94 05 02 	call	0x40a	; 0x40a <move_condition_found>
 45c:	00 97       	sbiw	r24, 0x00	; 0
 45e:	c1 f3       	breq	.-16     	; 0x450 <main+0x8>
			nowCol++;
 460:	80 91 62 00 	lds	r24, 0x0062
 464:	90 91 63 00 	lds	r25, 0x0063
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	90 93 63 00 	sts	0x0063, r25
 46e:	80 93 62 00 	sts	0x0062, r24
 472:	ee cf       	rjmp	.-36     	; 0x450 <main+0x8>

00000474 <__divmodhi4>:
 474:	97 fb       	bst	r25, 7
 476:	09 2e       	mov	r0, r25
 478:	07 26       	eor	r0, r23
 47a:	0a d0       	rcall	.+20     	; 0x490 <__divmodhi4_neg1>
 47c:	77 fd       	sbrc	r23, 7
 47e:	04 d0       	rcall	.+8      	; 0x488 <__divmodhi4_neg2>
 480:	0c d0       	rcall	.+24     	; 0x49a <__udivmodhi4>
 482:	06 d0       	rcall	.+12     	; 0x490 <__divmodhi4_neg1>
 484:	00 20       	and	r0, r0
 486:	1a f4       	brpl	.+6      	; 0x48e <__divmodhi4_exit>

00000488 <__divmodhi4_neg2>:
 488:	70 95       	com	r23
 48a:	61 95       	neg	r22
 48c:	7f 4f       	sbci	r23, 0xFF	; 255

0000048e <__divmodhi4_exit>:
 48e:	08 95       	ret

00000490 <__divmodhi4_neg1>:
 490:	f6 f7       	brtc	.-4      	; 0x48e <__divmodhi4_exit>
 492:	90 95       	com	r25
 494:	81 95       	neg	r24
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	08 95       	ret

0000049a <__udivmodhi4>:
 49a:	aa 1b       	sub	r26, r26
 49c:	bb 1b       	sub	r27, r27
 49e:	51 e1       	ldi	r21, 0x11	; 17
 4a0:	07 c0       	rjmp	.+14     	; 0x4b0 <__udivmodhi4_ep>

000004a2 <__udivmodhi4_loop>:
 4a2:	aa 1f       	adc	r26, r26
 4a4:	bb 1f       	adc	r27, r27
 4a6:	a6 17       	cp	r26, r22
 4a8:	b7 07       	cpc	r27, r23
 4aa:	10 f0       	brcs	.+4      	; 0x4b0 <__udivmodhi4_ep>
 4ac:	a6 1b       	sub	r26, r22
 4ae:	b7 0b       	sbc	r27, r23

000004b0 <__udivmodhi4_ep>:
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	5a 95       	dec	r21
 4b6:	a9 f7       	brne	.-22     	; 0x4a2 <__udivmodhi4_loop>
 4b8:	80 95       	com	r24
 4ba:	90 95       	com	r25
 4bc:	bc 01       	movw	r22, r24
 4be:	cd 01       	movw	r24, r26
 4c0:	08 95       	ret

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
