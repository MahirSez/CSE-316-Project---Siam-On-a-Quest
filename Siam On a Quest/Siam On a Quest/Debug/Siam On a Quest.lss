
Siam On a Quest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cca  00000d5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a6  00800064  00800064  00000d62  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002e6  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a4a  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002bc  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bcd  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000309c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ed  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000609  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000005c  00000000  00000000  00003cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  00003d0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	18 e0       	ldi	r17, 0x08	; 8
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <main>
  8a:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enableRed>:
int game_delay , jump_delay;
int currentGreenBar;

void enableRed() {
	
	PORTC &= 0b11111101;
  92:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= 0b00000001;	
  94:	a8 9a       	sbi	0x15, 0	; 21
}
  96:	08 95       	ret

00000098 <disableRed>:

void disableRed()
{
	PORTC |= 0x02;
  98:	a9 9a       	sbi	0x15, 1	; 21
	PORTC |= 0x01;	
  9a:	a8 9a       	sbi	0x15, 0	; 21
}
  9c:	08 95       	ret

0000009e <enableGreen>:
void enableGreen() {
	
	PORTC &= 0b11111110;
  9e:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= 0b00000010;
  a0:	a9 9a       	sbi	0x15, 1	; 21
}
  a2:	08 95       	ret

000000a4 <disableGreen>:
void disableGreen()
{
	PORTC |= 0x03;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bb       	out	0x15, r24	; 21
}
  aa:	08 95       	ret

000000ac <printScreen>:


void printScreen() {
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	
	for(int r = 0; r < 16; r++){
  bc:	ee 24       	eor	r14, r14
  be:	ff 24       	eor	r15, r15
		PORTA = r;
		for(int c = 0; c < 16; c++){
  c0:	cc 24       	eor	r12, r12
  c2:	dd 24       	eor	r13, r13


void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
  c4:	eb ba       	out	0x1b, r14	; 27
{
	PORTC |= 0x03;
}


void printScreen() {
  c6:	87 01       	movw	r16, r14
  c8:	00 0f       	add	r16, r16
  ca:	11 1f       	adc	r17, r17
  cc:	02 95       	swap	r16
  ce:	12 95       	swap	r17
  d0:	10 7f       	andi	r17, 0xF0	; 240
  d2:	10 27       	eor	r17, r16
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	10 27       	eor	r17, r16
  d8:	02 57       	subi	r16, 0x72	; 114
  da:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
  dc:	e6 01       	movw	r28, r12
			if(pattern[r][c] == 1) {
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <printScreen+0x52>
				disableRed();
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <disableRed>
				PORTD = (c<<4);
  f0:	9e 01       	movw	r18, r28
  f2:	22 95       	swap	r18
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	22 bb       	out	0x12, r18	; 18
				enableGreen();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <enableGreen>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <printScreen+0x68>
				
			}
			else if( pattern[r][c] >= 2 ){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	34 f0       	brlt	.+12     	; 0x110 <printScreen+0x64>
				disableGreen();
 104:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
				PORTD = (c);
 108:	c2 bb       	out	0x12, r28	; 18
				enableRed();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <enableRed>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <printScreen+0x68>
			}
			else disableGreen();
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>

void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c0 31       	cpi	r28, 0x10	; 16
 118:	d1 05       	cpc	r29, r1
 11a:	09 f7       	brne	.-62     	; 0xde <printScreen+0x32>
				enableRed();
			}
			else disableGreen();
			
		}
		disableGreen();
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
}


void printScreen() {
	
	for(int r = 0; r < 16; r++){
 120:	08 94       	sec
 122:	e1 1c       	adc	r14, r1
 124:	f1 1c       	adc	r15, r1
 126:	90 e1       	ldi	r25, 0x10	; 16
 128:	e9 16       	cp	r14, r25
 12a:	f1 04       	cpc	r15, r1
 12c:	59 f6       	brne	.-106    	; 0xc4 <printScreen+0x18>
			else disableGreen();
			
		}
		disableGreen();
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret

00000140 <printErrorBar>:

void printErrorBar() {
	
	for(int i = 4 ; i < 10 ; i++ ) {
		pattern[3][i] = 2;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 f7 00 	sts	0x00F7, r25
 148:	80 93 f6 00 	sts	0x00F6, r24
 14c:	90 93 f9 00 	sts	0x00F9, r25
 150:	80 93 f8 00 	sts	0x00F8, r24
 154:	90 93 fb 00 	sts	0x00FB, r25
 158:	80 93 fa 00 	sts	0x00FA, r24
 15c:	90 93 fd 00 	sts	0x00FD, r25
 160:	80 93 fc 00 	sts	0x00FC, r24
 164:	90 93 ff 00 	sts	0x00FF, r25
 168:	80 93 fe 00 	sts	0x00FE, r24
 16c:	90 93 01 01 	sts	0x0101, r25
 170:	80 93 00 01 	sts	0x0100, r24
	}
}
 174:	08 95       	ret

00000176 <printGreen>:

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
 17e:	2b bb       	out	0x1b, r18	; 27
		for(int j =0 ; j < 16 ; j++ ) {	
 180:	ca 01       	movw	r24, r20
			PORTD = ( j <<4);
 182:	68 2f       	mov	r22, r24
 184:	62 95       	swap	r22
 186:	60 7f       	andi	r22, 0xF0	; 240
 188:	62 bb       	out	0x12, r22	; 18
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	91 05       	cpc	r25, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <printGreen+0xc>
		pattern[3][i] = 2;
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	20 31       	cpi	r18, 0x10	; 16
 198:	31 05       	cpc	r19, r1
 19a:	89 f7       	brne	.-30     	; 0x17e <printGreen+0x8>
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
			PORTD = ( j <<4);
		}
	}
}
 19c:	08 95       	ret

0000019e <printRed>:

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
 1a6:	1b ba       	out	0x1b, r1	; 27
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a8:	ca 01       	movw	r24, r20
			
			PORTD = ( j );
 1aa:	82 bb       	out	0x12, r24	; 18
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	80 31       	cpi	r24, 0x10	; 16
 1b0:	91 05       	cpc	r25, r1
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <printRed+0xc>
		}
	}
}

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	20 31       	cpi	r18, 0x10	; 16
 1ba:	31 05       	cpc	r19, r1
 1bc:	a1 f7       	brne	.-24     	; 0x1a6 <printRed+0x8>
		for(int j =0 ; j < 16 ; j++ ) {
			
			PORTD = ( j );
		}
	}
}
 1be:	08 95       	ret

000001c0 <buzzerSound>:

void buzzerSound() {
	
	
	PORTB |= 0x04;
 1c0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	87 ea       	ldi	r24, 0xA7	; 167
 1c4:	91 e6       	ldi	r25, 0x61	; 97
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <buzzerSound+0x6>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <buzzerSound+0xc>
 1cc:	00 00       	nop
	_delay_ms(100);
	PORTB  = 0;
 1ce:	18 ba       	out	0x18, r1	; 24
}
 1d0:	08 95       	ret

000001d2 <setGreenBars>:

struct Bullet {
	
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
 1d2:	af 92       	push	r10
 1d4:	bf 92       	push	r11
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 1e6:	e8 e8       	ldi	r30, 0x88	; 136
 1e8:	f2 e0       	ldi	r31, 0x02	; 2
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
		if(i %3 == 0 ) bars[i].ro = 14;
 1ee:	c3 e0       	ldi	r28, 0x03	; 3
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
		else if(i %3 == 1 ) bars[i].ro = 10;
		else if(i %3 == 2 ) bars[i].ro = 6;
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f6 e0       	ldi	r31, 0x06	; 6
 1f6:	af 2e       	mov	r10, r31
 1f8:	bb 24       	eor	r11, r11
 1fa:	f0 2d       	mov	r31, r0
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
		else if(i %3 == 1 ) bars[i].ro = 10;
 1fc:	0f 2e       	mov	r0, r31
 1fe:	fa e0       	ldi	r31, 0x0A	; 10
 200:	cf 2e       	mov	r12, r31
 202:	dd 24       	eor	r13, r13
 204:	f0 2d       	mov	r31, r0
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 206:	0e e0       	ldi	r16, 0x0E	; 14
 208:	10 e0       	ldi	r17, 0x00	; 0
		
		if( i > 0  && i %3 == 1) bars[i].col = bars[i-1].col + bars[i-1].len  ;
		else if( i > 0 && i%3 == 2) bars[i].col = bars[i-1].col + bars[i-1].len  ;
		else if(i > 0 ) bars[i].col = bars[i-1].col + bars[i-1].len  ;
		
		if(i %3 == 0 ) bars[i].len = 15;
 20a:	0f 2e       	mov	r0, r31
 20c:	ff e0       	ldi	r31, 0x0F	; 15
 20e:	ef 2e       	mov	r14, r31
 210:	ff 24       	eor	r15, r15
 212:	f0 2d       	mov	r31, r0
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 214:	c9 01       	movw	r24, r18
 216:	be 01       	movw	r22, r28
 218:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divmodhi4>
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	19 f4       	brne	.+6      	; 0x226 <setGreenBars+0x54>
 220:	11 87       	std	Z+9, r17	; 0x09
 222:	00 87       	std	Z+8, r16	; 0x08
 224:	0b c0       	rjmp	.+22     	; 0x23c <setGreenBars+0x6a>
		else if(i %3 == 1 ) bars[i].ro = 10;
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	91 05       	cpc	r25, r1
 22a:	19 f4       	brne	.+6      	; 0x232 <setGreenBars+0x60>
 22c:	d1 86       	std	Z+9, r13	; 0x09
 22e:	c0 86       	std	Z+8, r12	; 0x08
 230:	05 c0       	rjmp	.+10     	; 0x23c <setGreenBars+0x6a>
		else if(i %3 == 2 ) bars[i].ro = 6;
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <setGreenBars+0x6a>
 238:	b1 86       	std	Z+9, r11	; 0x09
 23a:	a0 86       	std	Z+8, r10	; 0x08
		
		if( i > 0  && i %3 == 1) bars[i].col = bars[i-1].col + bars[i-1].len  ;
 23c:	12 16       	cp	r1, r18
 23e:	13 06       	cpc	r1, r19
 240:	04 f5       	brge	.+64     	; 0x282 <setGreenBars+0xb0>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	91 05       	cpc	r25, r1
 246:	49 f4       	brne	.+18     	; 0x25a <setGreenBars+0x88>
 248:	60 81       	ld	r22, Z
 24a:	71 81       	ldd	r23, Z+1	; 0x01
 24c:	44 81       	ldd	r20, Z+4	; 0x04
 24e:	55 81       	ldd	r21, Z+5	; 0x05
 250:	46 0f       	add	r20, r22
 252:	57 1f       	adc	r21, r23
 254:	53 87       	std	Z+11, r21	; 0x0b
 256:	42 87       	std	Z+10, r20	; 0x0a
 258:	19 c0       	rjmp	.+50     	; 0x28c <setGreenBars+0xba>
		else if( i > 0 && i%3 == 2) bars[i].col = bars[i-1].col + bars[i-1].len  ;
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	91 05       	cpc	r25, r1
 25e:	49 f4       	brne	.+18     	; 0x272 <setGreenBars+0xa0>
 260:	60 81       	ld	r22, Z
 262:	71 81       	ldd	r23, Z+1	; 0x01
 264:	44 81       	ldd	r20, Z+4	; 0x04
 266:	55 81       	ldd	r21, Z+5	; 0x05
 268:	46 0f       	add	r20, r22
 26a:	57 1f       	adc	r21, r23
 26c:	53 87       	std	Z+11, r21	; 0x0b
 26e:	42 87       	std	Z+10, r20	; 0x0a
 270:	0d c0       	rjmp	.+26     	; 0x28c <setGreenBars+0xba>
		else if(i > 0 ) bars[i].col = bars[i-1].col + bars[i-1].len  ;
 272:	60 81       	ld	r22, Z
 274:	71 81       	ldd	r23, Z+1	; 0x01
 276:	44 81       	ldd	r20, Z+4	; 0x04
 278:	55 81       	ldd	r21, Z+5	; 0x05
 27a:	46 0f       	add	r20, r22
 27c:	57 1f       	adc	r21, r23
 27e:	53 87       	std	Z+11, r21	; 0x0b
 280:	42 87       	std	Z+10, r20	; 0x0a
		
		if(i %3 == 0 ) bars[i].len = 15;
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	19 f4       	brne	.+6      	; 0x28c <setGreenBars+0xba>
 286:	f7 82       	std	Z+7, r15	; 0x07
 288:	e6 82       	std	Z+6, r14	; 0x06
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <setGreenBars+0xd0>
		else if(i %3 == 1 ) bars[i].len = 10;
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	91 05       	cpc	r25, r1
 290:	19 f4       	brne	.+6      	; 0x298 <setGreenBars+0xc6>
 292:	d7 82       	std	Z+7, r13	; 0x07
 294:	c6 82       	std	Z+6, r12	; 0x06
 296:	05 c0       	rjmp	.+10     	; 0x2a2 <setGreenBars+0xd0>
		else if(i %3 == 2 ) bars[i].len = 10;
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	91 05       	cpc	r25, r1
 29c:	11 f4       	brne	.+4      	; 0x2a2 <setGreenBars+0xd0>
 29e:	d7 82       	std	Z+7, r13	; 0x07
 2a0:	c6 82       	std	Z+6, r12	; 0x06
	
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
 2a6:	36 96       	adiw	r30, 0x06	; 6
 2a8:	24 36       	cpi	r18, 0x64	; 100
 2aa:	31 05       	cpc	r19, r1
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <setGreenBars+0xde>
 2ae:	b2 cf       	rjmp	.-156    	; 0x214 <setGreenBars+0x42>
		if(i %3 == 0 ) bars[i].len = 15;
		else if(i %3 == 1 ) bars[i].len = 10;
		else if(i %3 == 2 ) bars[i].len = 10;
		
	}
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	08 95       	ret

000002c6 <setEnemies>:


void setEnemies() {
 2c6:	ae e8       	ldi	r26, 0x8E	; 142
 2c8:	b2 e0       	ldi	r27, 0x02	; 2
 2ca:	e6 ee       	ldi	r30, 0xE6	; 230
 2cc:	f4 e0       	ldi	r31, 0x04	; 4
 2ce:	46 ee       	ldi	r20, 0xE6	; 230
 2d0:	54 e0       	ldi	r21, 0x04	; 4
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
		
		enemy[i].baseRo = bars[i].ro-1;
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
		enemy[i].lifeLeft = 1;
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0

void setEnemies() {
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
		
		enemy[i].baseRo = bars[i].ro-1;
 2d6:	12 96       	adiw	r26, 0x02	; 2
 2d8:	8d 91       	ld	r24, X+
 2da:	9c 91       	ld	r25, X
 2dc:	13 97       	sbiw	r26, 0x03	; 3
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	91 83       	std	Z+1, r25	; 0x01
 2e2:	80 83       	st	Z, r24
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
 2e4:	14 96       	adiw	r26, 0x04	; 4
 2e6:	6d 91       	ld	r22, X+
 2e8:	7c 91       	ld	r23, X
 2ea:	15 97       	sbiw	r26, 0x05	; 5
 2ec:	8d 91       	ld	r24, X+
 2ee:	9c 91       	ld	r25, X
 2f0:	11 97       	sbiw	r26, 0x01	; 1
 2f2:	86 0f       	add	r24, r22
 2f4:	97 1f       	adc	r25, r23
 2f6:	05 97       	sbiw	r24, 0x05	; 5
 2f8:	93 83       	std	Z+3, r25	; 0x03
 2fa:	82 83       	std	Z+2, r24	; 0x02
		enemy[i].lifeLeft = 1;
 2fc:	37 83       	std	Z+7, r19	; 0x07
 2fe:	26 83       	std	Z+6, r18	; 0x06
		enemy[i].jmpLeft = 0;
 300:	15 82       	std	Z+5, r1	; 0x05
 302:	14 82       	std	Z+4, r1	; 0x04
 304:	16 96       	adiw	r26, 0x06	; 6
 306:	38 96       	adiw	r30, 0x08	; 8
}


void setEnemies() {
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
 308:	a4 17       	cp	r26, r20
 30a:	b5 07       	cpc	r27, r21
 30c:	21 f7       	brne	.-56     	; 0x2d6 <setEnemies+0x10>
		enemy[i].baseRo = bars[i].ro-1;
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
		enemy[i].lifeLeft = 1;
		enemy[i].jmpLeft = 0;
	}
}
 30e:	08 95       	ret

00000310 <setSiam>:

void setSiam() {
	
	siam.baseRo = 2;
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 87 00 	sts	0x0087, r25
 318:	80 93 86 00 	sts	0x0086, r24
	siam.baseCol = 1;
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 89 00 	sts	0x0089, r25
 324:	80 93 88 00 	sts	0x0088, r24
	siam.jmpLeft = 0;
 328:	10 92 8b 00 	sts	0x008B, r1
 32c:	10 92 8a 00 	sts	0x008A, r1
	siam.lifeLeft = 5;
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	90 93 8d 00 	sts	0x008D, r25
 338:	80 93 8c 00 	sts	0x008C, r24
}
 33c:	08 95       	ret

0000033e <barInsideFrame>:



int barInsideFrame(int barID) {
	
	int frm = bars[barID].col;
 33e:	9c 01       	movw	r18, r24
 340:	22 0f       	add	r18, r18
 342:	33 1f       	adc	r19, r19
 344:	28 0f       	add	r18, r24
 346:	39 1f       	adc	r19, r25
 348:	f9 01       	movw	r30, r18
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	e2 57       	subi	r30, 0x72	; 114
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	84 81       	ldd	r24, Z+4	; 0x04
 354:	95 81       	ldd	r25, Z+5	; 0x05
	int to = frm + bars[barID].len;
 356:	60 81       	ld	r22, Z
 358:	71 81       	ldd	r23, Z+1	; 0x01
 35a:	68 0f       	add	r22, r24
 35c:	79 1f       	adc	r23, r25

	int leftFrame = nowCol;
 35e:	20 91 64 00 	lds	r18, 0x0064
 362:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
 366:	a9 01       	movw	r20, r18
 368:	41 5f       	subi	r20, 0xF1	; 241
 36a:	5f 4f       	sbci	r21, 0xFF	; 255

	if(frm >= leftFrame && to <= rightFrame) return 1;
 36c:	82 17       	cp	r24, r18
 36e:	93 07       	cpc	r25, r19
 370:	34 f0       	brlt	.+12     	; 0x37e <barInsideFrame+0x40>
 372:	46 17       	cp	r20, r22
 374:	57 07       	cpc	r21, r23
 376:	8c f4       	brge	.+34     	; 0x39a <barInsideFrame+0x5c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 378:	28 17       	cp	r18, r24
 37a:	39 07       	cpc	r19, r25
 37c:	1c f0       	brlt	.+6      	; 0x384 <barInsideFrame+0x46>
 37e:	62 17       	cp	r22, r18
 380:	73 07       	cpc	r23, r19
 382:	74 f4       	brge	.+28     	; 0x3a0 <barInsideFrame+0x62>
	if(frm <= rightFrame && to >= rightFrame) return 1;
 384:	48 17       	cp	r20, r24
 386:	59 07       	cpc	r21, r25
 388:	74 f0       	brlt	.+28     	; 0x3a6 <barInsideFrame+0x68>
	siam.lifeLeft = 5;
}



int barInsideFrame(int barID) {
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	64 17       	cp	r22, r20
 390:	75 07       	cpc	r23, r21
 392:	5c f4       	brge	.+22     	; 0x3aa <barInsideFrame+0x6c>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	08 c0       	rjmp	.+16     	; 0x3aa <barInsideFrame+0x6c>
	int to = frm + bars[barID].len;

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(frm >= leftFrame && to <= rightFrame) return 1;
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <barInsideFrame+0x6c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <barInsideFrame+0x6c>
	if(frm <= rightFrame && to >= rightFrame) return 1;

	return 0;
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e0       	ldi	r19, 0x00	; 0
}
 3aa:	82 2f       	mov	r24, r18
 3ac:	93 2f       	mov	r25, r19
 3ae:	08 95       	ret

000003b0 <setOnPatternArrayBar>:


void setOnPatternArrayBar(int barID) {
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
	
	int barRo = bars[barID].ro;
 3b4:	fc 01       	movw	r30, r24
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	e8 0f       	add	r30, r24
 3bc:	f9 1f       	adc	r31, r25
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e2 57       	subi	r30, 0x72	; 114
 3c4:	fd 4f       	sbci	r31, 0xFD	; 253
 3c6:	a2 81       	ldd	r26, Z+2	; 0x02
 3c8:	b3 81       	ldd	r27, Z+3	; 0x03
	int barBeginCol = bars[barID].col;
 3ca:	24 81       	ldd	r18, Z+4	; 0x04
 3cc:	35 81       	ldd	r19, Z+5	; 0x05
	int barEndCol = barBeginCol + bars[barID].len - 1;
	
	int printFrm = nowCol;
 3ce:	40 91 64 00 	lds	r20, 0x0064
 3d2:	50 91 65 00 	lds	r21, 0x0065
 3d6:	ba 01       	movw	r22, r20
 3d8:	42 17       	cp	r20, r18
 3da:	53 07       	cpc	r21, r19
 3dc:	0c f4       	brge	.+2      	; 0x3e0 <setOnPatternArrayBar+0x30>
 3de:	b9 01       	movw	r22, r18
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 3e0:	fa 01       	movw	r30, r20
 3e2:	3f 96       	adiw	r30, 0x0f	; 15

void setOnPatternArrayBar(int barID) {
	
	int barRo = bars[barID].ro;
	int barBeginCol = bars[barID].col;
	int barEndCol = barBeginCol + bars[barID].len - 1;
 3e4:	ec 01       	movw	r28, r24
 3e6:	cc 0f       	add	r28, r28
 3e8:	dd 1f       	adc	r29, r29
 3ea:	8c 0f       	add	r24, r28
 3ec:	9d 1f       	adc	r25, r29
 3ee:	ec 01       	movw	r28, r24
 3f0:	cc 0f       	add	r28, r28
 3f2:	dd 1f       	adc	r29, r29
 3f4:	c2 57       	subi	r28, 0x72	; 114
 3f6:	dd 4f       	sbci	r29, 0xFD	; 253
 3f8:	88 81       	ld	r24, Y
 3fa:	99 81       	ldd	r25, Y+1	; 0x01
 3fc:	28 0f       	add	r18, r24
 3fe:	39 1f       	adc	r19, r25
 400:	21 50       	subi	r18, 0x01	; 1
 402:	30 40       	sbci	r19, 0x00	; 0
	
	int printFrm = nowCol;
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 404:	e2 17       	cp	r30, r18
 406:	f3 07       	cpc	r31, r19
 408:	0c f4       	brge	.+2      	; 0x40c <setOnPatternArrayBar+0x5c>
 40a:	9f 01       	movw	r18, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 40c:	26 17       	cp	r18, r22
 40e:	37 07       	cpc	r19, r23
 410:	cc f0       	brlt	.+50     	; 0x444 <setOnPatternArrayBar+0x94>

	return 0;
}


void setOnPatternArrayBar(int barID) {
 412:	fd 01       	movw	r30, r26
 414:	e2 95       	swap	r30
 416:	f2 95       	swap	r31
 418:	f0 7f       	andi	r31, 0xF0	; 240
 41a:	fe 27       	eor	r31, r30
 41c:	e0 7f       	andi	r30, 0xF0	; 240
 41e:	fe 27       	eor	r31, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
 420:	cb 01       	movw	r24, r22
 422:	84 1b       	sub	r24, r20
 424:	95 0b       	sbc	r25, r21

	return 0;
}


void setOnPatternArrayBar(int barID) {
 426:	e8 0f       	add	r30, r24
 428:	f9 1f       	adc	r31, r25
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	e2 57       	subi	r30, 0x72	; 114
 430:	ff 4f       	sbci	r31, 0xFF	; 255
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 432:	cb 01       	movw	r24, r22
		pattern[barRo][i - nowCol] = 1;
 434:	41 e0       	ldi	r20, 0x01	; 1
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	41 93       	st	Z+, r20
 43a:	51 93       	st	Z+, r21
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	d4 f7       	brge	.-12     	; 0x438 <setOnPatternArrayBar+0x88>
		pattern[barRo][i - nowCol] = 1;
	}
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <UpdateGreenBars>:

void UpdateGreenBars() {
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
	
	memset(pattern , 0 , sizeof pattern);
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	ee e8       	ldi	r30, 0x8E	; 142
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	df 01       	movw	r26, r30
 45c:	9c 01       	movw	r18, r24
 45e:	1d 92       	st	X+, r1
 460:	21 50       	subi	r18, 0x01	; 1
 462:	30 40       	sbci	r19, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <UpdateGreenBars+0x14>
	int tmp = currentGreenBar;
 466:	c0 91 08 08 	lds	r28, 0x0808
 46a:	d0 91 09 08 	lds	r29, 0x0809
	currentGreenBar  = INF;
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	9f e7       	ldi	r25, 0x7F	; 127
 472:	90 93 09 08 	sts	0x0809, r25
 476:	80 93 08 08 	sts	0x0808, r24
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 47a:	ce 01       	movw	r24, r28
 47c:	05 96       	adiw	r24, 0x05	; 5
 47e:	c8 17       	cp	r28, r24
 480:	d9 07       	cpc	r29, r25
 482:	c4 f4       	brge	.+48     	; 0x4b4 <UpdateGreenBars+0x6a>
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
	}
}

void UpdateGreenBars() {
 484:	8c 01       	movw	r16, r24
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
	
		if(barInsideFrame(i) )	 {
 486:	ce 01       	movw	r24, r28
 488:	0e 94 9f 01 	call	0x33e	; 0x33e <barInsideFrame>
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	71 f0       	breq	.+28     	; 0x4ac <UpdateGreenBars+0x62>
			
			if(i < currentGreenBar)  currentGreenBar = i;
 490:	80 91 08 08 	lds	r24, 0x0808
 494:	90 91 09 08 	lds	r25, 0x0809
 498:	c8 17       	cp	r28, r24
 49a:	d9 07       	cpc	r29, r25
 49c:	24 f4       	brge	.+8      	; 0x4a6 <UpdateGreenBars+0x5c>
 49e:	d0 93 09 08 	sts	0x0809, r29
 4a2:	c0 93 08 08 	sts	0x0808, r28
			setOnPatternArrayBar(i);
 4a6:	ce 01       	movw	r24, r28
 4a8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <setOnPatternArrayBar>
void UpdateGreenBars() {
	
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 4ac:	21 96       	adiw	r28, 0x01	; 1
 4ae:	c0 17       	cp	r28, r16
 4b0:	d1 07       	cpc	r29, r17
 4b2:	49 f7       	brne	.-46     	; 0x486 <UpdateGreenBars+0x3c>
			
			if(i < currentGreenBar)  currentGreenBar = i;
			setOnPatternArrayBar(i);
		}
	}
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <enemyInsideFrame>:

int enemyInsideFrame(int enemyID) {

	int leftFrame = nowCol;
 4be:	20 91 64 00 	lds	r18, 0x0064
 4c2:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
 4c6:	a9 01       	movw	r20, r18
 4c8:	41 5f       	subi	r20, 0xF1	; 241
 4ca:	5f 4f       	sbci	r21, 0xFF	; 255

	if(enemy[enemyID].baseCol >= leftFrame && enemy[enemyID].baseCol <= rightFrame) return 1;
 4cc:	fc 01       	movw	r30, r24
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ee 0f       	add	r30, r30
 4d4:	ff 1f       	adc	r31, r31
 4d6:	ee 0f       	add	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	ea 51       	subi	r30, 0x1A	; 26
 4dc:	fb 4f       	sbci	r31, 0xFB	; 251
 4de:	82 81       	ldd	r24, Z+2	; 0x02
 4e0:	93 81       	ldd	r25, Z+3	; 0x03
 4e2:	82 17       	cp	r24, r18
 4e4:	93 07       	cpc	r25, r19
 4e6:	1c f0       	brlt	.+6      	; 0x4ee <enemyInsideFrame+0x30>
 4e8:	48 17       	cp	r20, r24
 4ea:	59 07       	cpc	r21, r25
 4ec:	64 f4       	brge	.+24     	; 0x506 <enemyInsideFrame+0x48>
	if(enemy[enemyID].baseCol + 1 >= leftFrame && enemy[enemyID].baseCol + 1 <= rightFrame) return 1;
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	82 17       	cp	r24, r18
 4f2:	93 07       	cpc	r25, r19
 4f4:	5c f0       	brlt	.+22     	; 0x50c <enemyInsideFrame+0x4e>
			setOnPatternArrayBar(i);
		}
	}
}

int enemyInsideFrame(int enemyID) {
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	48 17       	cp	r20, r24
 4fc:	59 07       	cpc	r21, r25
 4fe:	44 f4       	brge	.+16     	; 0x510 <enemyInsideFrame+0x52>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	05 c0       	rjmp	.+10     	; 0x510 <enemyInsideFrame+0x52>

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(enemy[enemyID].baseCol >= leftFrame && enemy[enemyID].baseCol <= rightFrame) return 1;
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <enemyInsideFrame+0x52>
	if(enemy[enemyID].baseCol + 1 >= leftFrame && enemy[enemyID].baseCol + 1 <= rightFrame) return 1;

	return 0;
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	30 e0       	ldi	r19, 0x00	; 0
}
 510:	82 2f       	mov	r24, r18
 512:	93 2f       	mov	r25, r19
 514:	08 95       	ret

00000516 <setOnPatternArrayEnemy>:


void setOnPatternArrayEnemy(int enemyID) {
 516:	af 92       	push	r10
 518:	bf 92       	push	r11
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	6c 01       	movw	r12, r24
	
	
	int enemyRo = enemy[enemyID].baseRo;
 52c:	fc 01       	movw	r30, r24
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	ee 0f       	add	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	ea 51       	subi	r30, 0x1A	; 26
 53c:	fb 4f       	sbci	r31, 0xFB	; 251
 53e:	a0 80       	ld	r10, Z
 540:	b1 80       	ldd	r11, Z+1	; 0x01
	
	int printFrm = nowCol;
 542:	e0 90 64 00 	lds	r14, 0x0064
 546:	f0 90 65 00 	lds	r15, 0x0065
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
 54a:	42 81       	ldd	r20, Z+2	; 0x02
 54c:	53 81       	ldd	r21, Z+3	; 0x03
 54e:	8a 01       	movw	r16, r20
 550:	4e 15       	cp	r20, r14
 552:	5f 05       	cpc	r21, r15
 554:	0c f4       	brge	.+2      	; 0x558 <setOnPatternArrayEnemy+0x42>
 556:	87 01       	movw	r16, r14
	
	int printTo = nowCol + 15;
 558:	c7 01       	movw	r24, r14
 55a:	0f 96       	adiw	r24, 0x0f	; 15
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
 55c:	4f 5f       	subi	r20, 0xFF	; 255
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
	int enemyRo = enemy[enemyID].baseRo;
	
	int printFrm = nowCol;
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
	
	int printTo = nowCol + 15;
 560:	84 17       	cp	r24, r20
 562:	95 07       	cpc	r25, r21
 564:	0c f4       	brge	.+2      	; 0x568 <setOnPatternArrayEnemy+0x52>
 566:	ac 01       	movw	r20, r24
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 568:	40 17       	cp	r20, r16
 56a:	51 07       	cpc	r21, r17
 56c:	c4 f1       	brlt	.+112    	; 0x5de <setOnPatternArrayEnemy+0xc8>
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 56e:	f5 01       	movw	r30, r10
 570:	31 97       	sbiw	r30, 0x01	; 1

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 572:	e2 95       	swap	r30
 574:	f2 95       	swap	r31
 576:	f0 7f       	andi	r31, 0xF0	; 240
 578:	fe 27       	eor	r31, r30
 57a:	e0 7f       	andi	r30, 0xF0	; 240
 57c:	fe 27       	eor	r31, r30
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 57e:	c8 01       	movw	r24, r16
 580:	8e 19       	sub	r24, r14
 582:	9f 09       	sbc	r25, r15

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 584:	e8 0f       	add	r30, r24
 586:	f9 1f       	adc	r31, r25
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	e2 57       	subi	r30, 0x72	; 114
 58e:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 590:	c8 01       	movw	r24, r16
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	70 e0       	ldi	r23, 0x00	; 0
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
 596:	c0 e0       	ldi	r28, 0x00	; 0
 598:	d0 e0       	ldi	r29, 0x00	; 0

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 59a:	df 01       	movw	r26, r30
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
 59c:	20 a1       	ldd	r18, Z+32	; 0x20
 59e:	31 a1       	ldd	r19, Z+33	; 0x21
 5a0:	24 30       	cpi	r18, 0x04	; 4
 5a2:	31 05       	cpc	r19, r1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <setOnPatternArrayEnemy+0x92>
 5a6:	be 01       	movw	r22, r28
 5a8:	32 96       	adiw	r30, 0x02	; 2
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 5aa:	2d 91       	ld	r18, X+
 5ac:	3c 91       	ld	r19, X
 5ae:	11 97       	sbiw	r26, 0x01	; 1
 5b0:	24 30       	cpi	r18, 0x04	; 4
 5b2:	31 05       	cpc	r19, r1
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <setOnPatternArrayEnemy+0xa2>
 5b6:	be 01       	movw	r22, r28
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 5b8:	01 96       	adiw	r24, 0x01	; 1
 5ba:	48 17       	cp	r20, r24
 5bc:	59 07       	cpc	r21, r25
 5be:	6c f7       	brge	.-38     	; 0x59a <setOnPatternArrayEnemy+0x84>
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
	}
	if(safe == 0 ) {
 5c0:	61 15       	cp	r22, r1
 5c2:	71 05       	cpc	r23, r1
 5c4:	61 f4       	brne	.+24     	; 0x5de <setOnPatternArrayEnemy+0xc8>
		enemy[enemyID].lifeLeft = 0;
 5c6:	f6 01       	movw	r30, r12
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	ea 51       	subi	r30, 0x1A	; 26
 5d6:	fb 4f       	sbci	r31, 0xFB	; 251
 5d8:	17 82       	std	Z+7, r1	; 0x07
 5da:	16 82       	std	Z+6, r1	; 0x06
		return ;
 5dc:	58 c0       	rjmp	.+176    	; 0x68e <setOnPatternArrayEnemy+0x178>
		killSiam();
		recoverSiam();
		return ;
	}
	*/		
	else if(pattern[enemyRo-2][printFrm-nowCol] == 2 || pattern[enemyRo-2][printTo-nowCol] == 2) {
 5de:	c5 01       	movw	r24, r10
 5e0:	02 97       	sbiw	r24, 0x02	; 2
 5e2:	b8 01       	movw	r22, r16
 5e4:	6e 19       	sub	r22, r14
 5e6:	7f 09       	sbc	r23, r15
 5e8:	fc 01       	movw	r30, r24
 5ea:	e2 95       	swap	r30
 5ec:	f2 95       	swap	r31
 5ee:	f0 7f       	andi	r31, 0xF0	; 240
 5f0:	fe 27       	eor	r31, r30
 5f2:	e0 7f       	andi	r30, 0xF0	; 240
 5f4:	fe 27       	eor	r31, r30
 5f6:	e6 0f       	add	r30, r22
 5f8:	f7 1f       	adc	r31, r23
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	e2 57       	subi	r30, 0x72	; 114
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	20 81       	ld	r18, Z
 604:	31 81       	ldd	r19, Z+1	; 0x01
 606:	22 30       	cpi	r18, 0x02	; 2
 608:	31 05       	cpc	r19, r1
 60a:	c9 f0       	breq	.+50     	; 0x63e <setOnPatternArrayEnemy+0x128>
 60c:	9a 01       	movw	r18, r20
 60e:	2e 19       	sub	r18, r14
 610:	3f 09       	sbc	r19, r15
 612:	fc 01       	movw	r30, r24
 614:	e2 95       	swap	r30
 616:	f2 95       	swap	r31
 618:	f0 7f       	andi	r31, 0xF0	; 240
 61a:	fe 27       	eor	r31, r30
 61c:	e0 7f       	andi	r30, 0xF0	; 240
 61e:	fe 27       	eor	r31, r30
 620:	e2 0f       	add	r30, r18
 622:	f3 1f       	adc	r31, r19
 624:	ee 0f       	add	r30, r30
 626:	ff 1f       	adc	r31, r31
 628:	e2 57       	subi	r30, 0x72	; 114
 62a:	ff 4f       	sbci	r31, 0xFF	; 255
 62c:	80 81       	ld	r24, Z
 62e:	91 81       	ldd	r25, Z+1	; 0x01
 630:	82 30       	cpi	r24, 0x02	; 2
 632:	91 05       	cpc	r25, r1
 634:	21 f0       	breq	.+8      	; 0x63e <setOnPatternArrayEnemy+0x128>
		enemy[enemyID].lifeLeft = 0;
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 636:	40 17       	cp	r20, r16
 638:	51 07       	cpc	r21, r17
 63a:	6c f4       	brge	.+26     	; 0x656 <setOnPatternArrayEnemy+0x140>
 63c:	28 c0       	rjmp	.+80     	; 0x68e <setOnPatternArrayEnemy+0x178>
		recoverSiam();
		return ;
	}
	*/		
	else if(pattern[enemyRo-2][printFrm-nowCol] == 2 || pattern[enemyRo-2][printTo-nowCol] == 2) {
		enemy[enemyID].lifeLeft = 0;
 63e:	f6 01       	movw	r30, r12
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	ea 51       	subi	r30, 0x1A	; 26
 64e:	fb 4f       	sbci	r31, 0xFB	; 251
 650:	17 82       	std	Z+7, r1	; 0x07
 652:	16 82       	std	Z+6, r1	; 0x06
		return ;
 654:	1c c0       	rjmp	.+56     	; 0x68e <setOnPatternArrayEnemy+0x178>
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[enemyRo][i - nowCol] = 3;
		pattern[enemyRo-1][i - nowCol] = 3;
 656:	08 94       	sec
 658:	a1 08       	sbc	r10, r1
 65a:	b1 08       	sbc	r11, r1

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 65c:	f5 01       	movw	r30, r10
 65e:	e2 95       	swap	r30
 660:	f2 95       	swap	r31
 662:	f0 7f       	andi	r31, 0xF0	; 240
 664:	fe 27       	eor	r31, r30
 666:	e0 7f       	andi	r30, 0xF0	; 240
 668:	fe 27       	eor	r31, r30
 66a:	6e 0f       	add	r22, r30
 66c:	7f 1f       	adc	r23, r31
 66e:	fb 01       	movw	r30, r22
 670:	ee 0f       	add	r30, r30
 672:	ff 1f       	adc	r31, r31
 674:	e2 57       	subi	r30, 0x72	; 114
 676:	ff 4f       	sbci	r31, 0xFF	; 255
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[enemyRo][i - nowCol] = 3;
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	91 a3       	std	Z+33, r25	; 0x21
 67e:	80 a3       	std	Z+32, r24	; 0x20
		pattern[enemyRo-1][i - nowCol] = 3;
 680:	81 93       	st	Z+, r24
 682:	91 93       	st	Z+, r25
		enemy[enemyID].lifeLeft = 0;
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 684:	0f 5f       	subi	r16, 0xFF	; 255
 686:	1f 4f       	sbci	r17, 0xFF	; 255
 688:	40 17       	cp	r20, r16
 68a:	51 07       	cpc	r21, r17
 68c:	bc f7       	brge	.-18     	; 0x67c <setOnPatternArrayEnemy+0x166>
		pattern[enemyRo][i - nowCol] = 3;
		pattern[enemyRo-1][i - nowCol] = 3;
	}
	//pattern[enemyRo-1][printFrm-nowCol - 1] = 3;
}
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	08 95       	ret

000006a4 <UpdateEnemies>:


void UpdateEnemies() {
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
 6ac:	c0 91 08 08 	lds	r28, 0x0808
 6b0:	d0 91 09 08 	lds	r29, 0x0809
 6b4:	ce 01       	movw	r24, r28
 6b6:	05 96       	adiw	r24, 0x05	; 5
 6b8:	c8 17       	cp	r28, r24
 6ba:	d9 07       	cpc	r29, r25
 6bc:	0c f5       	brge	.+66     	; 0x700 <UpdateEnemies+0x5c>
	}
	//pattern[enemyRo-1][printFrm-nowCol - 1] = 3;
}


void UpdateEnemies() {
 6be:	8e 01       	movw	r16, r28
 6c0:	00 0f       	add	r16, r16
 6c2:	11 1f       	adc	r17, r17
 6c4:	00 0f       	add	r16, r16
 6c6:	11 1f       	adc	r17, r17
 6c8:	00 0f       	add	r16, r16
 6ca:	11 1f       	adc	r17, r17
 6cc:	04 51       	subi	r16, 0x14	; 20
 6ce:	1b 4f       	sbci	r17, 0xFB	; 251
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
		if(enemy[i].lifeLeft && enemyInsideFrame(i)) {
 6d0:	f8 01       	movw	r30, r16
 6d2:	80 81       	ld	r24, Z
 6d4:	91 81       	ldd	r25, Z+1	; 0x01
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	41 f0       	breq	.+16     	; 0x6ea <UpdateEnemies+0x46>
 6da:	ce 01       	movw	r24, r28
 6dc:	0e 94 5f 02 	call	0x4be	; 0x4be <enemyInsideFrame>
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <UpdateEnemies+0x46>
			setOnPatternArrayEnemy(i);
 6e4:	ce 01       	movw	r24, r28
 6e6:	0e 94 8b 02 	call	0x516	; 0x516 <setOnPatternArrayEnemy>
}


void UpdateEnemies() {
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
 6ea:	21 96       	adiw	r28, 0x01	; 1
 6ec:	08 5f       	subi	r16, 0xF8	; 248
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	80 91 08 08 	lds	r24, 0x0808
 6f4:	90 91 09 08 	lds	r25, 0x0809
 6f8:	05 96       	adiw	r24, 0x05	; 5
 6fa:	c8 17       	cp	r28, r24
 6fc:	d9 07       	cpc	r29, r25
 6fe:	44 f3       	brlt	.-48     	; 0x6d0 <UpdateEnemies+0x2c>
		if(enemy[i].lifeLeft && enemyInsideFrame(i)) {
			setOnPatternArrayEnemy(i);
		}
	}
}
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	08 95       	ret

0000070a <bulletInsideFrame>:

int bulletInsideFrame(int bulletID) {
	
	int leftFrame = nowCol;
 70a:	20 91 64 00 	lds	r18, 0x0064
 70e:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
	
	if(bullet[bulletID].col >=leftFrame && bullet[bulletID].col <= rightFrame ) return 1;
 712:	ac 01       	movw	r20, r24
 714:	44 0f       	add	r20, r20
 716:	55 1f       	adc	r21, r21
 718:	48 0f       	add	r20, r24
 71a:	59 1f       	adc	r21, r25
 71c:	fa 01       	movw	r30, r20
 71e:	ee 0f       	add	r30, r30
 720:	ff 1f       	adc	r31, r31
 722:	ea 59       	subi	r30, 0x9A	; 154
 724:	ff 4f       	sbci	r31, 0xFF	; 255
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	82 17       	cp	r24, r18
 72c:	93 07       	cpc	r25, r19
 72e:	5c f0       	brlt	.+22     	; 0x746 <bulletInsideFrame+0x3c>
}

int bulletInsideFrame(int bulletID) {
	
	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;
 730:	a9 01       	movw	r20, r18
 732:	41 5f       	subi	r20, 0xF1	; 241
 734:	5f 4f       	sbci	r21, 0xFF	; 255
			setOnPatternArrayEnemy(i);
		}
	}
}

int bulletInsideFrame(int bulletID) {
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	48 17       	cp	r20, r24
 73c:	59 07       	cpc	r21, r25
 73e:	2c f4       	brge	.+10     	; 0x74a <bulletInsideFrame+0x40>
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <bulletInsideFrame+0x40>
	
	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;
	
	if(bullet[bulletID].col >=leftFrame && bullet[bulletID].col <= rightFrame ) return 1;
	return 0;
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
}
 74a:	82 2f       	mov	r24, r18
 74c:	93 2f       	mov	r25, r19
 74e:	08 95       	ret

00000750 <setOnPatternArrayBullet>:


void setOnPatternArrayBullet(int bulletID) {
	int row = bullet[bulletID].ro;
 750:	9c 01       	movw	r18, r24
 752:	22 0f       	add	r18, r18
 754:	33 1f       	adc	r19, r19
 756:	28 0f       	add	r18, r24
 758:	39 1f       	adc	r19, r25
 75a:	f9 01       	movw	r30, r18
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	ea 59       	subi	r30, 0x9A	; 154
 762:	ff 4f       	sbci	r31, 0xFF	; 255
	int col = bullet[bulletID].col;
	
	pattern[row][col - nowCol] = 4;
 764:	80 81       	ld	r24, Z
 766:	91 81       	ldd	r25, Z+1	; 0x01
 768:	02 80       	ldd	r0, Z+2	; 0x02
 76a:	f3 81       	ldd	r31, Z+3	; 0x03
 76c:	e0 2d       	mov	r30, r0
 76e:	20 91 64 00 	lds	r18, 0x0064
 772:	30 91 65 00 	lds	r19, 0x0065
 776:	e2 1b       	sub	r30, r18
 778:	f3 0b       	sbc	r31, r19
 77a:	82 95       	swap	r24
 77c:	92 95       	swap	r25
 77e:	90 7f       	andi	r25, 0xF0	; 240
 780:	98 27       	eor	r25, r24
 782:	80 7f       	andi	r24, 0xF0	; 240
 784:	98 27       	eor	r25, r24
 786:	e8 0f       	add	r30, r24
 788:	f9 1f       	adc	r31, r25
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	e2 57       	subi	r30, 0x72	; 114
 790:	ff 4f       	sbci	r31, 0xFF	; 255
 792:	84 e0       	ldi	r24, 0x04	; 4
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	91 83       	std	Z+1, r25	; 0x01
 798:	80 83       	st	Z, r24
}
 79a:	08 95       	ret

0000079c <UpdateBullet>:


void UpdateBullet() {
 79c:	ef 92       	push	r14
 79e:	ff 92       	push	r15
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
	
	for(int i =0 ; i < totBullet ; i++ ) {
 7a8:	c8 e6       	ldi	r28, 0x68	; 104
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
 7ac:	00 e0       	ldi	r16, 0x00	; 0
 7ae:	10 e0       	ldi	r17, 0x00	; 0
		
		if(bullet[i].alive == 0 ) continue;
 7b0:	8a 81       	ldd	r24, Y+2	; 0x02
 7b2:	9b 81       	ldd	r25, Y+3	; 0x03
 7b4:	00 97       	sbiw	r24, 0x00	; 0
 7b6:	81 f0       	breq	.+32     	; 0x7d8 <UpdateBullet+0x3c>
		
		//pattern[bullet[i].ro][bullet[i].col] = 0;
		bullet[i].col++;
 7b8:	88 81       	ld	r24, Y
 7ba:	99 81       	ldd	r25, Y+1	; 0x01
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	99 83       	std	Y+1, r25	; 0x01
 7c0:	88 83       	st	Y, r24
		
		if(bulletInsideFrame(i)) {
 7c2:	c8 01       	movw	r24, r16
 7c4:	0e 94 85 03 	call	0x70a	; 0x70a <bulletInsideFrame>
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	21 f0       	breq	.+8      	; 0x7d4 <UpdateBullet+0x38>
			
			setOnPatternArrayBullet(i);
 7cc:	c8 01       	movw	r24, r16
 7ce:	0e 94 a8 03 	call	0x750	; 0x750 <setOnPatternArrayBullet>
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <UpdateBullet+0x3c>
		}
		else {
			bullet[i].alive = 0;
 7d4:	1b 82       	std	Y+3, r1	; 0x03
 7d6:	1a 82       	std	Y+2, r1	; 0x02
}


void UpdateBullet() {
	
	for(int i =0 ; i < totBullet ; i++ ) {
 7d8:	0f 5f       	subi	r16, 0xFF	; 255
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	26 96       	adiw	r28, 0x06	; 6
 7de:	05 30       	cpi	r16, 0x05	; 5
 7e0:	11 05       	cpc	r17, r1
 7e2:	31 f7       	brne	.-52     	; 0x7b0 <UpdateBullet+0x14>
		}
		else {
			bullet[i].alive = 0;
		}			
	}
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	ff 90       	pop	r15
 7ee:	ef 90       	pop	r14
 7f0:	08 95       	ret

000007f2 <right_move_condition_found>:


int right_move_condition_found() {
	
	if(siam.lifeLeft == 0 ) return 0;
 7f2:	80 91 8c 00 	lds	r24, 0x008C
 7f6:	90 91 8d 00 	lds	r25, 0x008D
 7fa:	00 97       	sbiw	r24, 0x00	; 0
 7fc:	09 f4       	brne	.+2      	; 0x800 <right_move_condition_found+0xe>
 7fe:	58 c0       	rjmp	.+176    	; 0x8b0 <__stack+0x51>
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
 800:	20 91 86 00 	lds	r18, 0x0086
 804:	30 91 87 00 	lds	r19, 0x0087
 808:	80 91 88 00 	lds	r24, 0x0088
 80c:	90 91 89 00 	lds	r25, 0x0089
 810:	01 96       	adiw	r24, 0x01	; 1
 812:	f9 01       	movw	r30, r18
 814:	e2 95       	swap	r30
 816:	f2 95       	swap	r31
 818:	f0 7f       	andi	r31, 0xF0	; 240
 81a:	fe 27       	eor	r31, r30
 81c:	e0 7f       	andi	r30, 0xF0	; 240
 81e:	fe 27       	eor	r31, r30
 820:	e8 0f       	add	r30, r24
 822:	f9 1f       	adc	r31, r25
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	e2 57       	subi	r30, 0x72	; 114
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
		}			
	}
}


int right_move_condition_found() {
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	60 81       	ld	r22, Z
 832:	71 81       	ldd	r23, Z+1	; 0x01
 834:	61 15       	cp	r22, r1
 836:	71 05       	cpc	r23, r1
 838:	11 f0       	breq	.+4      	; 0x83e <right_move_condition_found+0x4c>
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	50 e0       	ldi	r21, 0x00	; 0
	
	if(siam.lifeLeft == 0 ) return 0;
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
 83e:	f9 01       	movw	r30, r18
 840:	31 97       	sbiw	r30, 0x01	; 1
 842:	e2 95       	swap	r30
 844:	f2 95       	swap	r31
 846:	f0 7f       	andi	r31, 0xF0	; 240
 848:	fe 27       	eor	r31, r30
 84a:	e0 7f       	andi	r30, 0xF0	; 240
 84c:	fe 27       	eor	r31, r30
 84e:	e8 0f       	add	r30, r24
 850:	f9 1f       	adc	r31, r25
 852:	ee 0f       	add	r30, r30
 854:	ff 1f       	adc	r31, r31
 856:	e2 57       	subi	r30, 0x72	; 114
 858:	ff 4f       	sbci	r31, 0xFF	; 255
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	61 15       	cp	r22, r1
 860:	71 05       	cpc	r23, r1
 862:	11 f0       	breq	.+4      	; 0x868 <__stack+0x9>
 864:	40 e0       	ldi	r20, 0x00	; 0
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	22 50       	subi	r18, 0x02	; 2
 86a:	30 40       	sbci	r19, 0x00	; 0
 86c:	f9 01       	movw	r30, r18
 86e:	e2 95       	swap	r30
 870:	f2 95       	swap	r31
 872:	f0 7f       	andi	r31, 0xF0	; 240
 874:	fe 27       	eor	r31, r30
 876:	e0 7f       	andi	r30, 0xF0	; 240
 878:	fe 27       	eor	r31, r30
 87a:	8e 0f       	add	r24, r30
 87c:	9f 1f       	adc	r25, r31
 87e:	fc 01       	movw	r30, r24
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	e2 57       	subi	r30, 0x72	; 114
 886:	ff 4f       	sbci	r31, 0xFF	; 255
 888:	80 81       	ld	r24, Z
 88a:	91 81       	ldd	r25, Z+1	; 0x01
 88c:	00 97       	sbiw	r24, 0x00	; 0
 88e:	99 f4       	brne	.+38     	; 0x8b6 <__stack+0x57>
	}
	
	if( ret == 0 )  return 0;
 890:	41 15       	cp	r20, r1
 892:	51 05       	cpc	r21, r1
 894:	99 f0       	breq	.+38     	; 0x8bc <__stack+0x5d>
	
	return  (bit_is_set(PINB, 0) && game_delay == 0 );
 896:	b0 9b       	sbis	0x16, 0	; 22
 898:	14 c0       	rjmp	.+40     	; 0x8c2 <__stack+0x63>
		}			
	}
}


int right_move_condition_found() {
 89a:	21 e0       	ldi	r18, 0x01	; 1
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	80 91 84 00 	lds	r24, 0x0084
 8a2:	90 91 85 00 	lds	r25, 0x0085
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__stack+0x67>
 8aa:	20 e0       	ldi	r18, 0x00	; 0
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <__stack+0x67>
	
	if(siam.lifeLeft == 0 ) return 0;
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	08 c0       	rjmp	.+16     	; 0x8c6 <__stack+0x67>
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
	}
	
	if( ret == 0 )  return 0;
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <__stack+0x67>
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
	
	return  (bit_is_set(PINB, 0) && game_delay == 0 );
 8c2:	20 e0       	ldi	r18, 0x00	; 0
 8c4:	30 e0       	ldi	r19, 0x00	; 0
}
 8c6:	82 2f       	mov	r24, r18
 8c8:	93 2f       	mov	r25, r19
 8ca:	08 95       	ret

000008cc <shoot_condition_found>:

int shoot_condition_found() {
	return (bit_is_set(PINB , 3));
 8cc:	26 b3       	in	r18, 0x16	; 22
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	28 70       	andi	r18, 0x08	; 8
 8d2:	30 70       	andi	r19, 0x00	; 0
}
 8d4:	82 2f       	mov	r24, r18
 8d6:	93 2f       	mov	r25, r19
 8d8:	08 95       	ret

000008da <recoverSiam>:


void recoverSiam() {
	
	
	siam.baseRo = 2;
 8da:	82 e0       	ldi	r24, 0x02	; 2
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	90 93 87 00 	sts	0x0087, r25
 8e2:	80 93 86 00 	sts	0x0086, r24
	//siam.baseCol = bars[currentGreenBar].col + 1;
	siam.jmpLeft = 0;
 8e6:	10 92 8b 00 	sts	0x008B, r1
 8ea:	10 92 8a 00 	sts	0x008A, r1
}
 8ee:	08 95       	ret

000008f0 <killSiam>:

void killSiam() {
	
	siam.lifeLeft--;
 8f0:	80 91 8c 00 	lds	r24, 0x008C
 8f4:	90 91 8d 00 	lds	r25, 0x008D
 8f8:	01 97       	sbiw	r24, 0x01	; 1
 8fa:	90 93 8d 00 	sts	0x008D, r25
 8fe:	80 93 8c 00 	sts	0x008C, r24
	buzzerSound();
 902:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <buzzerSound>
}
 906:	08 95       	ret

00000908 <jumpCheckSiam>:

void jumpCheckSiam() {
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
	
	
	if(jump_delay != 0) return;
 910:	80 91 06 08 	lds	r24, 0x0806
 914:	90 91 07 08 	lds	r25, 0x0807
 918:	00 97       	sbiw	r24, 0x00	; 0
 91a:	09 f0       	breq	.+2      	; 0x91e <jumpCheckSiam+0x16>
 91c:	72 c0       	rjmp	.+228    	; 0xa02 <jumpCheckSiam+0xfa>
	
	if(siam.jmpLeft > 0) {
 91e:	a0 91 8a 00 	lds	r26, 0x008A
 922:	b0 91 8b 00 	lds	r27, 0x008B
 926:	1a 16       	cp	r1, r26
 928:	1b 06       	cpc	r1, r27
 92a:	b4 f5       	brge	.+108    	; 0x998 <jumpCheckSiam+0x90>
		siam.baseRo--;
 92c:	20 91 86 00 	lds	r18, 0x0086
 930:	30 91 87 00 	lds	r19, 0x0087
		siam.jmpLeft--;
 934:	11 97       	sbiw	r26, 0x01	; 1
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 936:	e0 91 88 00 	lds	r30, 0x0088
 93a:	f0 91 89 00 	lds	r31, 0x0089
 93e:	21 50       	subi	r18, 0x01	; 1
 940:	30 40       	sbci	r19, 0x00	; 0
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	90 e0       	ldi	r25, 0x00	; 0
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 946:	6e e8       	ldi	r22, 0x8E	; 142
 948:	70 e0       	ldi	r23, 0x00	; 0
				siam.jmpLeft = 0;
 94a:	00 e0       	ldi	r16, 0x00	; 0
 94c:	10 e0       	ldi	r17, 0x00	; 0
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 94e:	a9 01       	movw	r20, r18
 950:	48 1b       	sub	r20, r24
 952:	59 0b       	sbc	r21, r25
 954:	42 95       	swap	r20
 956:	52 95       	swap	r21
 958:	50 7f       	andi	r21, 0xF0	; 240
 95a:	54 27       	eor	r21, r20
 95c:	40 7f       	andi	r20, 0xF0	; 240
 95e:	54 27       	eor	r21, r20
 960:	4e 0f       	add	r20, r30
 962:	5f 1f       	adc	r21, r31
 964:	44 0f       	add	r20, r20
 966:	55 1f       	adc	r21, r21
 968:	46 0f       	add	r20, r22
 96a:	57 1f       	adc	r21, r23
 96c:	ea 01       	movw	r28, r20
 96e:	48 81       	ld	r20, Y
 970:	59 81       	ldd	r21, Y+1	; 0x01
 972:	41 30       	cpi	r20, 0x01	; 1
 974:	51 05       	cpc	r21, r1
 976:	19 f4       	brne	.+6      	; 0x97e <jumpCheckSiam+0x76>
				siam.jmpLeft = 0;
				siam.baseRo++;
 978:	2f 5f       	subi	r18, 0xFF	; 255
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
				siam.jmpLeft = 0;
 97c:	d8 01       	movw	r26, r16
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	83 30       	cpi	r24, 0x03	; 3
 982:	91 05       	cpc	r25, r1
 984:	21 f7       	brne	.-56     	; 0x94e <jumpCheckSiam+0x46>
 986:	30 93 87 00 	sts	0x0087, r19
 98a:	20 93 86 00 	sts	0x0086, r18
 98e:	b0 93 8b 00 	sts	0x008B, r27
 992:	a0 93 8a 00 	sts	0x008A, r26
 996:	1f c0       	rjmp	.+62     	; 0x9d6 <jumpCheckSiam+0xce>
				siam.baseRo++;
			}				
		}		
	}
	else {
		if(pattern[siam.baseRo+1][siam.baseCol] == 0) siam.baseRo++;
 998:	80 91 86 00 	lds	r24, 0x0086
 99c:	90 91 87 00 	lds	r25, 0x0087
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	fc 01       	movw	r30, r24
 9a4:	e2 95       	swap	r30
 9a6:	f2 95       	swap	r31
 9a8:	f0 7f       	andi	r31, 0xF0	; 240
 9aa:	fe 27       	eor	r31, r30
 9ac:	e0 7f       	andi	r30, 0xF0	; 240
 9ae:	fe 27       	eor	r31, r30
 9b0:	20 91 88 00 	lds	r18, 0x0088
 9b4:	30 91 89 00 	lds	r19, 0x0089
 9b8:	e2 0f       	add	r30, r18
 9ba:	f3 1f       	adc	r31, r19
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	e2 57       	subi	r30, 0x72	; 114
 9c2:	ff 4f       	sbci	r31, 0xFF	; 255
 9c4:	20 81       	ld	r18, Z
 9c6:	31 81       	ldd	r19, Z+1	; 0x01
 9c8:	21 15       	cp	r18, r1
 9ca:	31 05       	cpc	r19, r1
 9cc:	21 f4       	brne	.+8      	; 0x9d6 <jumpCheckSiam+0xce>
 9ce:	90 93 87 00 	sts	0x0087, r25
 9d2:	80 93 86 00 	sts	0x0086, r24
	}	
	if(siam.baseRo - SIAM_HEIGHT + 1 < 0 ) siam.baseRo = SIAM_HEIGHT -1;
 9d6:	80 91 86 00 	lds	r24, 0x0086
 9da:	90 91 87 00 	lds	r25, 0x0087
 9de:	9c 01       	movw	r18, r24
 9e0:	22 50       	subi	r18, 0x02	; 2
 9e2:	30 40       	sbci	r19, 0x00	; 0
 9e4:	3a f4       	brpl	.+14     	; 0x9f4 <jumpCheckSiam+0xec>
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	90 93 87 00 	sts	0x0087, r25
 9ee:	80 93 86 00 	sts	0x0086, r24
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <jumpCheckSiam+0xfa>
	
	if(siam.baseRo >= 15) {
 9f4:	8f 30       	cpi	r24, 0x0F	; 15
 9f6:	91 05       	cpc	r25, r1
 9f8:	24 f0       	brlt	.+8      	; 0xa02 <jumpCheckSiam+0xfa>
		killSiam();
 9fa:	0e 94 78 04 	call	0x8f0	; 0x8f0 <killSiam>
		recoverSiam();
 9fe:	0e 94 6d 04 	call	0x8da	; 0x8da <recoverSiam>
	}		
	
}
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	1f 91       	pop	r17
 a08:	0f 91       	pop	r16
 a0a:	08 95       	ret

00000a0c <UpdateSiam>:
void UpdateSiam() {
	
	if(siam.lifeLeft == 0) return;
 a0c:	80 91 8c 00 	lds	r24, 0x008C
 a10:	90 91 8d 00 	lds	r25, 0x008D
 a14:	00 97       	sbiw	r24, 0x00	; 0
 a16:	09 f4       	brne	.+2      	; 0xa1a <UpdateSiam+0xe>
 a18:	51 c0       	rjmp	.+162    	; 0xabc <UpdateSiam+0xb0>
	
	jumpCheckSiam();
 a1a:	0e 94 84 04 	call	0x908	; 0x908 <jumpCheckSiam>
	}
	*/
	
	for(int i =0 ; i < SIAM_HEIGHT; i ++ ) {
		
		pattern[siam.baseRo-i][siam.baseCol] = 2;
 a1e:	60 91 86 00 	lds	r22, 0x0086
 a22:	70 91 87 00 	lds	r23, 0x0087
 a26:	40 91 88 00 	lds	r20, 0x0088
 a2a:	50 91 89 00 	lds	r21, 0x0089
 a2e:	fb 01       	movw	r30, r22
 a30:	e2 95       	swap	r30
 a32:	f2 95       	swap	r31
 a34:	f0 7f       	andi	r31, 0xF0	; 240
 a36:	fe 27       	eor	r31, r30
 a38:	e0 7f       	andi	r30, 0xF0	; 240
 a3a:	fe 27       	eor	r31, r30
 a3c:	e4 0f       	add	r30, r20
 a3e:	f5 1f       	adc	r31, r21
 a40:	2e e8       	ldi	r18, 0x8E	; 142
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	ee 0f       	add	r30, r30
 a46:	ff 1f       	adc	r31, r31
 a48:	e2 0f       	add	r30, r18
 a4a:	f3 1f       	adc	r31, r19
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	91 83       	std	Z+1, r25	; 0x01
 a52:	80 83       	st	Z, r24
 a54:	fb 01       	movw	r30, r22
 a56:	31 97       	sbiw	r30, 0x01	; 1
 a58:	e2 95       	swap	r30
 a5a:	f2 95       	swap	r31
 a5c:	f0 7f       	andi	r31, 0xF0	; 240
 a5e:	fe 27       	eor	r31, r30
 a60:	e0 7f       	andi	r30, 0xF0	; 240
 a62:	fe 27       	eor	r31, r30
 a64:	e4 0f       	add	r30, r20
 a66:	f5 1f       	adc	r31, r21
 a68:	ee 0f       	add	r30, r30
 a6a:	ff 1f       	adc	r31, r31
 a6c:	e2 0f       	add	r30, r18
 a6e:	f3 1f       	adc	r31, r19
 a70:	91 83       	std	Z+1, r25	; 0x01
 a72:	80 83       	st	Z, r24
 a74:	62 50       	subi	r22, 0x02	; 2
 a76:	70 40       	sbci	r23, 0x00	; 0
 a78:	62 95       	swap	r22
 a7a:	72 95       	swap	r23
 a7c:	70 7f       	andi	r23, 0xF0	; 240
 a7e:	76 27       	eor	r23, r22
 a80:	60 7f       	andi	r22, 0xF0	; 240
 a82:	76 27       	eor	r23, r22
 a84:	46 0f       	add	r20, r22
 a86:	57 1f       	adc	r21, r23
 a88:	44 0f       	add	r20, r20
 a8a:	55 1f       	adc	r21, r21
 a8c:	24 0f       	add	r18, r20
 a8e:	35 1f       	adc	r19, r21
 a90:	f9 01       	movw	r30, r18
 a92:	91 83       	std	Z+1, r25	; 0x01
 a94:	80 83       	st	Z, r24
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
 a96:	20 91 8c 00 	lds	r18, 0x008C
 a9a:	30 91 8d 00 	lds	r19, 0x008D
 a9e:	12 16       	cp	r1, r18
 aa0:	13 06       	cpc	r1, r19
 aa2:	64 f4       	brge	.+24     	; 0xabc <UpdateSiam+0xb0>
 aa4:	ee ea       	ldi	r30, 0xAE	; 174
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
		killSiam();
		recoverSiam();
	}		
	
}
void UpdateSiam() {
 aa8:	80 e0       	ldi	r24, 0x00	; 0
 aaa:	90 e0       	ldi	r25, 0x00	; 0
		pattern[siam.baseRo-i][siam.baseCol] = 2;
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
		pattern[0][15-i] = 2;
 aac:	42 e0       	ldi	r20, 0x02	; 2
 aae:	50 e0       	ldi	r21, 0x00	; 0
 ab0:	52 93       	st	-Z, r21
 ab2:	42 93       	st	-Z, r20
		
		pattern[siam.baseRo-i][siam.baseCol] = 2;
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	82 17       	cp	r24, r18
 ab8:	93 07       	cpc	r25, r19
 aba:	d4 f3       	brlt	.-12     	; 0xab0 <UpdateSiam+0xa4>
 abc:	08 95       	ret

00000abe <portInit>:

void portInit() {
	
		
	//PORTA = row(A0 to A3)
	DDRA = 0xFF;
 abe:	8f ef       	ldi	r24, 0xFF	; 255
 ac0:	8a bb       	out	0x1a, r24	; 26
	
	//PORTD = column ; red -> D0 to D7 ; green -> D8 to D15
	DDRD = 0xFF;
 ac2:	81 bb       	out	0x11, r24	; 17
	
	//PORTC -> last 2 bit controls color C0 -> greeen C1 -> red
	DDRC = 0xFF;
 ac4:	84 bb       	out	0x14, r24	; 20
	
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11110100;	
 ac6:	84 ef       	ldi	r24, 0xF4	; 244
 ac8:	87 bb       	out	0x17, r24	; 23
}
 aca:	08 95       	ret

00000acc <jump_condition_found>:


int jump_condition_found() {
	
	if(siam.lifeLeft > 0 && pattern[siam.baseRo + 1][siam.baseCol]  && bit_is_set(PINB, 1) && jump_delay == 0 ) return 1;
 acc:	80 91 8c 00 	lds	r24, 0x008C
 ad0:	90 91 8d 00 	lds	r25, 0x008D
 ad4:	18 16       	cp	r1, r24
 ad6:	19 06       	cpc	r1, r25
 ad8:	34 f5       	brge	.+76     	; 0xb26 <jump_condition_found+0x5a>
 ada:	e0 91 86 00 	lds	r30, 0x0086
 ade:	f0 91 87 00 	lds	r31, 0x0087
 ae2:	31 96       	adiw	r30, 0x01	; 1
 ae4:	e2 95       	swap	r30
 ae6:	f2 95       	swap	r31
 ae8:	f0 7f       	andi	r31, 0xF0	; 240
 aea:	fe 27       	eor	r31, r30
 aec:	e0 7f       	andi	r30, 0xF0	; 240
 aee:	fe 27       	eor	r31, r30
 af0:	80 91 88 00 	lds	r24, 0x0088
 af4:	90 91 89 00 	lds	r25, 0x0089
 af8:	e8 0f       	add	r30, r24
 afa:	f9 1f       	adc	r31, r25
 afc:	ee 0f       	add	r30, r30
 afe:	ff 1f       	adc	r31, r31
 b00:	e2 57       	subi	r30, 0x72	; 114
 b02:	ff 4f       	sbci	r31, 0xFF	; 255
 b04:	80 81       	ld	r24, Z
 b06:	91 81       	ldd	r25, Z+1	; 0x01
 b08:	00 97       	sbiw	r24, 0x00	; 0
 b0a:	81 f0       	breq	.+32     	; 0xb2c <jump_condition_found+0x60>
 b0c:	b1 9b       	sbis	0x16, 1	; 22
 b0e:	11 c0       	rjmp	.+34     	; 0xb32 <jump_condition_found+0x66>
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11110100;	
}


int jump_condition_found() {
 b10:	21 e0       	ldi	r18, 0x01	; 1
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	80 91 06 08 	lds	r24, 0x0806
 b18:	90 91 07 08 	lds	r25, 0x0807
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	59 f0       	breq	.+22     	; 0xb36 <jump_condition_found+0x6a>
 b20:	20 e0       	ldi	r18, 0x00	; 0
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	08 c0       	rjmp	.+16     	; 0xb36 <jump_condition_found+0x6a>
	
	if(siam.lifeLeft > 0 && pattern[siam.baseRo + 1][siam.baseCol]  && bit_is_set(PINB, 1) && jump_delay == 0 ) return 1;
	return 0;
 b26:	20 e0       	ldi	r18, 0x00	; 0
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	05 c0       	rjmp	.+10     	; 0xb36 <jump_condition_found+0x6a>
 b2c:	20 e0       	ldi	r18, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <jump_condition_found+0x6a>
 b32:	20 e0       	ldi	r18, 0x00	; 0
 b34:	30 e0       	ldi	r19, 0x00	; 0
}
 b36:	82 2f       	mov	r24, r18
 b38:	93 2f       	mov	r25, r19
 b3a:	08 95       	ret

00000b3c <jumpUp>:

void jumpUp() {
	siam.jmpLeft = JUMP_HEIGHT;
 b3c:	86 e0       	ldi	r24, 0x06	; 6
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	90 93 8b 00 	sts	0x008B, r25
 b44:	80 93 8a 00 	sts	0x008A, r24
}
 b48:	08 95       	ret

00000b4a <moveRight>:


void moveRight() { 
	nowCol++;	
 b4a:	80 91 64 00 	lds	r24, 0x0064
 b4e:	90 91 65 00 	lds	r25, 0x0065
 b52:	01 96       	adiw	r24, 0x01	; 1
 b54:	90 93 65 00 	sts	0x0065, r25
 b58:	80 93 64 00 	sts	0x0064, r24
}
 b5c:	08 95       	ret

00000b5e <shoot>:



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
		if(bullet[i].alive ) continue;
 b5e:	80 91 6a 00 	lds	r24, 0x006A
 b62:	90 91 6b 00 	lds	r25, 0x006B
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	79 f0       	breq	.+30     	; 0xb88 <shoot+0x2a>
 b6a:	e0 e7       	ldi	r30, 0x70	; 112
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
}



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	90 e0       	ldi	r25, 0x00	; 0
		if(bullet[i].alive ) continue;
 b72:	20 81       	ld	r18, Z
 b74:	31 81       	ldd	r19, Z+1	; 0x01
 b76:	21 15       	cp	r18, r1
 b78:	31 05       	cpc	r19, r1
 b7a:	41 f0       	breq	.+16     	; 0xb8c <shoot+0x2e>
}



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	36 96       	adiw	r30, 0x06	; 6
 b80:	85 30       	cpi	r24, 0x05	; 5
 b82:	91 05       	cpc	r25, r1
 b84:	b1 f7       	brne	.-20     	; 0xb72 <shoot+0x14>
 b86:	08 95       	ret
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	90 e0       	ldi	r25, 0x00	; 0
		if(bullet[i].alive ) continue;
		bullet[i].alive = 1;
 b8c:	fc 01       	movw	r30, r24
 b8e:	ee 0f       	add	r30, r30
 b90:	ff 1f       	adc	r31, r31
 b92:	8e 0f       	add	r24, r30
 b94:	9f 1f       	adc	r25, r31
 b96:	fc 01       	movw	r30, r24
 b98:	ee 0f       	add	r30, r30
 b9a:	ff 1f       	adc	r31, r31
 b9c:	ea 59       	subi	r30, 0x9A	; 154
 b9e:	ff 4f       	sbci	r31, 0xFF	; 255
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	95 83       	std	Z+5, r25	; 0x05
 ba6:	84 83       	std	Z+4, r24	; 0x04
		bullet[i].ro = siam.baseRo-1 ;
 ba8:	80 91 86 00 	lds	r24, 0x0086
 bac:	90 91 87 00 	lds	r25, 0x0087
 bb0:	01 97       	sbiw	r24, 0x01	; 1
 bb2:	91 83       	std	Z+1, r25	; 0x01
 bb4:	80 83       	st	Z, r24
		bullet[i].col = nowCol;
 bb6:	80 91 64 00 	lds	r24, 0x0064
 bba:	90 91 65 00 	lds	r25, 0x0065
 bbe:	93 83       	std	Z+3, r25	; 0x03
 bc0:	82 83       	std	Z+2, r24	; 0x02
 bc2:	08 95       	ret

00000bc4 <main>:
	}
}


int main()
{
 bc4:	ef 92       	push	r14
 bc6:	ff 92       	push	r15
 bc8:	0f 93       	push	r16
 bca:	1f 93       	push	r17
 bcc:	cf 93       	push	r28
 bce:	df 93       	push	r29
	
	portInit();	
 bd0:	0e 94 5f 05 	call	0xabe	; 0xabe <portInit>
	
	setGreenBars();
 bd4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setGreenBars>
	setEnemies();
 bd8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <setEnemies>
	setSiam();
 bdc:	0e 94 88 01 	call	0x310	; 0x310 <setSiam>
	
	while(1) {
		game_delay++;
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 be0:	c4 e0       	ldi	r28, 0x04	; 4
 be2:	d0 e0       	ldi	r29, 0x00	; 0
		jump_delay %= JUMP_DELAY_VAL;
 be4:	02 e0       	ldi	r16, 0x02	; 2
 be6:	10 e0       	ldi	r17, 0x00	; 0
		UpdateEnemies();
		
		
		printScreen();
		
		if(siam.lifeLeft == 0 ) continue;
 be8:	0f 2e       	mov	r0, r31
 bea:	fc e8       	ldi	r31, 0x8C	; 140
 bec:	ef 2e       	mov	r14, r31
 bee:	f0 e0       	ldi	r31, 0x00	; 0
 bf0:	ff 2e       	mov	r15, r31
 bf2:	f0 2d       	mov	r31, r0
	setEnemies();
	setSiam();
	
	while(1) {
		game_delay++;
		jump_delay++;
 bf4:	20 91 06 08 	lds	r18, 0x0806
 bf8:	30 91 07 08 	lds	r19, 0x0807
 bfc:	2f 5f       	subi	r18, 0xFF	; 255
 bfe:	3f 4f       	sbci	r19, 0xFF	; 255
	setGreenBars();
	setEnemies();
	setSiam();
	
	while(1) {
		game_delay++;
 c00:	80 91 84 00 	lds	r24, 0x0084
 c04:	90 91 85 00 	lds	r25, 0x0085
 c08:	01 96       	adiw	r24, 0x01	; 1
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 c0a:	be 01       	movw	r22, r28
 c0c:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divmodhi4>
 c10:	90 93 85 00 	sts	0x0085, r25
 c14:	80 93 84 00 	sts	0x0084, r24
		jump_delay %= JUMP_DELAY_VAL;
 c18:	c9 01       	movw	r24, r18
 c1a:	b8 01       	movw	r22, r16
 c1c:	0e 94 3c 06 	call	0xc78	; 0xc78 <__divmodhi4>
 c20:	90 93 07 08 	sts	0x0807, r25
 c24:	80 93 06 08 	sts	0x0806, r24
		
		UpdateGreenBars();
 c28:	0e 94 25 02 	call	0x44a	; 0x44a <UpdateGreenBars>
		UpdateBullet();
 c2c:	0e 94 ce 03 	call	0x79c	; 0x79c <UpdateBullet>
		
		UpdateSiam();//ALWAYS UPDATE SIAM & enemies AFTER GREEN BARS
 c30:	0e 94 06 05 	call	0xa0c	; 0xa0c <UpdateSiam>
		UpdateEnemies();
 c34:	0e 94 52 03 	call	0x6a4	; 0x6a4 <UpdateEnemies>
		
		
		printScreen();
 c38:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(siam.lifeLeft == 0 ) continue;
 c3c:	f7 01       	movw	r30, r14
 c3e:	80 81       	ld	r24, Z
 c40:	91 81       	ldd	r25, Z+1	; 0x01
 c42:	00 97       	sbiw	r24, 0x00	; 0
 c44:	b9 f2       	breq	.-82     	; 0xbf4 <main+0x30>
		
		if(right_move_condition_found()) {
 c46:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <right_move_condition_found>
 c4a:	00 97       	sbiw	r24, 0x00	; 0
 c4c:	11 f0       	breq	.+4      	; 0xc52 <main+0x8e>
			moveRight();
 c4e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <moveRight>
		}
		printScreen();
 c52:	0e 94 56 00 	call	0xac	; 0xac <printScreen>

		if(jump_condition_found()) {
 c56:	0e 94 66 05 	call	0xacc	; 0xacc <jump_condition_found>
 c5a:	00 97       	sbiw	r24, 0x00	; 0
 c5c:	11 f0       	breq	.+4      	; 0xc62 <main+0x9e>
			jumpUp();
 c5e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <jumpUp>
		}
		
		printScreen();
 c62:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(shoot_condition_found()) {
 c66:	0e 94 66 04 	call	0x8cc	; 0x8cc <shoot_condition_found>
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	11 f0       	breq	.+4      	; 0xc72 <main+0xae>
			shoot();
 c6e:	0e 94 af 05 	call	0xb5e	; 0xb5e <shoot>
		}
		
		printScreen();
 c72:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
 c76:	be cf       	rjmp	.-132    	; 0xbf4 <main+0x30>

00000c78 <__divmodhi4>:
 c78:	97 fb       	bst	r25, 7
 c7a:	09 2e       	mov	r0, r25
 c7c:	07 26       	eor	r0, r23
 c7e:	0a d0       	rcall	.+20     	; 0xc94 <__divmodhi4_neg1>
 c80:	77 fd       	sbrc	r23, 7
 c82:	04 d0       	rcall	.+8      	; 0xc8c <__divmodhi4_neg2>
 c84:	0c d0       	rcall	.+24     	; 0xc9e <__udivmodhi4>
 c86:	06 d0       	rcall	.+12     	; 0xc94 <__divmodhi4_neg1>
 c88:	00 20       	and	r0, r0
 c8a:	1a f4       	brpl	.+6      	; 0xc92 <__divmodhi4_exit>

00000c8c <__divmodhi4_neg2>:
 c8c:	70 95       	com	r23
 c8e:	61 95       	neg	r22
 c90:	7f 4f       	sbci	r23, 0xFF	; 255

00000c92 <__divmodhi4_exit>:
 c92:	08 95       	ret

00000c94 <__divmodhi4_neg1>:
 c94:	f6 f7       	brtc	.-4      	; 0xc92 <__divmodhi4_exit>
 c96:	90 95       	com	r25
 c98:	81 95       	neg	r24
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	08 95       	ret

00000c9e <__udivmodhi4>:
 c9e:	aa 1b       	sub	r26, r26
 ca0:	bb 1b       	sub	r27, r27
 ca2:	51 e1       	ldi	r21, 0x11	; 17
 ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <__udivmodhi4_ep>

00000ca6 <__udivmodhi4_loop>:
 ca6:	aa 1f       	adc	r26, r26
 ca8:	bb 1f       	adc	r27, r27
 caa:	a6 17       	cp	r26, r22
 cac:	b7 07       	cpc	r27, r23
 cae:	10 f0       	brcs	.+4      	; 0xcb4 <__udivmodhi4_ep>
 cb0:	a6 1b       	sub	r26, r22
 cb2:	b7 0b       	sbc	r27, r23

00000cb4 <__udivmodhi4_ep>:
 cb4:	88 1f       	adc	r24, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	5a 95       	dec	r21
 cba:	a9 f7       	brne	.-22     	; 0xca6 <__udivmodhi4_loop>
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	bc 01       	movw	r22, r24
 cc2:	cd 01       	movw	r24, r26
 cc4:	08 95       	ret

00000cc6 <_exit>:
 cc6:	f8 94       	cli

00000cc8 <__stop_program>:
 cc8:	ff cf       	rjmp	.-2      	; 0xcc8 <__stop_program>
