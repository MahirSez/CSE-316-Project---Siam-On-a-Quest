
Siam On a Quest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000cc4  00000d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a6  00800064  00800064  00000d5c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002e6  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a4a  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002bc  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000bbd  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ed  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000609  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000005c  00000000  00000000  00003c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  00003cf6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	18 e0       	ldi	r17, 0x08	; 8
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 30       	cpi	r26, 0x0A	; 10
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 df 05 	call	0xbbe	; 0xbbe <main>
  8a:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enableRed>:
int game_delay , jump_delay;
int currentGreenBar;

void enableRed() {
	
	PORTC &= 0b11111101;
  92:	a9 98       	cbi	0x15, 1	; 21
	PORTC |= 0b00000001;	
  94:	a8 9a       	sbi	0x15, 0	; 21
}
  96:	08 95       	ret

00000098 <disableRed>:

void disableRed()
{
	PORTC |= 0x02;
  98:	a9 9a       	sbi	0x15, 1	; 21
	PORTC |= 0x01;	
  9a:	a8 9a       	sbi	0x15, 0	; 21
}
  9c:	08 95       	ret

0000009e <enableGreen>:
void enableGreen() {
	
	PORTC &= 0b11111110;
  9e:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= 0b00000010;
  a0:	a9 9a       	sbi	0x15, 1	; 21
}
  a2:	08 95       	ret

000000a4 <disableGreen>:
void disableGreen()
{
	PORTC |= 0x03;
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	83 60       	ori	r24, 0x03	; 3
  a8:	85 bb       	out	0x15, r24	; 21
}
  aa:	08 95       	ret

000000ac <printScreen>:


void printScreen() {
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	
	for(int r = 0; r < 16; r++){
  bc:	ee 24       	eor	r14, r14
  be:	ff 24       	eor	r15, r15
		PORTA = r;
		for(int c = 0; c < 16; c++){
  c0:	cc 24       	eor	r12, r12
  c2:	dd 24       	eor	r13, r13


void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
  c4:	eb ba       	out	0x1b, r14	; 27
{
	PORTC |= 0x03;
}


void printScreen() {
  c6:	87 01       	movw	r16, r14
  c8:	00 0f       	add	r16, r16
  ca:	11 1f       	adc	r17, r17
  cc:	02 95       	swap	r16
  ce:	12 95       	swap	r17
  d0:	10 7f       	andi	r17, 0xF0	; 240
  d2:	10 27       	eor	r17, r16
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	10 27       	eor	r17, r16
  d8:	02 57       	subi	r16, 0x72	; 114
  da:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
  dc:	e6 01       	movw	r28, r12
			if(pattern[r][c] == 1) {
  de:	f8 01       	movw	r30, r16
  e0:	81 91       	ld	r24, Z+
  e2:	91 91       	ld	r25, Z+
  e4:	8f 01       	movw	r16, r30
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	91 05       	cpc	r25, r1
  ea:	49 f4       	brne	.+18     	; 0xfe <printScreen+0x52>
				disableRed();
  ec:	0e 94 4c 00 	call	0x98	; 0x98 <disableRed>
				PORTD = (c<<4);
  f0:	9e 01       	movw	r18, r28
  f2:	22 95       	swap	r18
  f4:	20 7f       	andi	r18, 0xF0	; 240
  f6:	22 bb       	out	0x12, r18	; 18
				enableGreen();
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <enableGreen>
  fc:	0b c0       	rjmp	.+22     	; 0x114 <printScreen+0x68>
				
			}
			else if( pattern[r][c] >= 2 ){
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	91 05       	cpc	r25, r1
 102:	34 f0       	brlt	.+12     	; 0x110 <printScreen+0x64>
				disableGreen();
 104:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
				PORTD = (c);
 108:	c2 bb       	out	0x12, r28	; 18
				enableRed();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <enableRed>
 10e:	02 c0       	rjmp	.+4      	; 0x114 <printScreen+0x68>
			}
			else disableGreen();
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>

void printScreen() {
	
	for(int r = 0; r < 16; r++){
		PORTA = r;
		for(int c = 0; c < 16; c++){
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c0 31       	cpi	r28, 0x10	; 16
 118:	d1 05       	cpc	r29, r1
 11a:	09 f7       	brne	.-62     	; 0xde <printScreen+0x32>
				enableRed();
			}
			else disableGreen();
			
		}
		disableGreen();
 11c:	0e 94 52 00 	call	0xa4	; 0xa4 <disableGreen>
}


void printScreen() {
	
	for(int r = 0; r < 16; r++){
 120:	08 94       	sec
 122:	e1 1c       	adc	r14, r1
 124:	f1 1c       	adc	r15, r1
 126:	90 e1       	ldi	r25, 0x10	; 16
 128:	e9 16       	cp	r14, r25
 12a:	f1 04       	cpc	r15, r1
 12c:	59 f6       	brne	.-106    	; 0xc4 <printScreen+0x18>
			else disableGreen();
			
		}
		disableGreen();
	}
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	08 95       	ret

00000140 <printErrorBar>:

void printErrorBar() {
	
	for(int i = 4 ; i < 10 ; i++ ) {
		pattern[3][i] = 2;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 f7 00 	sts	0x00F7, r25
 148:	80 93 f6 00 	sts	0x00F6, r24
 14c:	90 93 f9 00 	sts	0x00F9, r25
 150:	80 93 f8 00 	sts	0x00F8, r24
 154:	90 93 fb 00 	sts	0x00FB, r25
 158:	80 93 fa 00 	sts	0x00FA, r24
 15c:	90 93 fd 00 	sts	0x00FD, r25
 160:	80 93 fc 00 	sts	0x00FC, r24
 164:	90 93 ff 00 	sts	0x00FF, r25
 168:	80 93 fe 00 	sts	0x00FE, r24
 16c:	90 93 01 01 	sts	0x0101, r25
 170:	80 93 00 01 	sts	0x0100, r24
	}
}
 174:	08 95       	ret

00000176 <printGreen>:

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	30 e0       	ldi	r19, 0x00	; 0
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
 17e:	2b bb       	out	0x1b, r18	; 27
		for(int j =0 ; j < 16 ; j++ ) {	
 180:	ca 01       	movw	r24, r20
			PORTD = ( j <<4);
 182:	68 2f       	mov	r22, r24
 184:	62 95       	swap	r22
 186:	60 7f       	andi	r22, 0xF0	; 240
 188:	62 bb       	out	0x12, r22	; 18
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	91 05       	cpc	r25, r1
 190:	c1 f7       	brne	.-16     	; 0x182 <printGreen+0xc>
		pattern[3][i] = 2;
	}
}

void printGreen() {	
	for(int i =0 ; i < 16 ; i++ ) {	
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	20 31       	cpi	r18, 0x10	; 16
 198:	31 05       	cpc	r19, r1
 19a:	89 f7       	brne	.-30     	; 0x17e <printGreen+0x8>
		PORTA = i;
		for(int j =0 ; j < 16 ; j++ ) {	
			PORTD = ( j <<4);
		}
	}
}
 19c:	08 95       	ret

0000019e <printRed>:

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	50 e0       	ldi	r21, 0x00	; 0

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
 1a6:	1b ba       	out	0x1b, r1	; 27
		
		for(int j =0 ; j < 16 ; j++ ) {
 1a8:	ca 01       	movw	r24, r20
			
			PORTD = ( j );
 1aa:	82 bb       	out	0x12, r24	; 18
	for(int i =0 ; i < 16 ; i++ ) {
		
			
		PORTA = 0;
		
		for(int j =0 ; j < 16 ; j++ ) {
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	80 31       	cpi	r24, 0x10	; 16
 1b0:	91 05       	cpc	r25, r1
 1b2:	d9 f7       	brne	.-10     	; 0x1aa <printRed+0xc>
		}
	}
}

void printRed() {	
	for(int i =0 ; i < 16 ; i++ ) {
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	20 31       	cpi	r18, 0x10	; 16
 1ba:	31 05       	cpc	r19, r1
 1bc:	a1 f7       	brne	.-24     	; 0x1a6 <printRed+0x8>
		for(int j =0 ; j < 16 ; j++ ) {
			
			PORTD = ( j );
		}
	}
}
 1be:	08 95       	ret

000001c0 <buzzerSound>:

void buzzerSound() {
	
	
	PORTB |= 0x04;
 1c0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	87 ea       	ldi	r24, 0xA7	; 167
 1c4:	91 e6       	ldi	r25, 0x61	; 97
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <buzzerSound+0x6>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <buzzerSound+0xc>
 1cc:	00 00       	nop
	_delay_ms(100);
	PORTB  = 0;
 1ce:	18 ba       	out	0x18, r1	; 24
}
 1d0:	08 95       	ret

000001d2 <setGreenBars>:

struct Bullet {
	
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 1e2:	e8 e8       	ldi	r30, 0x88	; 136
 1e4:	f2 e0       	ldi	r31, 0x02	; 2
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
		if(i %3 == 0 ) bars[i].ro = 14;
 1ea:	c3 e0       	ldi	r28, 0x03	; 3
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
		else if(i %3 == 1 ) bars[i].ro = 10;
		else if(i %3 == 2 ) bars[i].ro = 8;
 1ee:	cc 24       	eor	r12, r12
 1f0:	dd 24       	eor	r13, r13
 1f2:	68 94       	set
 1f4:	c3 f8       	bld	r12, 3
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
		else if(i %3 == 1 ) bars[i].ro = 10;
 1f6:	0a e0       	ldi	r16, 0x0A	; 10
 1f8:	10 e0       	ldi	r17, 0x00	; 0
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
		if(i %3 == 0 ) bars[i].ro = 14;
 1fa:	0f 2e       	mov	r0, r31
 1fc:	fe e0       	ldi	r31, 0x0E	; 14
 1fe:	ef 2e       	mov	r14, r31
 200:	ff 24       	eor	r15, r15
 202:	f0 2d       	mov	r31, r0
 204:	c9 01       	movw	r24, r18
 206:	be 01       	movw	r22, r28
 208:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodhi4>
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	19 f4       	brne	.+6      	; 0x216 <setGreenBars+0x44>
 210:	f1 86       	std	Z+9, r15	; 0x09
 212:	e0 86       	std	Z+8, r14	; 0x08
 214:	0b c0       	rjmp	.+22     	; 0x22c <setGreenBars+0x5a>
		else if(i %3 == 1 ) bars[i].ro = 10;
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 05       	cpc	r25, r1
 21a:	19 f4       	brne	.+6      	; 0x222 <setGreenBars+0x50>
 21c:	11 87       	std	Z+9, r17	; 0x09
 21e:	00 87       	std	Z+8, r16	; 0x08
 220:	05 c0       	rjmp	.+10     	; 0x22c <setGreenBars+0x5a>
		else if(i %3 == 2 ) bars[i].ro = 8;
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	91 05       	cpc	r25, r1
 226:	11 f4       	brne	.+4      	; 0x22c <setGreenBars+0x5a>
 228:	d1 86       	std	Z+9, r13	; 0x09
 22a:	c0 86       	std	Z+8, r12	; 0x08
		
		if(i > 0 && i%3 == 0) bars[i].col = bars[i-1].col + bars[i-1].len  ;
 22c:	12 16       	cp	r1, r18
 22e:	13 06       	cpc	r1, r19
 230:	3c f5       	brge	.+78     	; 0x280 <setGreenBars+0xae>
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	49 f4       	brne	.+18     	; 0x248 <setGreenBars+0x76>
 236:	40 81       	ld	r20, Z
 238:	51 81       	ldd	r21, Z+1	; 0x01
 23a:	84 81       	ldd	r24, Z+4	; 0x04
 23c:	95 81       	ldd	r25, Z+5	; 0x05
 23e:	84 0f       	add	r24, r20
 240:	95 1f       	adc	r25, r21
 242:	93 87       	std	Z+11, r25	; 0x0b
 244:	82 87       	std	Z+10, r24	; 0x0a
 246:	1e c0       	rjmp	.+60     	; 0x284 <setGreenBars+0xb2>
		else if( i > 0  && i %3 == 1) bars[i].col = bars[i-1].col + bars[i-1].len +2 ;
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	91 05       	cpc	r25, r1
 24c:	59 f4       	brne	.+22     	; 0x264 <setGreenBars+0x92>
 24e:	64 81       	ldd	r22, Z+4	; 0x04
 250:	75 81       	ldd	r23, Z+5	; 0x05
 252:	40 81       	ld	r20, Z
 254:	51 81       	ldd	r21, Z+1	; 0x01
 256:	46 0f       	add	r20, r22
 258:	57 1f       	adc	r21, r23
 25a:	4e 5f       	subi	r20, 0xFE	; 254
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	53 87       	std	Z+11, r21	; 0x0b
 260:	42 87       	std	Z+10, r20	; 0x0a
 262:	13 c0       	rjmp	.+38     	; 0x28a <setGreenBars+0xb8>
		else if( i > 0 && i%3 == 2) bars[i].col = bars[i-1].col + bars[i-1].len + 3 ;
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	91 05       	cpc	r25, r1
 268:	81 f4       	brne	.+32     	; 0x28a <setGreenBars+0xb8>
 26a:	64 81       	ldd	r22, Z+4	; 0x04
 26c:	75 81       	ldd	r23, Z+5	; 0x05
 26e:	40 81       	ld	r20, Z
 270:	51 81       	ldd	r21, Z+1	; 0x01
 272:	46 0f       	add	r20, r22
 274:	57 1f       	adc	r21, r23
 276:	4d 5f       	subi	r20, 0xFD	; 253
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	53 87       	std	Z+11, r21	; 0x0b
 27c:	42 87       	std	Z+10, r20	; 0x0a
 27e:	05 c0       	rjmp	.+10     	; 0x28a <setGreenBars+0xb8>
		
		
		if(i %3 == 0 ) bars[i].len = 10;
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	19 f4       	brne	.+6      	; 0x28a <setGreenBars+0xb8>
 284:	17 83       	std	Z+7, r17	; 0x07
 286:	06 83       	std	Z+6, r16	; 0x06
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <setGreenBars+0xce>
		else if(i %3 == 1 ) bars[i].len = 10;
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	91 05       	cpc	r25, r1
 28e:	19 f4       	brne	.+6      	; 0x296 <setGreenBars+0xc4>
 290:	17 83       	std	Z+7, r17	; 0x07
 292:	06 83       	std	Z+6, r16	; 0x06
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <setGreenBars+0xce>
		else if(i %3 == 2 ) bars[i].len = 10;
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <setGreenBars+0xce>
 29c:	17 83       	std	Z+7, r17	; 0x07
 29e:	06 83       	std	Z+6, r16	; 0x06
	
	int ro , col , alive;
}bullet[5];
void setGreenBars() {
		
	for(int i =0 ; i < totGreenBar ; i++ ) {
 2a0:	2f 5f       	subi	r18, 0xFF	; 255
 2a2:	3f 4f       	sbci	r19, 0xFF	; 255
 2a4:	36 96       	adiw	r30, 0x06	; 6
 2a6:	24 36       	cpi	r18, 0x64	; 100
 2a8:	31 05       	cpc	r19, r1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <setGreenBars+0xdc>
 2ac:	ab cf       	rjmp	.-170    	; 0x204 <setGreenBars+0x32>
		if(i %3 == 0 ) bars[i].len = 10;
		else if(i %3 == 1 ) bars[i].len = 10;
		else if(i %3 == 2 ) bars[i].len = 10;
		
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	08 95       	ret

000002c0 <setEnemies>:


void setEnemies() {
 2c0:	ae e8       	ldi	r26, 0x8E	; 142
 2c2:	b2 e0       	ldi	r27, 0x02	; 2
 2c4:	e6 ee       	ldi	r30, 0xE6	; 230
 2c6:	f4 e0       	ldi	r31, 0x04	; 4
 2c8:	46 ee       	ldi	r20, 0xE6	; 230
 2ca:	54 e0       	ldi	r21, 0x04	; 4
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
		
		enemy[i].baseRo = bars[i].ro-1;
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
		enemy[i].lifeLeft = 1;
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0

void setEnemies() {
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
		
		enemy[i].baseRo = bars[i].ro-1;
 2d0:	12 96       	adiw	r26, 0x02	; 2
 2d2:	8d 91       	ld	r24, X+
 2d4:	9c 91       	ld	r25, X
 2d6:	13 97       	sbiw	r26, 0x03	; 3
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	80 83       	st	Z, r24
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
 2de:	14 96       	adiw	r26, 0x04	; 4
 2e0:	6d 91       	ld	r22, X+
 2e2:	7c 91       	ld	r23, X
 2e4:	15 97       	sbiw	r26, 0x05	; 5
 2e6:	8d 91       	ld	r24, X+
 2e8:	9c 91       	ld	r25, X
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	86 0f       	add	r24, r22
 2ee:	97 1f       	adc	r25, r23
 2f0:	05 97       	sbiw	r24, 0x05	; 5
 2f2:	93 83       	std	Z+3, r25	; 0x03
 2f4:	82 83       	std	Z+2, r24	; 0x02
		enemy[i].lifeLeft = 1;
 2f6:	37 83       	std	Z+7, r19	; 0x07
 2f8:	26 83       	std	Z+6, r18	; 0x06
		enemy[i].jmpLeft = 0;
 2fa:	15 82       	std	Z+5, r1	; 0x05
 2fc:	14 82       	std	Z+4, r1	; 0x04
 2fe:	16 96       	adiw	r26, 0x06	; 6
 300:	38 96       	adiw	r30, 0x08	; 8
}


void setEnemies() {
	
	for(int i =0 ; i < totGreenBar ; i++ ) {
 302:	a4 17       	cp	r26, r20
 304:	b5 07       	cpc	r27, r21
 306:	21 f7       	brne	.-56     	; 0x2d0 <setEnemies+0x10>
		enemy[i].baseRo = bars[i].ro-1;
		enemy[i].baseCol = bars[i].col + bars[i].len - 5;
		enemy[i].lifeLeft = 1;
		enemy[i].jmpLeft = 0;
	}
}
 308:	08 95       	ret

0000030a <setSiam>:

void setSiam() {
	
	siam.baseRo = 2;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 87 00 	sts	0x0087, r25
 312:	80 93 86 00 	sts	0x0086, r24
	siam.baseCol = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 89 00 	sts	0x0089, r25
 31e:	80 93 88 00 	sts	0x0088, r24
	siam.jmpLeft = 0;
 322:	10 92 8b 00 	sts	0x008B, r1
 326:	10 92 8a 00 	sts	0x008A, r1
	siam.lifeLeft = 7;
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 8d 00 	sts	0x008D, r25
 332:	80 93 8c 00 	sts	0x008C, r24
}
 336:	08 95       	ret

00000338 <barInsideFrame>:



int barInsideFrame(int barID) {
	
	int frm = bars[barID].col;
 338:	9c 01       	movw	r18, r24
 33a:	22 0f       	add	r18, r18
 33c:	33 1f       	adc	r19, r19
 33e:	28 0f       	add	r18, r24
 340:	39 1f       	adc	r19, r25
 342:	f9 01       	movw	r30, r18
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	e2 57       	subi	r30, 0x72	; 114
 34a:	fd 4f       	sbci	r31, 0xFD	; 253
 34c:	84 81       	ldd	r24, Z+4	; 0x04
 34e:	95 81       	ldd	r25, Z+5	; 0x05
	int to = frm + bars[barID].len;
 350:	60 81       	ld	r22, Z
 352:	71 81       	ldd	r23, Z+1	; 0x01
 354:	68 0f       	add	r22, r24
 356:	79 1f       	adc	r23, r25

	int leftFrame = nowCol;
 358:	20 91 64 00 	lds	r18, 0x0064
 35c:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
 360:	a9 01       	movw	r20, r18
 362:	41 5f       	subi	r20, 0xF1	; 241
 364:	5f 4f       	sbci	r21, 0xFF	; 255

	if(frm >= leftFrame && to <= rightFrame) return 1;
 366:	82 17       	cp	r24, r18
 368:	93 07       	cpc	r25, r19
 36a:	34 f0       	brlt	.+12     	; 0x378 <barInsideFrame+0x40>
 36c:	46 17       	cp	r20, r22
 36e:	57 07       	cpc	r21, r23
 370:	8c f4       	brge	.+34     	; 0x394 <barInsideFrame+0x5c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 372:	28 17       	cp	r18, r24
 374:	39 07       	cpc	r19, r25
 376:	1c f0       	brlt	.+6      	; 0x37e <barInsideFrame+0x46>
 378:	62 17       	cp	r22, r18
 37a:	73 07       	cpc	r23, r19
 37c:	74 f4       	brge	.+28     	; 0x39a <barInsideFrame+0x62>
	if(frm <= rightFrame && to >= rightFrame) return 1;
 37e:	48 17       	cp	r20, r24
 380:	59 07       	cpc	r21, r25
 382:	74 f0       	brlt	.+28     	; 0x3a0 <barInsideFrame+0x68>
	siam.lifeLeft = 7;
}



int barInsideFrame(int barID) {
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	64 17       	cp	r22, r20
 38a:	75 07       	cpc	r23, r21
 38c:	5c f4       	brge	.+22     	; 0x3a4 <barInsideFrame+0x6c>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	08 c0       	rjmp	.+16     	; 0x3a4 <barInsideFrame+0x6c>
	int to = frm + bars[barID].len;

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(frm >= leftFrame && to <= rightFrame) return 1;
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <barInsideFrame+0x6c>
	if(frm <= leftFrame && to >= leftFrame) return 1;
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <barInsideFrame+0x6c>
	if(frm <= rightFrame && to >= rightFrame) return 1;

	return 0;
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
}
 3a4:	82 2f       	mov	r24, r18
 3a6:	93 2f       	mov	r25, r19
 3a8:	08 95       	ret

000003aa <setOnPatternArrayBar>:


void setOnPatternArrayBar(int barID) {
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
	
	int barRo = bars[barID].ro;
 3ae:	fc 01       	movw	r30, r24
 3b0:	ee 0f       	add	r30, r30
 3b2:	ff 1f       	adc	r31, r31
 3b4:	e8 0f       	add	r30, r24
 3b6:	f9 1f       	adc	r31, r25
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	e2 57       	subi	r30, 0x72	; 114
 3be:	fd 4f       	sbci	r31, 0xFD	; 253
 3c0:	a2 81       	ldd	r26, Z+2	; 0x02
 3c2:	b3 81       	ldd	r27, Z+3	; 0x03
	int barBeginCol = bars[barID].col;
 3c4:	24 81       	ldd	r18, Z+4	; 0x04
 3c6:	35 81       	ldd	r19, Z+5	; 0x05
	int barEndCol = barBeginCol + bars[barID].len - 1;
	
	int printFrm = nowCol;
 3c8:	40 91 64 00 	lds	r20, 0x0064
 3cc:	50 91 65 00 	lds	r21, 0x0065
 3d0:	ba 01       	movw	r22, r20
 3d2:	42 17       	cp	r20, r18
 3d4:	53 07       	cpc	r21, r19
 3d6:	0c f4       	brge	.+2      	; 0x3da <setOnPatternArrayBar+0x30>
 3d8:	b9 01       	movw	r22, r18
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 3da:	fa 01       	movw	r30, r20
 3dc:	3f 96       	adiw	r30, 0x0f	; 15

void setOnPatternArrayBar(int barID) {
	
	int barRo = bars[barID].ro;
	int barBeginCol = bars[barID].col;
	int barEndCol = barBeginCol + bars[barID].len - 1;
 3de:	ec 01       	movw	r28, r24
 3e0:	cc 0f       	add	r28, r28
 3e2:	dd 1f       	adc	r29, r29
 3e4:	8c 0f       	add	r24, r28
 3e6:	9d 1f       	adc	r25, r29
 3e8:	ec 01       	movw	r28, r24
 3ea:	cc 0f       	add	r28, r28
 3ec:	dd 1f       	adc	r29, r29
 3ee:	c2 57       	subi	r28, 0x72	; 114
 3f0:	dd 4f       	sbci	r29, 0xFD	; 253
 3f2:	88 81       	ld	r24, Y
 3f4:	99 81       	ldd	r25, Y+1	; 0x01
 3f6:	28 0f       	add	r18, r24
 3f8:	39 1f       	adc	r19, r25
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	30 40       	sbci	r19, 0x00	; 0
	
	int printFrm = nowCol;
	if( barBeginCol > printFrm)  printFrm = barBeginCol;
	
	int printTo = nowCol + 15;
 3fe:	e2 17       	cp	r30, r18
 400:	f3 07       	cpc	r31, r19
 402:	0c f4       	brge	.+2      	; 0x406 <setOnPatternArrayBar+0x5c>
 404:	9f 01       	movw	r18, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 406:	26 17       	cp	r18, r22
 408:	37 07       	cpc	r19, r23
 40a:	cc f0       	brlt	.+50     	; 0x43e <setOnPatternArrayBar+0x94>

	return 0;
}


void setOnPatternArrayBar(int barID) {
 40c:	fd 01       	movw	r30, r26
 40e:	e2 95       	swap	r30
 410:	f2 95       	swap	r31
 412:	f0 7f       	andi	r31, 0xF0	; 240
 414:	fe 27       	eor	r31, r30
 416:	e0 7f       	andi	r30, 0xF0	; 240
 418:	fe 27       	eor	r31, r30
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
 41a:	cb 01       	movw	r24, r22
 41c:	84 1b       	sub	r24, r20
 41e:	95 0b       	sbc	r25, r21

	return 0;
}


void setOnPatternArrayBar(int barID) {
 420:	e8 0f       	add	r30, r24
 422:	f9 1f       	adc	r31, r25
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	e2 57       	subi	r30, 0x72	; 114
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 42c:	cb 01       	movw	r24, r22
		pattern[barRo][i - nowCol] = 1;
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	41 93       	st	Z+, r20
 434:	51 93       	st	Z+, r21
	int printTo = nowCol + 15;
	if(barEndCol < printTo  ) printTo = barEndCol;
	
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	28 17       	cp	r18, r24
 43a:	39 07       	cpc	r19, r25
 43c:	d4 f7       	brge	.-12     	; 0x432 <setOnPatternArrayBar+0x88>
		pattern[barRo][i - nowCol] = 1;
	}
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <UpdateGreenBars>:

void UpdateGreenBars() {
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
	
	memset(pattern , 0 , sizeof pattern);
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	ee e8       	ldi	r30, 0x8E	; 142
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	df 01       	movw	r26, r30
 456:	9c 01       	movw	r18, r24
 458:	1d 92       	st	X+, r1
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	30 40       	sbci	r19, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <UpdateGreenBars+0x14>
	int tmp = currentGreenBar;
 460:	c0 91 08 08 	lds	r28, 0x0808
 464:	d0 91 09 08 	lds	r29, 0x0809
	currentGreenBar  = INF;
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	9f e7       	ldi	r25, 0x7F	; 127
 46c:	90 93 09 08 	sts	0x0809, r25
 470:	80 93 08 08 	sts	0x0808, r24
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 474:	ce 01       	movw	r24, r28
 476:	05 96       	adiw	r24, 0x05	; 5
 478:	c8 17       	cp	r28, r24
 47a:	d9 07       	cpc	r29, r25
 47c:	c4 f4       	brge	.+48     	; 0x4ae <UpdateGreenBars+0x6a>
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[barRo][i - nowCol] = 1;
	}
}

void UpdateGreenBars() {
 47e:	8c 01       	movw	r16, r24
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
	
		if(barInsideFrame(i) )	 {
 480:	ce 01       	movw	r24, r28
 482:	0e 94 9c 01 	call	0x338	; 0x338 <barInsideFrame>
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	71 f0       	breq	.+28     	; 0x4a6 <UpdateGreenBars+0x62>
			
			if(i < currentGreenBar)  currentGreenBar = i;
 48a:	80 91 08 08 	lds	r24, 0x0808
 48e:	90 91 09 08 	lds	r25, 0x0809
 492:	c8 17       	cp	r28, r24
 494:	d9 07       	cpc	r29, r25
 496:	24 f4       	brge	.+8      	; 0x4a0 <UpdateGreenBars+0x5c>
 498:	d0 93 09 08 	sts	0x0809, r29
 49c:	c0 93 08 08 	sts	0x0808, r28
			setOnPatternArrayBar(i);
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <setOnPatternArrayBar>
void UpdateGreenBars() {
	
	memset(pattern , 0 , sizeof pattern);
	int tmp = currentGreenBar;
	currentGreenBar  = INF;
	for(int i = tmp ; i < tmp + 5 ; i++  ) {
 4a6:	21 96       	adiw	r28, 0x01	; 1
 4a8:	c0 17       	cp	r28, r16
 4aa:	d1 07       	cpc	r29, r17
 4ac:	49 f7       	brne	.-46     	; 0x480 <UpdateGreenBars+0x3c>
			
			if(i < currentGreenBar)  currentGreenBar = i;
			setOnPatternArrayBar(i);
		}
	}
}
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <enemyInsideFrame>:

int enemyInsideFrame(int enemyID) {

	int leftFrame = nowCol;
 4b8:	20 91 64 00 	lds	r18, 0x0064
 4bc:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
 4c0:	a9 01       	movw	r20, r18
 4c2:	41 5f       	subi	r20, 0xF1	; 241
 4c4:	5f 4f       	sbci	r21, 0xFF	; 255

	if(enemy[enemyID].baseCol >= leftFrame && enemy[enemyID].baseCol <= rightFrame) return 1;
 4c6:	fc 01       	movw	r30, r24
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	ea 51       	subi	r30, 0x1A	; 26
 4d6:	fb 4f       	sbci	r31, 0xFB	; 251
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	82 17       	cp	r24, r18
 4de:	93 07       	cpc	r25, r19
 4e0:	1c f0       	brlt	.+6      	; 0x4e8 <enemyInsideFrame+0x30>
 4e2:	48 17       	cp	r20, r24
 4e4:	59 07       	cpc	r21, r25
 4e6:	64 f4       	brge	.+24     	; 0x500 <enemyInsideFrame+0x48>
	if(enemy[enemyID].baseCol + 1 >= leftFrame && enemy[enemyID].baseCol + 1 <= rightFrame) return 1;
 4e8:	01 96       	adiw	r24, 0x01	; 1
 4ea:	82 17       	cp	r24, r18
 4ec:	93 07       	cpc	r25, r19
 4ee:	5c f0       	brlt	.+22     	; 0x506 <enemyInsideFrame+0x4e>
			setOnPatternArrayBar(i);
		}
	}
}

int enemyInsideFrame(int enemyID) {
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	48 17       	cp	r20, r24
 4f6:	59 07       	cpc	r21, r25
 4f8:	44 f4       	brge	.+16     	; 0x50a <enemyInsideFrame+0x52>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <enemyInsideFrame+0x52>

	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;

	if(enemy[enemyID].baseCol >= leftFrame && enemy[enemyID].baseCol <= rightFrame) return 1;
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	02 c0       	rjmp	.+4      	; 0x50a <enemyInsideFrame+0x52>
	if(enemy[enemyID].baseCol + 1 >= leftFrame && enemy[enemyID].baseCol + 1 <= rightFrame) return 1;

	return 0;
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
}
 50a:	82 2f       	mov	r24, r18
 50c:	93 2f       	mov	r25, r19
 50e:	08 95       	ret

00000510 <setOnPatternArrayEnemy>:


void setOnPatternArrayEnemy(int enemyID) {
 510:	af 92       	push	r10
 512:	bf 92       	push	r11
 514:	cf 92       	push	r12
 516:	df 92       	push	r13
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	6c 01       	movw	r12, r24
	
	
	int enemyRo = enemy[enemyID].baseRo;
 526:	fc 01       	movw	r30, r24
 528:	ee 0f       	add	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	ee 0f       	add	r30, r30
 52e:	ff 1f       	adc	r31, r31
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	ea 51       	subi	r30, 0x1A	; 26
 536:	fb 4f       	sbci	r31, 0xFB	; 251
 538:	a0 80       	ld	r10, Z
 53a:	b1 80       	ldd	r11, Z+1	; 0x01
	
	int printFrm = nowCol;
 53c:	e0 90 64 00 	lds	r14, 0x0064
 540:	f0 90 65 00 	lds	r15, 0x0065
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
 544:	42 81       	ldd	r20, Z+2	; 0x02
 546:	53 81       	ldd	r21, Z+3	; 0x03
 548:	8a 01       	movw	r16, r20
 54a:	4e 15       	cp	r20, r14
 54c:	5f 05       	cpc	r21, r15
 54e:	0c f4       	brge	.+2      	; 0x552 <setOnPatternArrayEnemy+0x42>
 550:	87 01       	movw	r16, r14
	
	int printTo = nowCol + 15;
 552:	c7 01       	movw	r24, r14
 554:	0f 96       	adiw	r24, 0x0f	; 15
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
 556:	4f 5f       	subi	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255
	int enemyRo = enemy[enemyID].baseRo;
	
	int printFrm = nowCol;
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
	
	int printTo = nowCol + 15;
 55a:	84 17       	cp	r24, r20
 55c:	95 07       	cpc	r25, r21
 55e:	0c f4       	brge	.+2      	; 0x562 <setOnPatternArrayEnemy+0x52>
 560:	ac 01       	movw	r20, r24
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 562:	40 17       	cp	r20, r16
 564:	51 07       	cpc	r21, r17
 566:	c4 f1       	brlt	.+112    	; 0x5d8 <setOnPatternArrayEnemy+0xc8>
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 568:	f5 01       	movw	r30, r10
 56a:	31 97       	sbiw	r30, 0x01	; 1

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 56c:	e2 95       	swap	r30
 56e:	f2 95       	swap	r31
 570:	f0 7f       	andi	r31, 0xF0	; 240
 572:	fe 27       	eor	r31, r30
 574:	e0 7f       	andi	r30, 0xF0	; 240
 576:	fe 27       	eor	r31, r30
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 578:	c8 01       	movw	r24, r16
 57a:	8e 19       	sub	r24, r14
 57c:	9f 09       	sbc	r25, r15

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 57e:	e8 0f       	add	r30, r24
 580:	f9 1f       	adc	r31, r25
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e2 57       	subi	r30, 0x72	; 114
 588:	ff 4f       	sbci	r31, 0xFF	; 255
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 58a:	c8 01       	movw	r24, r16
	if( enemy[enemyID].baseCol > printFrm)  printFrm = enemy[enemyID].baseCol;
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	70 e0       	ldi	r23, 0x00	; 0
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
 590:	c0 e0       	ldi	r28, 0x00	; 0
 592:	d0 e0       	ldi	r29, 0x00	; 0

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 594:	df 01       	movw	r26, r30
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
 596:	20 a1       	ldd	r18, Z+32	; 0x20
 598:	31 a1       	ldd	r19, Z+33	; 0x21
 59a:	24 30       	cpi	r18, 0x04	; 4
 59c:	31 05       	cpc	r19, r1
 59e:	09 f4       	brne	.+2      	; 0x5a2 <setOnPatternArrayEnemy+0x92>
 5a0:	be 01       	movw	r22, r28
 5a2:	32 96       	adiw	r30, 0x02	; 2
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
 5a4:	2d 91       	ld	r18, X+
 5a6:	3c 91       	ld	r19, X
 5a8:	11 97       	sbiw	r26, 0x01	; 1
 5aa:	24 30       	cpi	r18, 0x04	; 4
 5ac:	31 05       	cpc	r19, r1
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <setOnPatternArrayEnemy+0xa2>
 5b0:	be 01       	movw	r22, r28
	
	int printTo = nowCol + 15;
	if(enemy[enemyID].baseCol + 1 < printTo  ) printTo = enemy[enemyID].baseCol + 1;
	
	int safe = 1;
	for(int i = printFrm ; i <= printTo ; i++ ) {
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	48 17       	cp	r20, r24
 5b6:	59 07       	cpc	r21, r25
 5b8:	6c f7       	brge	.-38     	; 0x594 <setOnPatternArrayEnemy+0x84>
		if(pattern[enemyRo][i - nowCol] == 4) safe = 0;
		if(pattern[enemyRo-1][i - nowCol] == 4 ) safe = 0;
	}
	if(safe == 0 ) {
 5ba:	61 15       	cp	r22, r1
 5bc:	71 05       	cpc	r23, r1
 5be:	61 f4       	brne	.+24     	; 0x5d8 <setOnPatternArrayEnemy+0xc8>
		enemy[enemyID].lifeLeft = 0;
 5c0:	f6 01       	movw	r30, r12
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ea 51       	subi	r30, 0x1A	; 26
 5d0:	fb 4f       	sbci	r31, 0xFB	; 251
 5d2:	17 82       	std	Z+7, r1	; 0x07
 5d4:	16 82       	std	Z+6, r1	; 0x06
		return ;
 5d6:	58 c0       	rjmp	.+176    	; 0x688 <setOnPatternArrayEnemy+0x178>
		killSiam();
		recoverSiam();
		return ;
	}
	*/		
	else if(pattern[enemyRo-2][printFrm-nowCol] == 2 || pattern[enemyRo-2][printTo-nowCol] == 2) {
 5d8:	c5 01       	movw	r24, r10
 5da:	02 97       	sbiw	r24, 0x02	; 2
 5dc:	b8 01       	movw	r22, r16
 5de:	6e 19       	sub	r22, r14
 5e0:	7f 09       	sbc	r23, r15
 5e2:	fc 01       	movw	r30, r24
 5e4:	e2 95       	swap	r30
 5e6:	f2 95       	swap	r31
 5e8:	f0 7f       	andi	r31, 0xF0	; 240
 5ea:	fe 27       	eor	r31, r30
 5ec:	e0 7f       	andi	r30, 0xF0	; 240
 5ee:	fe 27       	eor	r31, r30
 5f0:	e6 0f       	add	r30, r22
 5f2:	f7 1f       	adc	r31, r23
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	e2 57       	subi	r30, 0x72	; 114
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	20 81       	ld	r18, Z
 5fe:	31 81       	ldd	r19, Z+1	; 0x01
 600:	22 30       	cpi	r18, 0x02	; 2
 602:	31 05       	cpc	r19, r1
 604:	c9 f0       	breq	.+50     	; 0x638 <setOnPatternArrayEnemy+0x128>
 606:	9a 01       	movw	r18, r20
 608:	2e 19       	sub	r18, r14
 60a:	3f 09       	sbc	r19, r15
 60c:	fc 01       	movw	r30, r24
 60e:	e2 95       	swap	r30
 610:	f2 95       	swap	r31
 612:	f0 7f       	andi	r31, 0xF0	; 240
 614:	fe 27       	eor	r31, r30
 616:	e0 7f       	andi	r30, 0xF0	; 240
 618:	fe 27       	eor	r31, r30
 61a:	e2 0f       	add	r30, r18
 61c:	f3 1f       	adc	r31, r19
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	e2 57       	subi	r30, 0x72	; 114
 624:	ff 4f       	sbci	r31, 0xFF	; 255
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	91 05       	cpc	r25, r1
 62e:	21 f0       	breq	.+8      	; 0x638 <setOnPatternArrayEnemy+0x128>
		enemy[enemyID].lifeLeft = 0;
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 630:	40 17       	cp	r20, r16
 632:	51 07       	cpc	r21, r17
 634:	6c f4       	brge	.+26     	; 0x650 <setOnPatternArrayEnemy+0x140>
 636:	28 c0       	rjmp	.+80     	; 0x688 <setOnPatternArrayEnemy+0x178>
		recoverSiam();
		return ;
	}
	*/		
	else if(pattern[enemyRo-2][printFrm-nowCol] == 2 || pattern[enemyRo-2][printTo-nowCol] == 2) {
		enemy[enemyID].lifeLeft = 0;
 638:	f6 01       	movw	r30, r12
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	ea 51       	subi	r30, 0x1A	; 26
 648:	fb 4f       	sbci	r31, 0xFB	; 251
 64a:	17 82       	std	Z+7, r1	; 0x07
 64c:	16 82       	std	Z+6, r1	; 0x06
		return ;
 64e:	1c c0       	rjmp	.+56     	; 0x688 <setOnPatternArrayEnemy+0x178>
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[enemyRo][i - nowCol] = 3;
		pattern[enemyRo-1][i - nowCol] = 3;
 650:	08 94       	sec
 652:	a1 08       	sbc	r10, r1
 654:	b1 08       	sbc	r11, r1

	return 0;
}


void setOnPatternArrayEnemy(int enemyID) {
 656:	f5 01       	movw	r30, r10
 658:	e2 95       	swap	r30
 65a:	f2 95       	swap	r31
 65c:	f0 7f       	andi	r31, 0xF0	; 240
 65e:	fe 27       	eor	r31, r30
 660:	e0 7f       	andi	r30, 0xF0	; 240
 662:	fe 27       	eor	r31, r30
 664:	6e 0f       	add	r22, r30
 666:	7f 1f       	adc	r23, r31
 668:	fb 01       	movw	r30, r22
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	e2 57       	subi	r30, 0x72	; 114
 670:	ff 4f       	sbci	r31, 0xFF	; 255
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
		pattern[enemyRo][i - nowCol] = 3;
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	91 a3       	std	Z+33, r25	; 0x21
 678:	80 a3       	std	Z+32, r24	; 0x20
		pattern[enemyRo-1][i - nowCol] = 3;
 67a:	81 93       	st	Z+, r24
 67c:	91 93       	st	Z+, r25
		enemy[enemyID].lifeLeft = 0;
		return ;
	}		
	
	
	for(int i = printFrm ; i <= printTo ; i++ ) {
 67e:	0f 5f       	subi	r16, 0xFF	; 255
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	40 17       	cp	r20, r16
 684:	51 07       	cpc	r21, r17
 686:	bc f7       	brge	.-18     	; 0x676 <setOnPatternArrayEnemy+0x166>
		pattern[enemyRo][i - nowCol] = 3;
		pattern[enemyRo-1][i - nowCol] = 3;
	}
	//pattern[enemyRo-1][printFrm-nowCol - 1] = 3;
}
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	df 90       	pop	r13
 696:	cf 90       	pop	r12
 698:	bf 90       	pop	r11
 69a:	af 90       	pop	r10
 69c:	08 95       	ret

0000069e <UpdateEnemies>:


void UpdateEnemies() {
 69e:	0f 93       	push	r16
 6a0:	1f 93       	push	r17
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
 6a6:	c0 91 08 08 	lds	r28, 0x0808
 6aa:	d0 91 09 08 	lds	r29, 0x0809
 6ae:	ce 01       	movw	r24, r28
 6b0:	05 96       	adiw	r24, 0x05	; 5
 6b2:	c8 17       	cp	r28, r24
 6b4:	d9 07       	cpc	r29, r25
 6b6:	0c f5       	brge	.+66     	; 0x6fa <UpdateEnemies+0x5c>
	}
	//pattern[enemyRo-1][printFrm-nowCol - 1] = 3;
}


void UpdateEnemies() {
 6b8:	8e 01       	movw	r16, r28
 6ba:	00 0f       	add	r16, r16
 6bc:	11 1f       	adc	r17, r17
 6be:	00 0f       	add	r16, r16
 6c0:	11 1f       	adc	r17, r17
 6c2:	00 0f       	add	r16, r16
 6c4:	11 1f       	adc	r17, r17
 6c6:	04 51       	subi	r16, 0x14	; 20
 6c8:	1b 4f       	sbci	r17, 0xFB	; 251
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
		if(enemy[i].lifeLeft && enemyInsideFrame(i)) {
 6ca:	f8 01       	movw	r30, r16
 6cc:	80 81       	ld	r24, Z
 6ce:	91 81       	ldd	r25, Z+1	; 0x01
 6d0:	00 97       	sbiw	r24, 0x00	; 0
 6d2:	41 f0       	breq	.+16     	; 0x6e4 <UpdateEnemies+0x46>
 6d4:	ce 01       	movw	r24, r28
 6d6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <enemyInsideFrame>
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <UpdateEnemies+0x46>
			setOnPatternArrayEnemy(i);
 6de:	ce 01       	movw	r24, r28
 6e0:	0e 94 88 02 	call	0x510	; 0x510 <setOnPatternArrayEnemy>
}


void UpdateEnemies() {
	
	for(int i = currentGreenBar  ; i< currentGreenBar + 5 ; i++ ) {
 6e4:	21 96       	adiw	r28, 0x01	; 1
 6e6:	08 5f       	subi	r16, 0xF8	; 248
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	80 91 08 08 	lds	r24, 0x0808
 6ee:	90 91 09 08 	lds	r25, 0x0809
 6f2:	05 96       	adiw	r24, 0x05	; 5
 6f4:	c8 17       	cp	r28, r24
 6f6:	d9 07       	cpc	r29, r25
 6f8:	44 f3       	brlt	.-48     	; 0x6ca <UpdateEnemies+0x2c>
		if(enemy[i].lifeLeft && enemyInsideFrame(i)) {
			setOnPatternArrayEnemy(i);
		}
	}
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	08 95       	ret

00000704 <bulletInsideFrame>:

int bulletInsideFrame(int bulletID) {
	
	int leftFrame = nowCol;
 704:	20 91 64 00 	lds	r18, 0x0064
 708:	30 91 65 00 	lds	r19, 0x0065
	int rightFrame = nowCol + 15;
	
	if(bullet[bulletID].col >=leftFrame && bullet[bulletID].col <= rightFrame ) return 1;
 70c:	ac 01       	movw	r20, r24
 70e:	44 0f       	add	r20, r20
 710:	55 1f       	adc	r21, r21
 712:	48 0f       	add	r20, r24
 714:	59 1f       	adc	r21, r25
 716:	fa 01       	movw	r30, r20
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	ea 59       	subi	r30, 0x9A	; 154
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	82 81       	ldd	r24, Z+2	; 0x02
 722:	93 81       	ldd	r25, Z+3	; 0x03
 724:	82 17       	cp	r24, r18
 726:	93 07       	cpc	r25, r19
 728:	5c f0       	brlt	.+22     	; 0x740 <bulletInsideFrame+0x3c>
}

int bulletInsideFrame(int bulletID) {
	
	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;
 72a:	a9 01       	movw	r20, r18
 72c:	41 5f       	subi	r20, 0xF1	; 241
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
			setOnPatternArrayEnemy(i);
		}
	}
}

int bulletInsideFrame(int bulletID) {
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	48 17       	cp	r20, r24
 736:	59 07       	cpc	r21, r25
 738:	2c f4       	brge	.+10     	; 0x744 <bulletInsideFrame+0x40>
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <bulletInsideFrame+0x40>
	
	int leftFrame = nowCol;
	int rightFrame = nowCol + 15;
	
	if(bullet[bulletID].col >=leftFrame && bullet[bulletID].col <= rightFrame ) return 1;
	return 0;
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
}
 744:	82 2f       	mov	r24, r18
 746:	93 2f       	mov	r25, r19
 748:	08 95       	ret

0000074a <setOnPatternArrayBullet>:


void setOnPatternArrayBullet(int bulletID) {
	int row = bullet[bulletID].ro;
 74a:	9c 01       	movw	r18, r24
 74c:	22 0f       	add	r18, r18
 74e:	33 1f       	adc	r19, r19
 750:	28 0f       	add	r18, r24
 752:	39 1f       	adc	r19, r25
 754:	f9 01       	movw	r30, r18
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	ea 59       	subi	r30, 0x9A	; 154
 75c:	ff 4f       	sbci	r31, 0xFF	; 255
	int col = bullet[bulletID].col;
	
	pattern[row][col - nowCol] = 4;
 75e:	80 81       	ld	r24, Z
 760:	91 81       	ldd	r25, Z+1	; 0x01
 762:	02 80       	ldd	r0, Z+2	; 0x02
 764:	f3 81       	ldd	r31, Z+3	; 0x03
 766:	e0 2d       	mov	r30, r0
 768:	20 91 64 00 	lds	r18, 0x0064
 76c:	30 91 65 00 	lds	r19, 0x0065
 770:	e2 1b       	sub	r30, r18
 772:	f3 0b       	sbc	r31, r19
 774:	82 95       	swap	r24
 776:	92 95       	swap	r25
 778:	90 7f       	andi	r25, 0xF0	; 240
 77a:	98 27       	eor	r25, r24
 77c:	80 7f       	andi	r24, 0xF0	; 240
 77e:	98 27       	eor	r25, r24
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	ee 0f       	add	r30, r30
 786:	ff 1f       	adc	r31, r31
 788:	e2 57       	subi	r30, 0x72	; 114
 78a:	ff 4f       	sbci	r31, 0xFF	; 255
 78c:	84 e0       	ldi	r24, 0x04	; 4
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	91 83       	std	Z+1, r25	; 0x01
 792:	80 83       	st	Z, r24
}
 794:	08 95       	ret

00000796 <UpdateBullet>:


void UpdateBullet() {
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
	
	for(int i =0 ; i < totBullet ; i++ ) {
 7a2:	c8 e6       	ldi	r28, 0x68	; 104
 7a4:	d0 e0       	ldi	r29, 0x00	; 0
 7a6:	00 e0       	ldi	r16, 0x00	; 0
 7a8:	10 e0       	ldi	r17, 0x00	; 0
		
		if(bullet[i].alive == 0 ) continue;
 7aa:	8a 81       	ldd	r24, Y+2	; 0x02
 7ac:	9b 81       	ldd	r25, Y+3	; 0x03
 7ae:	00 97       	sbiw	r24, 0x00	; 0
 7b0:	81 f0       	breq	.+32     	; 0x7d2 <UpdateBullet+0x3c>
		
		//pattern[bullet[i].ro][bullet[i].col] = 0;
		bullet[i].col++;
 7b2:	88 81       	ld	r24, Y
 7b4:	99 81       	ldd	r25, Y+1	; 0x01
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	99 83       	std	Y+1, r25	; 0x01
 7ba:	88 83       	st	Y, r24
		
		if(bulletInsideFrame(i)) {
 7bc:	c8 01       	movw	r24, r16
 7be:	0e 94 82 03 	call	0x704	; 0x704 <bulletInsideFrame>
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	21 f0       	breq	.+8      	; 0x7ce <UpdateBullet+0x38>
			
			setOnPatternArrayBullet(i);
 7c6:	c8 01       	movw	r24, r16
 7c8:	0e 94 a5 03 	call	0x74a	; 0x74a <setOnPatternArrayBullet>
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <UpdateBullet+0x3c>
		}
		else {
			bullet[i].alive = 0;
 7ce:	1b 82       	std	Y+3, r1	; 0x03
 7d0:	1a 82       	std	Y+2, r1	; 0x02
}


void UpdateBullet() {
	
	for(int i =0 ; i < totBullet ; i++ ) {
 7d2:	0f 5f       	subi	r16, 0xFF	; 255
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	26 96       	adiw	r28, 0x06	; 6
 7d8:	05 30       	cpi	r16, 0x05	; 5
 7da:	11 05       	cpc	r17, r1
 7dc:	31 f7       	brne	.-52     	; 0x7aa <UpdateBullet+0x14>
		}
		else {
			bullet[i].alive = 0;
		}			
	}
}
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	1f 91       	pop	r17
 7e4:	0f 91       	pop	r16
 7e6:	ff 90       	pop	r15
 7e8:	ef 90       	pop	r14
 7ea:	08 95       	ret

000007ec <right_move_condition_found>:


int right_move_condition_found() {
	
	if(siam.lifeLeft == 0 ) return 0;
 7ec:	80 91 8c 00 	lds	r24, 0x008C
 7f0:	90 91 8d 00 	lds	r25, 0x008D
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	09 f4       	brne	.+2      	; 0x7fa <right_move_condition_found+0xe>
 7f8:	58 c0       	rjmp	.+176    	; 0x8aa <__stack+0x4b>
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
 7fa:	20 91 86 00 	lds	r18, 0x0086
 7fe:	30 91 87 00 	lds	r19, 0x0087
 802:	80 91 88 00 	lds	r24, 0x0088
 806:	90 91 89 00 	lds	r25, 0x0089
 80a:	01 96       	adiw	r24, 0x01	; 1
 80c:	f9 01       	movw	r30, r18
 80e:	e2 95       	swap	r30
 810:	f2 95       	swap	r31
 812:	f0 7f       	andi	r31, 0xF0	; 240
 814:	fe 27       	eor	r31, r30
 816:	e0 7f       	andi	r30, 0xF0	; 240
 818:	fe 27       	eor	r31, r30
 81a:	e8 0f       	add	r30, r24
 81c:	f9 1f       	adc	r31, r25
 81e:	ee 0f       	add	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	e2 57       	subi	r30, 0x72	; 114
 824:	ff 4f       	sbci	r31, 0xFF	; 255
		}			
	}
}


int right_move_condition_found() {
 826:	41 e0       	ldi	r20, 0x01	; 1
 828:	50 e0       	ldi	r21, 0x00	; 0
 82a:	60 81       	ld	r22, Z
 82c:	71 81       	ldd	r23, Z+1	; 0x01
 82e:	61 15       	cp	r22, r1
 830:	71 05       	cpc	r23, r1
 832:	11 f0       	breq	.+4      	; 0x838 <right_move_condition_found+0x4c>
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	50 e0       	ldi	r21, 0x00	; 0
	
	if(siam.lifeLeft == 0 ) return 0;
	
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
 838:	f9 01       	movw	r30, r18
 83a:	31 97       	sbiw	r30, 0x01	; 1
 83c:	e2 95       	swap	r30
 83e:	f2 95       	swap	r31
 840:	f0 7f       	andi	r31, 0xF0	; 240
 842:	fe 27       	eor	r31, r30
 844:	e0 7f       	andi	r30, 0xF0	; 240
 846:	fe 27       	eor	r31, r30
 848:	e8 0f       	add	r30, r24
 84a:	f9 1f       	adc	r31, r25
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	e2 57       	subi	r30, 0x72	; 114
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	61 15       	cp	r22, r1
 85a:	71 05       	cpc	r23, r1
 85c:	11 f0       	breq	.+4      	; 0x862 <__stack+0x3>
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	22 50       	subi	r18, 0x02	; 2
 864:	30 40       	sbci	r19, 0x00	; 0
 866:	f9 01       	movw	r30, r18
 868:	e2 95       	swap	r30
 86a:	f2 95       	swap	r31
 86c:	f0 7f       	andi	r31, 0xF0	; 240
 86e:	fe 27       	eor	r31, r30
 870:	e0 7f       	andi	r30, 0xF0	; 240
 872:	fe 27       	eor	r31, r30
 874:	8e 0f       	add	r24, r30
 876:	9f 1f       	adc	r25, r31
 878:	fc 01       	movw	r30, r24
 87a:	ee 0f       	add	r30, r30
 87c:	ff 1f       	adc	r31, r31
 87e:	e2 57       	subi	r30, 0x72	; 114
 880:	ff 4f       	sbci	r31, 0xFF	; 255
 882:	80 81       	ld	r24, Z
 884:	91 81       	ldd	r25, Z+1	; 0x01
 886:	00 97       	sbiw	r24, 0x00	; 0
 888:	99 f4       	brne	.+38     	; 0x8b0 <__stack+0x51>
	}
	
	if( ret == 0 )  return 0;
 88a:	41 15       	cp	r20, r1
 88c:	51 05       	cpc	r21, r1
 88e:	99 f0       	breq	.+38     	; 0x8b6 <__stack+0x57>
	
	return  (bit_is_set(PINB, 0) && game_delay == 0 );
 890:	b0 9b       	sbis	0x16, 0	; 22
 892:	14 c0       	rjmp	.+40     	; 0x8bc <__stack+0x5d>
		}			
	}
}


int right_move_condition_found() {
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	80 91 84 00 	lds	r24, 0x0084
 89c:	90 91 85 00 	lds	r25, 0x0085
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	71 f0       	breq	.+28     	; 0x8c0 <__stack+0x61>
 8a4:	20 e0       	ldi	r18, 0x00	; 0
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	0b c0       	rjmp	.+22     	; 0x8c0 <__stack+0x61>
	
	if(siam.lifeLeft == 0 ) return 0;
 8aa:	20 e0       	ldi	r18, 0x00	; 0
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <__stack+0x61>
	int ret = 1;
	for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
		if(pattern[siam.baseRo-i][siam.baseCol + 1] ) ret = 0;
	}
	
	if( ret == 0 )  return 0;
 8b0:	20 e0       	ldi	r18, 0x00	; 0
 8b2:	30 e0       	ldi	r19, 0x00	; 0
 8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__stack+0x61>
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
	
	return  (bit_is_set(PINB, 0) && game_delay == 0 );
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
}
 8c0:	82 2f       	mov	r24, r18
 8c2:	93 2f       	mov	r25, r19
 8c4:	08 95       	ret

000008c6 <shoot_condition_found>:

int shoot_condition_found() {
	return (bit_is_set(PINB , 3));
 8c6:	26 b3       	in	r18, 0x16	; 22
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	28 70       	andi	r18, 0x08	; 8
 8cc:	30 70       	andi	r19, 0x00	; 0
}
 8ce:	82 2f       	mov	r24, r18
 8d0:	93 2f       	mov	r25, r19
 8d2:	08 95       	ret

000008d4 <recoverSiam>:


void recoverSiam() {
	
	
	siam.baseRo = 2;
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	90 93 87 00 	sts	0x0087, r25
 8dc:	80 93 86 00 	sts	0x0086, r24
	//siam.baseCol = bars[currentGreenBar].col + 1;
	siam.jmpLeft = 0;
 8e0:	10 92 8b 00 	sts	0x008B, r1
 8e4:	10 92 8a 00 	sts	0x008A, r1
}
 8e8:	08 95       	ret

000008ea <killSiam>:

void killSiam() {
	
	siam.lifeLeft--;
 8ea:	80 91 8c 00 	lds	r24, 0x008C
 8ee:	90 91 8d 00 	lds	r25, 0x008D
 8f2:	01 97       	sbiw	r24, 0x01	; 1
 8f4:	90 93 8d 00 	sts	0x008D, r25
 8f8:	80 93 8c 00 	sts	0x008C, r24
	buzzerSound();
 8fc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <buzzerSound>
}
 900:	08 95       	ret

00000902 <jumpCheckSiam>:

void jumpCheckSiam() {
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
	
	
	if(jump_delay != 0) return;
 90a:	80 91 06 08 	lds	r24, 0x0806
 90e:	90 91 07 08 	lds	r25, 0x0807
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	09 f0       	breq	.+2      	; 0x918 <jumpCheckSiam+0x16>
 916:	72 c0       	rjmp	.+228    	; 0x9fc <jumpCheckSiam+0xfa>
	
	if(siam.jmpLeft > 0) {
 918:	a0 91 8a 00 	lds	r26, 0x008A
 91c:	b0 91 8b 00 	lds	r27, 0x008B
 920:	1a 16       	cp	r1, r26
 922:	1b 06       	cpc	r1, r27
 924:	b4 f5       	brge	.+108    	; 0x992 <jumpCheckSiam+0x90>
		siam.baseRo--;
 926:	20 91 86 00 	lds	r18, 0x0086
 92a:	30 91 87 00 	lds	r19, 0x0087
		siam.jmpLeft--;
 92e:	11 97       	sbiw	r26, 0x01	; 1
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 930:	e0 91 88 00 	lds	r30, 0x0088
 934:	f0 91 89 00 	lds	r31, 0x0089
 938:	21 50       	subi	r18, 0x01	; 1
 93a:	30 40       	sbci	r19, 0x00	; 0
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 940:	6e e8       	ldi	r22, 0x8E	; 142
 942:	70 e0       	ldi	r23, 0x00	; 0
				siam.jmpLeft = 0;
 944:	00 e0       	ldi	r16, 0x00	; 0
 946:	10 e0       	ldi	r17, 0x00	; 0
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
 948:	a9 01       	movw	r20, r18
 94a:	48 1b       	sub	r20, r24
 94c:	59 0b       	sbc	r21, r25
 94e:	42 95       	swap	r20
 950:	52 95       	swap	r21
 952:	50 7f       	andi	r21, 0xF0	; 240
 954:	54 27       	eor	r21, r20
 956:	40 7f       	andi	r20, 0xF0	; 240
 958:	54 27       	eor	r21, r20
 95a:	4e 0f       	add	r20, r30
 95c:	5f 1f       	adc	r21, r31
 95e:	44 0f       	add	r20, r20
 960:	55 1f       	adc	r21, r21
 962:	46 0f       	add	r20, r22
 964:	57 1f       	adc	r21, r23
 966:	ea 01       	movw	r28, r20
 968:	48 81       	ld	r20, Y
 96a:	59 81       	ldd	r21, Y+1	; 0x01
 96c:	41 30       	cpi	r20, 0x01	; 1
 96e:	51 05       	cpc	r21, r1
 970:	19 f4       	brne	.+6      	; 0x978 <jumpCheckSiam+0x76>
				siam.jmpLeft = 0;
				siam.baseRo++;
 972:	2f 5f       	subi	r18, 0xFF	; 255
 974:	3f 4f       	sbci	r19, 0xFF	; 255
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
			if(pattern[siam.baseRo-i][siam.baseCol] == 1 ) {
				siam.jmpLeft = 0;
 976:	d8 01       	movw	r26, r16
	
	if(siam.jmpLeft > 0) {
		siam.baseRo--;
		siam.jmpLeft--;
		
		for(int i =0 ; i < SIAM_HEIGHT ; i++ ) {
 978:	01 96       	adiw	r24, 0x01	; 1
 97a:	83 30       	cpi	r24, 0x03	; 3
 97c:	91 05       	cpc	r25, r1
 97e:	21 f7       	brne	.-56     	; 0x948 <jumpCheckSiam+0x46>
 980:	30 93 87 00 	sts	0x0087, r19
 984:	20 93 86 00 	sts	0x0086, r18
 988:	b0 93 8b 00 	sts	0x008B, r27
 98c:	a0 93 8a 00 	sts	0x008A, r26
 990:	1f c0       	rjmp	.+62     	; 0x9d0 <jumpCheckSiam+0xce>
				siam.baseRo++;
			}				
		}		
	}
	else {
		if(pattern[siam.baseRo+1][siam.baseCol] == 0) siam.baseRo++;
 992:	80 91 86 00 	lds	r24, 0x0086
 996:	90 91 87 00 	lds	r25, 0x0087
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	fc 01       	movw	r30, r24
 99e:	e2 95       	swap	r30
 9a0:	f2 95       	swap	r31
 9a2:	f0 7f       	andi	r31, 0xF0	; 240
 9a4:	fe 27       	eor	r31, r30
 9a6:	e0 7f       	andi	r30, 0xF0	; 240
 9a8:	fe 27       	eor	r31, r30
 9aa:	20 91 88 00 	lds	r18, 0x0088
 9ae:	30 91 89 00 	lds	r19, 0x0089
 9b2:	e2 0f       	add	r30, r18
 9b4:	f3 1f       	adc	r31, r19
 9b6:	ee 0f       	add	r30, r30
 9b8:	ff 1f       	adc	r31, r31
 9ba:	e2 57       	subi	r30, 0x72	; 114
 9bc:	ff 4f       	sbci	r31, 0xFF	; 255
 9be:	20 81       	ld	r18, Z
 9c0:	31 81       	ldd	r19, Z+1	; 0x01
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	21 f4       	brne	.+8      	; 0x9d0 <jumpCheckSiam+0xce>
 9c8:	90 93 87 00 	sts	0x0087, r25
 9cc:	80 93 86 00 	sts	0x0086, r24
	}	
	if(siam.baseRo - SIAM_HEIGHT + 1 < 0 ) siam.baseRo = SIAM_HEIGHT -1;
 9d0:	80 91 86 00 	lds	r24, 0x0086
 9d4:	90 91 87 00 	lds	r25, 0x0087
 9d8:	9c 01       	movw	r18, r24
 9da:	22 50       	subi	r18, 0x02	; 2
 9dc:	30 40       	sbci	r19, 0x00	; 0
 9de:	3a f4       	brpl	.+14     	; 0x9ee <jumpCheckSiam+0xec>
 9e0:	82 e0       	ldi	r24, 0x02	; 2
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	90 93 87 00 	sts	0x0087, r25
 9e8:	80 93 86 00 	sts	0x0086, r24
 9ec:	07 c0       	rjmp	.+14     	; 0x9fc <jumpCheckSiam+0xfa>
	
	if(siam.baseRo >= 15) {
 9ee:	8f 30       	cpi	r24, 0x0F	; 15
 9f0:	91 05       	cpc	r25, r1
 9f2:	24 f0       	brlt	.+8      	; 0x9fc <jumpCheckSiam+0xfa>
		killSiam();
 9f4:	0e 94 75 04 	call	0x8ea	; 0x8ea <killSiam>
		recoverSiam();
 9f8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <recoverSiam>
	}		
	
}
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	1f 91       	pop	r17
 a02:	0f 91       	pop	r16
 a04:	08 95       	ret

00000a06 <UpdateSiam>:
void UpdateSiam() {
	
	if(siam.lifeLeft == 0) return;
 a06:	80 91 8c 00 	lds	r24, 0x008C
 a0a:	90 91 8d 00 	lds	r25, 0x008D
 a0e:	00 97       	sbiw	r24, 0x00	; 0
 a10:	09 f4       	brne	.+2      	; 0xa14 <UpdateSiam+0xe>
 a12:	51 c0       	rjmp	.+162    	; 0xab6 <UpdateSiam+0xb0>
	
	jumpCheckSiam();
 a14:	0e 94 81 04 	call	0x902	; 0x902 <jumpCheckSiam>

	
	for(int i =0 ; i < SIAM_HEIGHT; i ++ ) {
		
		pattern[siam.baseRo-i][siam.baseCol] = 2;
 a18:	60 91 86 00 	lds	r22, 0x0086
 a1c:	70 91 87 00 	lds	r23, 0x0087
 a20:	40 91 88 00 	lds	r20, 0x0088
 a24:	50 91 89 00 	lds	r21, 0x0089
 a28:	fb 01       	movw	r30, r22
 a2a:	e2 95       	swap	r30
 a2c:	f2 95       	swap	r31
 a2e:	f0 7f       	andi	r31, 0xF0	; 240
 a30:	fe 27       	eor	r31, r30
 a32:	e0 7f       	andi	r30, 0xF0	; 240
 a34:	fe 27       	eor	r31, r30
 a36:	e4 0f       	add	r30, r20
 a38:	f5 1f       	adc	r31, r21
 a3a:	2e e8       	ldi	r18, 0x8E	; 142
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	ee 0f       	add	r30, r30
 a40:	ff 1f       	adc	r31, r31
 a42:	e2 0f       	add	r30, r18
 a44:	f3 1f       	adc	r31, r19
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	91 83       	std	Z+1, r25	; 0x01
 a4c:	80 83       	st	Z, r24
 a4e:	fb 01       	movw	r30, r22
 a50:	31 97       	sbiw	r30, 0x01	; 1
 a52:	e2 95       	swap	r30
 a54:	f2 95       	swap	r31
 a56:	f0 7f       	andi	r31, 0xF0	; 240
 a58:	fe 27       	eor	r31, r30
 a5a:	e0 7f       	andi	r30, 0xF0	; 240
 a5c:	fe 27       	eor	r31, r30
 a5e:	e4 0f       	add	r30, r20
 a60:	f5 1f       	adc	r31, r21
 a62:	ee 0f       	add	r30, r30
 a64:	ff 1f       	adc	r31, r31
 a66:	e2 0f       	add	r30, r18
 a68:	f3 1f       	adc	r31, r19
 a6a:	91 83       	std	Z+1, r25	; 0x01
 a6c:	80 83       	st	Z, r24
 a6e:	62 50       	subi	r22, 0x02	; 2
 a70:	70 40       	sbci	r23, 0x00	; 0
 a72:	62 95       	swap	r22
 a74:	72 95       	swap	r23
 a76:	70 7f       	andi	r23, 0xF0	; 240
 a78:	76 27       	eor	r23, r22
 a7a:	60 7f       	andi	r22, 0xF0	; 240
 a7c:	76 27       	eor	r23, r22
 a7e:	46 0f       	add	r20, r22
 a80:	57 1f       	adc	r21, r23
 a82:	44 0f       	add	r20, r20
 a84:	55 1f       	adc	r21, r21
 a86:	24 0f       	add	r18, r20
 a88:	35 1f       	adc	r19, r21
 a8a:	f9 01       	movw	r30, r18
 a8c:	91 83       	std	Z+1, r25	; 0x01
 a8e:	80 83       	st	Z, r24
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
 a90:	20 91 8c 00 	lds	r18, 0x008C
 a94:	30 91 8d 00 	lds	r19, 0x008D
 a98:	12 16       	cp	r1, r18
 a9a:	13 06       	cpc	r1, r19
 a9c:	64 f4       	brge	.+24     	; 0xab6 <UpdateSiam+0xb0>
 a9e:	ee ea       	ldi	r30, 0xAE	; 174
 aa0:	f0 e0       	ldi	r31, 0x00	; 0
		killSiam();
		recoverSiam();
	}		
	
}
void UpdateSiam() {
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	90 e0       	ldi	r25, 0x00	; 0
		pattern[siam.baseRo-i][siam.baseCol] = 2;
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
		pattern[0][15-i] = 2;
 aa6:	42 e0       	ldi	r20, 0x02	; 2
 aa8:	50 e0       	ldi	r21, 0x00	; 0
 aaa:	52 93       	st	-Z, r21
 aac:	42 93       	st	-Z, r20
		
		pattern[siam.baseRo-i][siam.baseCol] = 2;
	}
	
	
	for(int i = 0 ; i < siam.lifeLeft ; i++) {
 aae:	01 96       	adiw	r24, 0x01	; 1
 ab0:	82 17       	cp	r24, r18
 ab2:	93 07       	cpc	r25, r19
 ab4:	d4 f3       	brlt	.-12     	; 0xaaa <UpdateSiam+0xa4>
 ab6:	08 95       	ret

00000ab8 <portInit>:

void portInit() {
	
		
	//PORTA = row(A0 to A3)
	DDRA = 0xFF;
 ab8:	8f ef       	ldi	r24, 0xFF	; 255
 aba:	8a bb       	out	0x1a, r24	; 26
	
	//PORTD = column ; red -> D0 to D7 ; green -> D8 to D15
	DDRD = 0xFF;
 abc:	81 bb       	out	0x11, r24	; 17
	
	//PORTC -> last 2 bit controls color C0 -> greeen C1 -> red
	DDRC = 0xFF;
 abe:	84 bb       	out	0x14, r24	; 20
	
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11110100;	
 ac0:	84 ef       	ldi	r24, 0xF4	; 244
 ac2:	87 bb       	out	0x17, r24	; 23
}
 ac4:	08 95       	ret

00000ac6 <jump_condition_found>:


int jump_condition_found() {
	
	if(siam.lifeLeft > 0 && pattern[siam.baseRo + 1][siam.baseCol]  && bit_is_set(PINB, 1) && jump_delay == 0 ) return 1;
 ac6:	80 91 8c 00 	lds	r24, 0x008C
 aca:	90 91 8d 00 	lds	r25, 0x008D
 ace:	18 16       	cp	r1, r24
 ad0:	19 06       	cpc	r1, r25
 ad2:	34 f5       	brge	.+76     	; 0xb20 <jump_condition_found+0x5a>
 ad4:	e0 91 86 00 	lds	r30, 0x0086
 ad8:	f0 91 87 00 	lds	r31, 0x0087
 adc:	31 96       	adiw	r30, 0x01	; 1
 ade:	e2 95       	swap	r30
 ae0:	f2 95       	swap	r31
 ae2:	f0 7f       	andi	r31, 0xF0	; 240
 ae4:	fe 27       	eor	r31, r30
 ae6:	e0 7f       	andi	r30, 0xF0	; 240
 ae8:	fe 27       	eor	r31, r30
 aea:	80 91 88 00 	lds	r24, 0x0088
 aee:	90 91 89 00 	lds	r25, 0x0089
 af2:	e8 0f       	add	r30, r24
 af4:	f9 1f       	adc	r31, r25
 af6:	ee 0f       	add	r30, r30
 af8:	ff 1f       	adc	r31, r31
 afa:	e2 57       	subi	r30, 0x72	; 114
 afc:	ff 4f       	sbci	r31, 0xFF	; 255
 afe:	80 81       	ld	r24, Z
 b00:	91 81       	ldd	r25, Z+1	; 0x01
 b02:	00 97       	sbiw	r24, 0x00	; 0
 b04:	81 f0       	breq	.+32     	; 0xb26 <jump_condition_found+0x60>
 b06:	b1 9b       	sbis	0x16, 1	; 22
 b08:	11 c0       	rjmp	.+34     	; 0xb2c <jump_condition_found+0x66>
	//PORTB -> b0 = input for left right navigation ; b1 =  input for jump
	DDRB = 0b11110100;	
}


int jump_condition_found() {
 b0a:	21 e0       	ldi	r18, 0x01	; 1
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	80 91 06 08 	lds	r24, 0x0806
 b12:	90 91 07 08 	lds	r25, 0x0807
 b16:	00 97       	sbiw	r24, 0x00	; 0
 b18:	59 f0       	breq	.+22     	; 0xb30 <jump_condition_found+0x6a>
 b1a:	20 e0       	ldi	r18, 0x00	; 0
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	08 c0       	rjmp	.+16     	; 0xb30 <jump_condition_found+0x6a>
	
	if(siam.lifeLeft > 0 && pattern[siam.baseRo + 1][siam.baseCol]  && bit_is_set(PINB, 1) && jump_delay == 0 ) return 1;
	return 0;
 b20:	20 e0       	ldi	r18, 0x00	; 0
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <jump_condition_found+0x6a>
 b26:	20 e0       	ldi	r18, 0x00	; 0
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <jump_condition_found+0x6a>
 b2c:	20 e0       	ldi	r18, 0x00	; 0
 b2e:	30 e0       	ldi	r19, 0x00	; 0
}
 b30:	82 2f       	mov	r24, r18
 b32:	93 2f       	mov	r25, r19
 b34:	08 95       	ret

00000b36 <jumpUp>:

void jumpUp() {
	siam.jmpLeft = JUMP_HEIGHT;
 b36:	86 e0       	ldi	r24, 0x06	; 6
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	90 93 8b 00 	sts	0x008B, r25
 b3e:	80 93 8a 00 	sts	0x008A, r24
}
 b42:	08 95       	ret

00000b44 <moveRight>:


void moveRight() { 
	nowCol++;	
 b44:	80 91 64 00 	lds	r24, 0x0064
 b48:	90 91 65 00 	lds	r25, 0x0065
 b4c:	01 96       	adiw	r24, 0x01	; 1
 b4e:	90 93 65 00 	sts	0x0065, r25
 b52:	80 93 64 00 	sts	0x0064, r24
}
 b56:	08 95       	ret

00000b58 <shoot>:



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
		if(bullet[i].alive ) continue;
 b58:	80 91 6a 00 	lds	r24, 0x006A
 b5c:	90 91 6b 00 	lds	r25, 0x006B
 b60:	00 97       	sbiw	r24, 0x00	; 0
 b62:	79 f0       	breq	.+30     	; 0xb82 <shoot+0x2a>
 b64:	e0 e7       	ldi	r30, 0x70	; 112
 b66:	f0 e0       	ldi	r31, 0x00	; 0
}



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
 b68:	81 e0       	ldi	r24, 0x01	; 1
 b6a:	90 e0       	ldi	r25, 0x00	; 0
		if(bullet[i].alive ) continue;
 b6c:	20 81       	ld	r18, Z
 b6e:	31 81       	ldd	r19, Z+1	; 0x01
 b70:	21 15       	cp	r18, r1
 b72:	31 05       	cpc	r19, r1
 b74:	41 f0       	breq	.+16     	; 0xb86 <shoot+0x2e>
}



void shoot() {
	for(int i = 0 ; i < totBullet ; i++ ) {
 b76:	01 96       	adiw	r24, 0x01	; 1
 b78:	36 96       	adiw	r30, 0x06	; 6
 b7a:	85 30       	cpi	r24, 0x05	; 5
 b7c:	91 05       	cpc	r25, r1
 b7e:	b1 f7       	brne	.-20     	; 0xb6c <shoot+0x14>
 b80:	08 95       	ret
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
		if(bullet[i].alive ) continue;
		bullet[i].alive = 1;
 b86:	fc 01       	movw	r30, r24
 b88:	ee 0f       	add	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	8e 0f       	add	r24, r30
 b8e:	9f 1f       	adc	r25, r31
 b90:	fc 01       	movw	r30, r24
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	ea 59       	subi	r30, 0x9A	; 154
 b98:	ff 4f       	sbci	r31, 0xFF	; 255
 b9a:	81 e0       	ldi	r24, 0x01	; 1
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	95 83       	std	Z+5, r25	; 0x05
 ba0:	84 83       	std	Z+4, r24	; 0x04
		bullet[i].ro = siam.baseRo-1 ;
 ba2:	80 91 86 00 	lds	r24, 0x0086
 ba6:	90 91 87 00 	lds	r25, 0x0087
 baa:	01 97       	sbiw	r24, 0x01	; 1
 bac:	91 83       	std	Z+1, r25	; 0x01
 bae:	80 83       	st	Z, r24
		bullet[i].col = nowCol;
 bb0:	80 91 64 00 	lds	r24, 0x0064
 bb4:	90 91 65 00 	lds	r25, 0x0065
 bb8:	93 83       	std	Z+3, r25	; 0x03
 bba:	82 83       	std	Z+2, r24	; 0x02
 bbc:	08 95       	ret

00000bbe <main>:
	}
}


int main()
{
 bbe:	ef 92       	push	r14
 bc0:	ff 92       	push	r15
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
	
	portInit();	
 bca:	0e 94 5c 05 	call	0xab8	; 0xab8 <portInit>
	
	setGreenBars();
 bce:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setGreenBars>
	setEnemies();
 bd2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <setEnemies>
	setSiam();
 bd6:	0e 94 85 01 	call	0x30a	; 0x30a <setSiam>
	
	while(1) {
		game_delay++;
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 bda:	c4 e0       	ldi	r28, 0x04	; 4
 bdc:	d0 e0       	ldi	r29, 0x00	; 0
		jump_delay %= JUMP_DELAY_VAL;
 bde:	02 e0       	ldi	r16, 0x02	; 2
 be0:	10 e0       	ldi	r17, 0x00	; 0
		UpdateEnemies();
		
		
		printScreen();
		
		if(siam.lifeLeft == 0 ) continue;
 be2:	0f 2e       	mov	r0, r31
 be4:	fc e8       	ldi	r31, 0x8C	; 140
 be6:	ef 2e       	mov	r14, r31
 be8:	f0 e0       	ldi	r31, 0x00	; 0
 bea:	ff 2e       	mov	r15, r31
 bec:	f0 2d       	mov	r31, r0
	setEnemies();
	setSiam();
	
	while(1) {
		game_delay++;
		jump_delay++;
 bee:	20 91 06 08 	lds	r18, 0x0806
 bf2:	30 91 07 08 	lds	r19, 0x0807
 bf6:	2f 5f       	subi	r18, 0xFF	; 255
 bf8:	3f 4f       	sbci	r19, 0xFF	; 255
	setGreenBars();
	setEnemies();
	setSiam();
	
	while(1) {
		game_delay++;
 bfa:	80 91 84 00 	lds	r24, 0x0084
 bfe:	90 91 85 00 	lds	r25, 0x0085
 c02:	01 96       	adiw	r24, 0x01	; 1
		jump_delay++;
		game_delay %= GAME_DELAY_VAL;	
 c04:	be 01       	movw	r22, r28
 c06:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodhi4>
 c0a:	90 93 85 00 	sts	0x0085, r25
 c0e:	80 93 84 00 	sts	0x0084, r24
		jump_delay %= JUMP_DELAY_VAL;
 c12:	c9 01       	movw	r24, r18
 c14:	b8 01       	movw	r22, r16
 c16:	0e 94 39 06 	call	0xc72	; 0xc72 <__divmodhi4>
 c1a:	90 93 07 08 	sts	0x0807, r25
 c1e:	80 93 06 08 	sts	0x0806, r24
		
		UpdateGreenBars();
 c22:	0e 94 22 02 	call	0x444	; 0x444 <UpdateGreenBars>
		UpdateBullet();
 c26:	0e 94 cb 03 	call	0x796	; 0x796 <UpdateBullet>
		
		UpdateSiam();//ALWAYS UPDATE SIAM & enemies AFTER GREEN BARS
 c2a:	0e 94 03 05 	call	0xa06	; 0xa06 <UpdateSiam>
		UpdateEnemies();
 c2e:	0e 94 4f 03 	call	0x69e	; 0x69e <UpdateEnemies>
		
		
		printScreen();
 c32:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(siam.lifeLeft == 0 ) continue;
 c36:	f7 01       	movw	r30, r14
 c38:	80 81       	ld	r24, Z
 c3a:	91 81       	ldd	r25, Z+1	; 0x01
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	b9 f2       	breq	.-82     	; 0xbee <main+0x30>
		
		if(right_move_condition_found()) {
 c40:	0e 94 f6 03 	call	0x7ec	; 0x7ec <right_move_condition_found>
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	11 f0       	breq	.+4      	; 0xc4c <main+0x8e>
			moveRight();
 c48:	0e 94 a2 05 	call	0xb44	; 0xb44 <moveRight>
		}
		printScreen();
 c4c:	0e 94 56 00 	call	0xac	; 0xac <printScreen>

		if(jump_condition_found()) {
 c50:	0e 94 63 05 	call	0xac6	; 0xac6 <jump_condition_found>
 c54:	00 97       	sbiw	r24, 0x00	; 0
 c56:	11 f0       	breq	.+4      	; 0xc5c <main+0x9e>
			jumpUp();
 c58:	0e 94 9b 05 	call	0xb36	; 0xb36 <jumpUp>
		}
		
		printScreen();
 c5c:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
		
		if(shoot_condition_found()) {
 c60:	0e 94 63 04 	call	0x8c6	; 0x8c6 <shoot_condition_found>
 c64:	00 97       	sbiw	r24, 0x00	; 0
 c66:	11 f0       	breq	.+4      	; 0xc6c <main+0xae>
			shoot();
 c68:	0e 94 ac 05 	call	0xb58	; 0xb58 <shoot>
		}
		
		printScreen();
 c6c:	0e 94 56 00 	call	0xac	; 0xac <printScreen>
 c70:	be cf       	rjmp	.-132    	; 0xbee <main+0x30>

00000c72 <__divmodhi4>:
 c72:	97 fb       	bst	r25, 7
 c74:	09 2e       	mov	r0, r25
 c76:	07 26       	eor	r0, r23
 c78:	0a d0       	rcall	.+20     	; 0xc8e <__divmodhi4_neg1>
 c7a:	77 fd       	sbrc	r23, 7
 c7c:	04 d0       	rcall	.+8      	; 0xc86 <__divmodhi4_neg2>
 c7e:	0c d0       	rcall	.+24     	; 0xc98 <__udivmodhi4>
 c80:	06 d0       	rcall	.+12     	; 0xc8e <__divmodhi4_neg1>
 c82:	00 20       	and	r0, r0
 c84:	1a f4       	brpl	.+6      	; 0xc8c <__divmodhi4_exit>

00000c86 <__divmodhi4_neg2>:
 c86:	70 95       	com	r23
 c88:	61 95       	neg	r22
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c8c <__divmodhi4_exit>:
 c8c:	08 95       	ret

00000c8e <__divmodhi4_neg1>:
 c8e:	f6 f7       	brtc	.-4      	; 0xc8c <__divmodhi4_exit>
 c90:	90 95       	com	r25
 c92:	81 95       	neg	r24
 c94:	9f 4f       	sbci	r25, 0xFF	; 255
 c96:	08 95       	ret

00000c98 <__udivmodhi4>:
 c98:	aa 1b       	sub	r26, r26
 c9a:	bb 1b       	sub	r27, r27
 c9c:	51 e1       	ldi	r21, 0x11	; 17
 c9e:	07 c0       	rjmp	.+14     	; 0xcae <__udivmodhi4_ep>

00000ca0 <__udivmodhi4_loop>:
 ca0:	aa 1f       	adc	r26, r26
 ca2:	bb 1f       	adc	r27, r27
 ca4:	a6 17       	cp	r26, r22
 ca6:	b7 07       	cpc	r27, r23
 ca8:	10 f0       	brcs	.+4      	; 0xcae <__udivmodhi4_ep>
 caa:	a6 1b       	sub	r26, r22
 cac:	b7 0b       	sbc	r27, r23

00000cae <__udivmodhi4_ep>:
 cae:	88 1f       	adc	r24, r24
 cb0:	99 1f       	adc	r25, r25
 cb2:	5a 95       	dec	r21
 cb4:	a9 f7       	brne	.-22     	; 0xca0 <__udivmodhi4_loop>
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	bc 01       	movw	r22, r24
 cbc:	cd 01       	movw	r24, r26
 cbe:	08 95       	ret

00000cc0 <_exit>:
 cc0:	f8 94       	cli

00000cc2 <__stop_program>:
 cc2:	ff cf       	rjmp	.-2      	; 0xcc2 <__stop_program>
